[{"C:\\xampp\\htdocs\\cpsi-ems\\src\\App.js":"1","C:\\xampp\\htdocs\\cpsi-ems\\src\\reportWebVitals.js":"2","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Role.js":"3","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\Leaves1.js":"4","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\Ticket.js":"5","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\Event.js":"6","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\EditTicket.js":"7","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Profile\\Profile.js":"8","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Qulification\\EditQulification.js":"9","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Experience\\EditExp.js":"10","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Documents\\latter.js":"11","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Messages\\message.js":"12","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Footer.js":"13","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Nav.js":"14","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FontAwesomeIconComponent.js":"15","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\TableComponent.js":"16","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\PageLoader.js":"17","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\EditForm.js":"18","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Login.js":"19","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\InitComponent.js":"20","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\EditUser.js":"21","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\AddLeaves.js":"22","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\EditEvent.js":"23","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\AddUpcomingEvent.js":"24","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Experience\\ExperienceList.js":"25","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Qulification\\AddQulification.js":"26","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UserCheck\\Check.js":"27","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Documents\\Offer.js":"28","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Testing\\testing.js":"29","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\DropdownComponent.js":"30","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Filter\\Tableforfilter.js":"31","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\AddForm.js":"32","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\Index.js":"33","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\AddTickets.js":"34","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\AddEvent.js":"35","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\JobPortal\\JobList.js":"36","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\JobPortal\\EditJob.js":"37","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\TIme Entry\\AddTime.js":"38","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\TImer\\timer.js":"39","C:\\xampp\\htdocs\\cpsi-ems\\src\\ScreenShot.js":"40","C:\\xampp\\htdocs\\cpsi-ems\\src\\TableAction.js":"41","C:\\xampp\\htdocs\\cpsi-ems\\src\\Config.js":"42","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Permission.js":"43","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\EditUpcomingEvent.js":"44","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Breadcrumb.js":"45","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\ProtectedRoute.js":"46","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Header.js":"47","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\JobPortal\\AddJob.js":"48","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Experience\\AddExperience.js":"49","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\CountdownTimer.js":"50","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\AuthForms\\LoginForm.js":"51","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\HandleUser.js":"52","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Dashboard.js":"53","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Services\\Authapi.js":"54","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\LoadderButton.js":"55","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\EditLeaves.js":"56","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\BirthdateCard.js":"57","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\ShowEvent\\Show.js":"58","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\Upcoming.js":"59","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Qulification\\QulificationList.js":"60","C:\\xampp\\htdocs\\cpsi-ems\\src\\index.js":"61","C:\\xampp\\htdocs\\cpsi-ems\\src\\Pagenotfound.js":"62","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Notification.js":"63"},{"size":25535,"mtime":1655287112741,"results":"64","hashOfConfig":"65"},{"size":362,"mtime":1611727817135,"results":"66","hashOfConfig":"65"},{"size":10171,"mtime":1644312802062,"results":"67","hashOfConfig":"65"},{"size":3835,"mtime":1629887915649,"results":"68","hashOfConfig":"65"},{"size":4456,"mtime":1629974280571,"results":"69","hashOfConfig":"65"},{"size":7119,"mtime":1629889985212,"results":"70","hashOfConfig":"65"},{"size":19249,"mtime":1625641346459,"results":"71","hashOfConfig":"65"},{"size":77394,"mtime":1644395069842,"results":"72","hashOfConfig":"65"},{"size":6694,"mtime":1643105360230,"results":"73","hashOfConfig":"65"},{"size":8822,"mtime":1628689701067,"results":"74","hashOfConfig":"65"},{"size":6573,"mtime":1631797671795,"results":"75","hashOfConfig":"65"},{"size":9817,"mtime":1644489001759,"results":"76","hashOfConfig":"65"},{"size":263,"mtime":1629878882088,"results":"77","hashOfConfig":"65"},{"size":768,"mtime":1625746612390,"results":"78","hashOfConfig":"65"},{"size":801,"mtime":1613474634437,"results":"79","hashOfConfig":"65"},{"size":14482,"mtime":1644495995274,"results":"80","hashOfConfig":"65"},{"size":551,"mtime":1613474572339,"results":"81","hashOfConfig":"65"},{"size":32193,"mtime":1644237419254,"results":"82","hashOfConfig":"65"},{"size":4104,"mtime":1643364008943,"results":"83","hashOfConfig":"65"},{"size":905,"mtime":1613474243458,"results":"84","hashOfConfig":"65"},{"size":20405,"mtime":1616565474214,"results":"85","hashOfConfig":"65"},{"size":10583,"mtime":1650869225747,"results":"86","hashOfConfig":"65"},{"size":15624,"mtime":1640931571036,"results":"87","hashOfConfig":"65"},{"size":18625,"mtime":1629889066106,"results":"88","hashOfConfig":"65"},{"size":4612,"mtime":1626161354527,"results":"89","hashOfConfig":"65"},{"size":6883,"mtime":1629890130387,"results":"90","hashOfConfig":"65"},{"size":4714,"mtime":1643106648210,"results":"91","hashOfConfig":"65"},{"size":37355,"mtime":1632117293319,"results":"92","hashOfConfig":"65"},{"size":825,"mtime":1652964365566,"results":"93","hashOfConfig":"65"},{"size":1904,"mtime":1616153584220,"results":"94","hashOfConfig":"65"},{"size":3176,"mtime":1655717348062,"results":"95","hashOfConfig":"65"},{"size":26832,"mtime":1653462579875,"results":"96","hashOfConfig":"65"},{"size":3604,"mtime":1627039065298,"results":"97","hashOfConfig":"65"},{"size":14877,"mtime":1629889896373,"results":"98","hashOfConfig":"65"},{"size":13583,"mtime":1639650751526,"results":"99","hashOfConfig":"65"},{"size":4548,"mtime":1625555245220,"results":"100","hashOfConfig":"65"},{"size":25192,"mtime":1629193907507,"results":"101","hashOfConfig":"65"},{"size":10563,"mtime":1640941627260,"results":"102","hashOfConfig":"65"},{"size":4010,"mtime":1644838552671,"results":"103","hashOfConfig":"65"},{"size":3689,"mtime":1629983410015,"results":"104","hashOfConfig":"65"},{"size":848,"mtime":1630579407095,"results":"105","hashOfConfig":"65"},{"size":2857,"mtime":1645011885371,"results":"106","hashOfConfig":"65"},{"size":7164,"mtime":1629966751475,"results":"107","hashOfConfig":"65"},{"size":18423,"mtime":1629979727139,"results":"108","hashOfConfig":"65"},{"size":1090,"mtime":1613474707126,"results":"109","hashOfConfig":"65"},{"size":8473,"mtime":1652957273844,"results":"110","hashOfConfig":"65"},{"size":21312,"mtime":1655446326369,"results":"111","hashOfConfig":"65"},{"size":23134,"mtime":1629890099955,"results":"112","hashOfConfig":"65"},{"size":8156,"mtime":1640927166271,"results":"113","hashOfConfig":"65"},{"size":5483,"mtime":1653981623198,"results":"114","hashOfConfig":"65"},{"size":2937,"mtime":1643977606433,"results":"115","hashOfConfig":"65"},{"size":17968,"mtime":1616503023746,"results":"116","hashOfConfig":"65"},{"size":26919,"mtime":1652956534711,"results":"117","hashOfConfig":"65"},{"size":32322,"mtime":1645517779768,"results":"118","hashOfConfig":"65"},{"size":2893,"mtime":1643975424301,"results":"119","hashOfConfig":"65"},{"size":13213,"mtime":1627650538660,"results":"120","hashOfConfig":"65"},{"size":1850,"mtime":1644489431781,"results":"121","hashOfConfig":"65"},{"size":9354,"mtime":1630044710890,"results":"122","hashOfConfig":"65"},{"size":4714,"mtime":1629888096153,"results":"123","hashOfConfig":"65"},{"size":4585,"mtime":1626169688556,"results":"124","hashOfConfig":"65"},{"size":578,"mtime":1615966724258,"results":"125","hashOfConfig":"65"},{"size":707,"mtime":1631253561281,"results":"126","hashOfConfig":"65"},{"size":2765,"mtime":1655717692065,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"131"},"1bcchka",{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"134"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"141"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"149"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"131"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"149"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"134"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"138"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"141"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"131"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"131"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"131"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"134"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"131"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"131"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"156"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"173"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"138"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"149"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"131"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"131"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"160"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"149"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"173"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"131"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"131"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"131"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"173"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"141"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"286"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"131"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"149"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"134"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"160"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"311"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\xampp\\htdocs\\cpsi-ems\\src\\App.js",["314","315"],"/* eslint-disable react/jsx-no-duplicate-props */\n/* eslint-disable no-dupe-class-members */\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport Dashboard from \"./components/Pages/Dashboard\";\nimport Login from \"./components/Pages/Login\";\nimport Pagenotfound from \"./Pagenotfound\";\nimport InitComponent from \"./components/Pages/InitComponent\";\nimport ls from \"local-storage\";\nimport User from \"./components/Pages/Users/Index\";\nimport Permission from \"./components/Pages/Permission\";\nimport AuthApi from \"./components/Services/Authapi\";\nimport Role from \"./components/Pages/Role\";\nimport AddForm from \"./components/Pages/Users/HandleUser\";\nimport green from \"@material-ui/core/colors/green\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport EditUser from \"./components/Pages/Users/EditUser\";\nimport Leaves from \"./components/Pages/Leaves/Leaves1\";\nimport AddLeaves from \"./components/Pages/Leaves/AddLeaves\";\nimport EditLeaves from \"./components/Pages/Leaves/EditLeaves\";\nimport LeavesTicket from \"./components/Pages/LeavesTicket/Ticket\";\nimport AddTickets from \"./components/Pages/LeavesTicket/AddTickets\";\nimport EditTicket from \"./components/Pages/LeavesTicket/EditTicket\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport Profile from \"./components/Pages/Profile/Profile\";\nimport Event from \"./components/Pages/Event/Event\";\nimport AddEvent from \"./components/Pages/Event/AddEvent\";\nimport EditEvent from \"./components/Pages/Event/EditEvent\";\nimport ShowEvent from \"./components/Pages/ShowEvent/Show\";\nimport Upcoming from \"./components/Pages/UpcomingEvent/Upcoming\";\nimport AddUpcomingEvent from \"./components/Pages/UpcomingEvent/AddUpcomingEvent\";\nimport EditUpcomingEvent from \"./components/Pages/UpcomingEvent/EditUpcomingEvent\";\nimport Job from \"./components/Pages/JobPortal/JobList\";\nimport Addjob from \"./components/Pages/JobPortal/AddJob\";\nimport Editjob from \"./components/Pages/JobPortal/EditJob\";\nimport Qulification from \"./components/Pages/Qulification/QulificationList\";\nimport Addqulification from \"./components/Pages/Qulification/AddQulification\";\nimport Editqulification from \"./components/Pages/Qulification/EditQulification\";\nimport Experience from \"./components/Pages/Experience/ExperienceList\";\nimport Addexperience from \"./components/Pages/Experience/AddExperience\";\nimport Editexp from \"./components/Pages/Experience/EditExp\";\nimport Time from \"./components/Pages/TIme Entry/AddTime\";\nimport Check from \"./components/Pages/UserCheck/Check\";\n// import { capture } from \"./ScreenShot\";\nimport Offer from \"./components/Pages/Documents/Offer\";\nimport Latter from \"./components/Pages/Documents/latter\";\nimport Message from \"./components/Pages/Messages/message\";\nimport Header from \"./components/Layouts/Header\";\nimport Timer from \"./components/Pages/TImer/timer\";\nimport swal from \"sweetalert\";\nimport Testing from \"./components/Pages/Testing/testing\";\n// import {workerTimer} from \"./components/Pages/Worker/worker-timer\";\n\nlet idleTime = 0;\nlet tabVisibility;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authToken:\n        ls.get(\"authToken\") &&\n        ls.get(\"authToken\") !== null &&\n        ls.get(\"authToken\") !== false\n          ? ls.get(\"authToken\")\n          : false,\n      roles:\n        ls.get(\"roles\") && ls.get(\"roles\") !== null && ls.get(\"roles\") !== false\n          ? ls.get(\"roles\")\n          : false,\n      user:\n        ls.get(\"user\") && ls.get(\"user\") !== null && ls.get(\"user\") !== false\n          ? ls.get(\"user\")\n          : false,\n      authUser: false,\n      location: document.location.pathname,\n      count: ls.get(\"count\") ? ls.get(\"count\") : 0,\n      timerOn: ls.get(\"timerOn\") ? ls.get(\"timerOn\") : false,\n      startTime: ls.get(\"startTime\") ? ls.get(\"startTime\") : 0,\n      stopTime: ls.get(\"stopTime\") ? ls.get(\"stopTime\") : 0,\n      startTimeStat: false,\n    };\n\n    this.countRef = React.createRef(null);\n    this.setAutUser = this.setAutUser.bind(this);\n    this.updateCounterOnload = this.updateCounterOnload.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    // this.handleOnClick = this.handleOnClick.bind(this);\n  }\n\n  saveStateToLocalStorage() {\n    ls.set(\"startTime\", this.state.startTime);\n    ls.set(\"count\", this.state.count);\n    ls.set(\"timerOn\", this.state.timerOn);\n    ls.set(\"stopTime\", this.state.stopTime);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    // if (this.state.timerOn) {\n    //   this.runCycle()\n    // }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  runCycle() {\n    this.timer = setInterval(async () => {\n      const newCount = this.state.count + parseInt(1);\n      this.setState({ count: newCount >= 0 ? newCount : 0 }, function (param) {\n        // this.updateCounterOnload(newCount);\n      });\n      this.saveStateToLocalStorage();\n    }, 1000);\n\n    // window.addEventListener(\n    //   \"beforeunload\",\n    //   this.saveStateToLocalStorage.bind(this)\n    // );\n  }\n\n  async startTimer() {\n    await AuthApi.inTime();\n    this.setState({ timerOn: true }, function () {\n      this.setState({ startTime: Date.now() - this.state.startTime });\n      this.runCycle();\n    });\n  }\n\n  async stopTimer() {\n    await AuthApi.outTime();\n    this.setState({ timerOn: false }, function () {\n      this.setState({ stopTime: Date.now() });\n      clearInterval(this.timer);\n    });\n    this.saveStateToLocalStorage();\n  }\n\n  updateCounterOnload(count) {\n    this.setState({ count: count });\n\n    // ls.set(this.state.count);\n    // console.log(this.state.count)\n  }\n\n  // updateCounter(count) {\n  //   this.setState({ count: count });\n  //   console.log(this.state.count)\n  // }\n\n  async getAuth() {\n    let checkLogin = await AuthApi.checkAuth();\n    if (checkLogin && checkLogin.status !== false) {\n      this.setAutUser({ authUser: checkLogin.data });\n    } else {\n      ls.set(\"roles\", false);\n      ls.set(\"authToken\", false);\n      ls.set(\"user\", false);\n      this.setAutUser({\n        authUser: false,\n        authToken: false,\n        roles: false,\n        user: false,\n      });\n    }\n  }\n\n  setAutUser(authData) {\n    this.setState(authData);\n  }\n\n  componentDidMount() {\n    if (this.state.timerOn === true) {\n      this.runCycle();\n    }\n  }\n\n  componentWillMount() {\n    this.getAuth();\n  }\n\n  // componentDidMount() {\n  //   if (this.state.user) {\n  //     setInterval(() => { console.log( capture()) }, 1000)\n  //   }\n  // }\n\n  componentDidMount() {\n    let item;\n    let eventKey;\n    const vis = (c) => {\n      let self = this;\n      const browserProps = {\n        hidden: \"visibilitychange\",\n        msHidden: \"msvisibilitychange\",\n        webkitHidden: \"webkitvisibilitychange\",\n        mozHidden: \"mozvisibilitychange\",\n      };\n      for (item in browserProps) {\n        if (item in document) {\n          eventKey = browserProps[item];\n          break;\n        }\n      }\n      if (c) {\n        if (\n          !self._init &&\n          !(typeof document.addEventListener === \"undefined\")\n        ) {\n          document.addEventListener(eventKey, c);\n          self._init = true;\n          c();\n        }\n      }\n      return !document[item];\n    };\n    vis(async () => {\n      tabVisibility = vis() ? \"Visible\" : \"Not visible\";\n      console.log(tabVisibility);\n    });\n\n    setInterval(timerIncrement, 60000);\n    document.addEventListener(\"mousemove\", (e) => {\n      idleTime = 0;\n    });\n\n    document.addEventListener(\"keyPress\", (e) => {\n      idleTime = 0;\n    });\n\n    async function timerIncrement() {\n      idleTime = idleTime + 1;\n      if (tabVisibility === \"Visible\") {\n        if (idleTime > 1) {\n          // 20 minutes\n          console.log(\"v\");\n          await AuthApi.logout();\n          window.location.reload();\n        }\n      } else if (tabVisibility === \"Not visible\") {\n        if (idleTime > 1) {\n          // 20 minutes\n          console.log(\"nv\");\n          await AuthApi.logout();\n          window.location.reload();\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    // window.onbeforeunload = async function (e) {\n    // e.preventDefault();\n    if (\n      (window.performance.navigation &&\n        window.performance.navigation.type === 1) ||\n      window.performance\n        .getEntriesByType(\"navigation\")\n        .map((nav) => nav.type)\n        .includes(\"reload\")\n    ) {\n    } else {\n      AuthApi.logout();\n      this.getAuth();\n      // window.location.reload();\n      return true;\n    }\n    // };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route\n              exact\n              path=\"/dashboard\"\n              render={(props) => (\n                <Dashboard\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  roles={this.state.roles}\n                  user={this.state.user}\n                  setAutUser={this.setAutUser}\n                  count={this.state.count}\n                  timerOn={this.state.timerOn}\n                  // updateCounter={this.updateCounter}\n                  updateCounterOnload={this.updateCounterOnload}\n                  startTimer={this.startTimer}\n                  stopTimer={this.stopTimer}\n                  startTime={this.state.startTime}\n                  stopTime={this.state.stopTime}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/dashboard\"\n              render={(props) => (\n                <Header\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  roles={this.state.roles}\n                  user={this.state.user}\n                  setAutUser={this.setAutUser}\n                  count={this.state.count}\n                  timerOn={this.state.timerOn}\n                  // updateCounter={this.updateCounter}\n                  updateCounterOnload={this.updateCounterOnload}\n                  startTimer={this.startTimer}\n                  stopTimer={this.stopTimer}\n                  startTime={this.state.startTime}\n                  stopTime={this.state.stopTime}\n                />\n              )}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/permission\"\n              component={Permission}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/role\"\n              component={Role}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/users\"\n              component={User}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/users/add\"\n              component={AddForm}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/users/edit/:id\"\n              component={EditUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/leaves\"\n              component={Leaves}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/leaves/add\"\n              component={AddLeaves}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/leaves/edit/:id\"\n              component={EditLeaves}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/tickets\"\n              component={LeavesTicket}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/tickets/add\"\n              component={AddTickets}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/tickets/edit/:id\"\n              component={EditTicket}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/profile\"\n              component={Profile}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/event\"\n              component={Event}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/event/add\"\n              component={AddEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/event/edit/:id\"\n              component={EditEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/show/:id\"\n              component={ShowEvent}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/upcoming\"\n              component={Upcoming}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/upcoming/add\"\n              component={AddUpcomingEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/upcoming/edit/:id\"\n              component={EditUpcomingEvent}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/job\"\n              component={Job}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/job/add\"\n              component={Addjob}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/job/edit/:id\"\n              component={Editjob}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/qulification\"\n              component={Qulification}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/qulification/add\"\n              component={Addqulification}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/qulification/edit/:id\"\n              component={Editqulification}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/experience\"\n              component={Experience}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/experience/add\"\n              component={Addexperience}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/experience/edit/:id\"\n              component={Editexp}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/time\"\n              component={Time}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/check\"\n              component={Check}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/offer\"\n              component={Offer}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/latter\"\n              component={Latter}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/message\"\n              component={Message}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/timer\"\n              component={Timer}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n\n            <ProtectedRoute\n              {...this.props}\n              exact\n              path=\"/testing\"\n              component={Testing}\n              authUser={this.state.authUser}\n              authToken={this.state.authToken}\n              setAutUser={this.setAutUser}\n            />\n\n            {/* {ls('roles') === 'Super Admin' ?\n              <Route exact path='/permission' render={(props) => (\n                <Permission\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            {ls('roles') === 'Super Admin' ?\n              <Route exact path='/role' render={(props) => (\n                <Role\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            {ls('roles') === 'Super Admin' ?\n              <Route exact path='/users' render={(props) => (\n                <User\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            <Route exact path='/users/add' render={(props) => (\n              <AddForm\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} /> */}\n            {/* <Route exact path='/users/edit/:id' render={(props) => (\n              <EditUser\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} /> */}\n            {/*{ls('roles') === 'Super Admin' ?\n              <Route exact path='/leaves' render={(props) => (\n                <Leaves\n                  {...props}\n                  authUser={this.state.authUser}\n                  authToken={this.state.authToken}\n                  setAutUser={this.setAutUser} />\n              )} /> : null}\n            <Route exact path='/leaves/add' render={(props) => (\n              <AddLeaves\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/leaves/edit/:id' render={(props) => (\n              <EditLeaves\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/tickets' render={(props) => (\n              <LeavesTicket\n                {...props}\n                authUser={this.state.authUser}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/tickets/add' render={(props) => (\n              <AddTickets\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} />\n            <Route exact path='/tickets/edit/:id' render={(props) => (\n              <EditTicket\n                {...props}\n                authToken={this.state.authToken}\n                setAutUser={this.setAutUser} />\n            )} /> */}\n\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <InitComponent\n                  {...props}\n                  authUser={this.state.authUser}\n                  setAutUser={this.setAutUser}\n                  authToken={this.state.authToken}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/login\"\n              render={(props) => (\n                <Login\n                  {...props}\n                  authUser={this.state.authUser}\n                  setAutUser={this.setAutUser}\n                  authToken={this.state.authToken}\n                />\n              )}\n            />\n\n            <Route path=\"*\" exact={true} component={Pagenotfound} />\n          </Switch>\n        </Router>\n\n        <div className=\"timer\">\n          {this.state.authToken === false ? \"\" : <Timer />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default function CustomStyles() {\n  return (\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  );\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#1B6E95\",\n      light: \"#1b6e9582\",\n      dark: \"#1B6E95\",\n    },\n    secondary: {\n      main: green[500],\n      light: green[100],\n      dark: green[900],\n      contrastText: green[600],\n    },\n  },\n  typography: {\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    subtitle1: {\n      fontSize: 12,\n    },\n    body1: {\n      fontWeight: 500,\n    },\n    button: {\n      fontStyle: \"italic\",\n    },\n    h2: {\n      fontSize: \"1.2rem\",\n      \"@media (min-width:600px)\": {\n        fontSize: \"1.5rem\",\n      },\n      float: \"left\",\n      padding: \"1%\",\n      marginTop: \"5px\",\n      fontWeight: \"500\",\n      color: \"#1B6E95\",\n    },\n  },\n});\n",["316","317"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\reportWebVitals.js",[],["318","319"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Role.js",["320","321","322","323","324","325","326","327","328"],"import React, { Component } from \"react\";\r\nimport Header from \"../Layouts/Header\";\r\nimport Footer from \"../Layouts/Footer\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport AuthApi from \"../Services/Authapi\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport swal from \"sweetalert\";\r\nimport TableComponent from \"../Layouts/TableComponent\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Breadcrumb from \"../Layouts/Breadcrumb\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport DropdownComponent from \"../Layouts/DropdownComponent\";\r\nimport PageLoader from \"../Layouts/PageLoader\";\r\n\r\nclass Role extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      role: false,\r\n      count: 0,\r\n      pageStatus: false,\r\n      setopen: false,\r\n      roleName: false,\r\n      permission: false,\r\n      isPopup: false,\r\n      checkbox: [],\r\n      tableTh: [\r\n        {\r\n          id: \"name\",\r\n          numeric: false,\r\n          disablePadding: true,\r\n          label: \"Name\",\r\n          sortable: true,\r\n        },\r\n        {\r\n          id: \"created_at\",\r\n          numeric: false,\r\n          disablePadding: true,\r\n          label: \"Created On\",\r\n          sortable: true,\r\n        },\r\n        {\r\n          id: \"actions\",\r\n          numeric: false,\r\n          disablePadding: true,\r\n          label: \"Actions\",\r\n          sortable: false,\r\n        },\r\n      ],\r\n    };\r\n    this.roleData = this.roleData.bind(this);\r\n    this.handleClickOpen = this.handleClickOpen.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.updatChange = this.updatChange.bind(this);\r\n    this.saveData = this.saveData.bind(this);\r\n    this.removeRole = this.removeRole.bind(this);\r\n    this.updateCheckbox = this.updateCheckbox.bind(this);\r\n    this.handleClickOpenUpdateRole = this.handleClickOpenUpdateRole.bind(this);\r\n    this.updateRoleee = this.updateRoleee.bind(this);\r\n  }\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push(\"/login\");\r\n    }\r\n    this.roleData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push(\"/login\");\r\n    }\r\n  }\r\n\r\n  roleData = async (e) => {\r\n    let role = await AuthApi.getRole();\r\n    console.log(role);\r\n    this.setState({\r\n      role: role.data,\r\n      count: role.data.length,\r\n    });\r\n  };\r\n\r\n  async handleClickOpen(row = false) {\r\n    let permission = await AuthApi.getPermission();\r\n    this.setState({\r\n      permission: permission.data,\r\n    });\r\n    this.setState({\r\n      setopen: true,\r\n      isPopup: true,\r\n      roleName: row.name,\r\n    });\r\n  }\r\n\r\n  async updateRoleee(id) {\r\n    let upte = await AuthApi.updateRole(\r\n      this.state.roleName,\r\n      this.state.checkBox,\r\n      id\r\n    );\r\n    if (upte && upte.status === true) {\r\n      this.setState({ setopen: false }, function () {\r\n        this.roleData();\r\n      });\r\n    }\r\n  }\r\n\r\n  async handleClickOpenUpdateRole(row = false) {\r\n    let permission = await AuthApi.getPermission();\r\n    this.setState({\r\n      permission: permission.data,\r\n    });\r\n    if (Object.keys(row.permissions).length > 0) {\r\n      let permissions = [];\r\n      Object.keys(row.permissions).forEach((key) => {\r\n        permissions.push(row.permissions[key].name);\r\n      });\r\n      this.setState({ rolePermission: permissions });\r\n    }\r\n    await this.setState({\r\n      setopen: true,\r\n      isPopup: false,\r\n      roleName: row.name,\r\n      roleId: row.id,\r\n    });\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      setopen: false,\r\n      rolePermission: [],\r\n    });\r\n  }\r\n\r\n  async saveData() {\r\n    if (this.state.isPopup) {\r\n      let currentRole = await AuthApi.createRole(\r\n        this.state.roleName,\r\n        this.state.checkBox\r\n      );\r\n      if (currentRole && currentRole.status === true) {\r\n        this.setState({ setopen: false }, function () {\r\n          this.roleData();\r\n        });\r\n      } else {\r\n        // axios popup result\r\n      }\r\n    } else {\r\n      this.updateRoleee(this.state.roleId);\r\n    }\r\n  }\r\n\r\n  async removeRole(id) {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Cancel\", \"Yes\"],\r\n    }).then(async (confirm) => {\r\n      if (confirm) {\r\n        let currentRole = await AuthApi.deleteRole(id);\r\n        if (currentRole && currentRole.status === true) {\r\n          this.setState({\r\n            pageStatus: true,\r\n          });\r\n          this.roleData();\r\n          setTimeout(() => this.setState({ pageStatus: false }), 500);\r\n        } else {\r\n        }\r\n      }\r\n      // console.log(this.props.page);\r\n    });\r\n  }\r\n\r\n  updatChange(e) {\r\n    this.setState({ roleName: e.target.value });\r\n  }\r\n\r\n  updateCheckbox(value) {\r\n    this.setState({ checkBox: value });\r\n  }\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: \"3%\" }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"Roles\"\r\n                    primaryPageLink=\"/role\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\"\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.role}\r\n                tableCount={this.state.count}\r\n                tablePage={this.state.page}\r\n                tablePagestatus={this.state.pageStatus}\r\n                colNameToShow={[\"name\", \"created_at\"]}\r\n                openPopUp={this.handleClickOpen}\r\n                openPopUpUpdate={this.handleClickOpenUpdateRole}\r\n                removeRow={this.removeRole}\r\n                actionBtns={[\"update\", \"delete\"]}\r\n                modelName={\"Role\"}\r\n              />\r\n            </div>\r\n          }\r\n        />\r\n        <Footer />\r\n        <PopUp\r\n          isPopup={this.state.isPopup}\r\n          {...this.props}\r\n          handleClose={this.handleClose}\r\n          setopen={this.state.setopen}\r\n          roleName={this.state.roleName}\r\n          saveData={this.saveData}\r\n          updatChange={this.updatChange}\r\n          permission={this.state.permission}\r\n          inputHandleChange={this.inputHandleChange}\r\n          checkbox={this.state.checkbox}\r\n          updateCheckbox={this.updateCheckbox}\r\n          updateRoleee={this.updateRoleee}\r\n          rolePermission={this.state.rolePermission}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Role;\r\n\r\nclass PopUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      permission: false,\r\n      value: true,\r\n      loading: true,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(value) {\r\n    this.props.updateCheckbox(value);\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    if (\r\n      typeof this.props.rolePermission !== \"undefined\" &&\r\n      Object.keys(this.props.rolePermission).length > 0\r\n    ) {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (\r\n      typeof props.rolePermission !== \"undefined\" &&\r\n      Object.keys(props.rolePermission).length > 0\r\n    ) {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let error = this.props.roleName == undefined;\r\n    return (\r\n      <div>\r\n        <Dialog open={this.props.setopen}>\r\n          <DialogTitle>\r\n            {this.props.isPopup ? \"Add Role\" : \" Update Role\"}\r\n          </DialogTitle>\r\n          {/* {\r\n            this.state.loading === true\r\n              ?\r\n              <PageLoader />\r\n              : */}\r\n          <div>\r\n            <DialogContent>\r\n              {/* <DialogContentText> */}\r\n              <TextField\r\n                autoFocus\r\n                helperText={error ? \"Cannot be blank \" : \"Perfect!\"}\r\n                error={error}\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                type=\"text\"\r\n                value={\r\n                  this.props.roleName && this.props.roleName !== false\r\n                    ? this.props.roleName\r\n                    : \"\"\r\n                }\r\n                onChange={(e) => {\r\n                  this.props.updatChange(e);\r\n                }}\r\n              />\r\n              {/* </DialogContentText> */}\r\n            </DialogContent>\r\n\r\n            <DialogContent>\r\n              <DropdownComponent\r\n                inputValue={this.props.rolePermission}\r\n                inputOptions={this.props.permission}\r\n                inputName=\"Permission\"\r\n                inputTypeMultiple={true}\r\n                handleChange={this.handleChange}\r\n              />\r\n            </DialogContent>\r\n          </div>\r\n          {/* } */}\r\n          <DialogActions>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={(e) => {\r\n                this.props.saveData();\r\n              }}\r\n            >\r\n              Save\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.props.handleClose();\r\n              }}\r\n              color=\"primary\"\r\n            >\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",["329","330"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\Leaves1.js",[],["331","332"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\Ticket.js",["333"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header'\r\nimport Footer from '../../Layouts/Footer';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport TableComponent from '../../Layouts/TableComponent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport swal from 'sweetalert';\r\n\r\nclass Ticket extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tickets: [],\r\n      count:0,\r\n      tableTh: [\r\n        { id: 'user_name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n        { id: 'leaveType', numeric: false, disablePadding: true, label: 'LeaveType', sortable: true },\r\n        { id: 'date_range', numeric: false, disablePadding: true, label: 'Date Range', sortable: true },\r\n        { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n        { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n      ]\r\n    }\r\n      this.ticketsData = this.ticketsData.bind(this);\r\n    //  this.removeLeaves = this.removeLeaves.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n    this.ticketsData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n \r\n\r\n    ticketsData = async (e) => {\r\n      let tickets = await AuthApi.getTickets();\r\n      // console.log(tickets.data);\r\n    \r\n\r\n\r\n      if(tickets && tickets.status === true) {\r\n        const newarr = []\r\n        const ticketsData = tickets.data\r\n        ticketsData.forEach((element,key) => {\r\n          console.log(element.date_range[0])\r\n          const tempData = {\r\n            'id': element.id,\r\n            'name':element.has_user.name,\r\n            'leaveType':element.leaveType, \r\n            'date_range':element.date_range[0] + \"  To  \" + element.date_range[1], \r\n            'created_at': element.created_at\r\n          }\r\n          // console.log(key)\r\n          //  console.log(tempName)\r\n          //  tickets.data[key] = tempName; \r\n          // Array.prototype.push.apply(ticketsData[key], tempName)\r\n         \r\n          newarr.push(tempData)\r\n        });\r\n        \r\n\r\n        this.setState({\r\n          tickets : newarr,\r\n          count: tickets.data.length,\r\n        })\r\n      }\r\n     \r\n    }\r\n\r\n\r\n    // async removeLeaves(id){\r\n    //   swal({\r\n    //         title: \"Are you sure?\",\r\n    //         icon: \"warning\",\r\n    //         buttons: [\"Cancel\", \"Yes\"]\r\n    //       }).then(async (confirm) => {\r\n    //         if (confirm) {\r\n    //           let currentLeave = await AuthApi.leaveDelete(id);\r\n    //           if (currentLeave && currentLeave.status === true) {\r\n    //             this.leaveData();\r\n    //           } else {\r\n    //           }\r\n    //         }\r\n    //       });\r\n    // }\r\n\r\n   \r\n\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"LeavesTicket\"\r\n                    primaryPageLink=\"/tickets\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.tickets}\r\n                tableCount={this.state.count}\r\n                colNameToShow={[ 'name', 'leaveType', 'date_range', 'created_at']}\r\n                openPopUp={false}\r\n                removeRow={this.removeLeaves}\r\n                actionBtns={['update']}\r\n                modelName={'Leaves Tickets'}\r\n                addRoute={'/tickets/add'}\r\n                updateRoute={'/tickets/edit'}\r\n                openPopUpUpdate={false}\r\n              /></div>\r\n          } />\r\n        <Footer {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Ticket;",["334","335"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\Event.js",["336","337","338"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header'\r\nimport Footer from '../../Layouts/Footer';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport TableComponent from '../../Layouts/TableComponent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport swal from 'sweetalert';\r\nimport ls from \"local-storage\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\n\r\nclass Event extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            event: [],\r\n            count: 0,\r\n            pageStatus: false,\r\n            tableTh: [\r\n                { id: 'name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n                { id: 'date', numeric: false, disablePadding: true, label: 'Date', sortable: true },\r\n                { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n                { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n            ]\r\n        }\r\n        this.eventData = this.eventData.bind(this);\r\n        this.removeEvent = this.removeEvent.bind(this);\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props && this.props.authToken === false) {\r\n            this.props.history.push('/login');\r\n        }\r\n        this.eventData();\r\n    }\r\n\r\n    // componentWillReceiveProps(props) {\r\n    //     if (props && props.authToken === false) {\r\n    //         props.history.push('/login');\r\n    //     }\r\n    // }\r\n\r\n    eventData = async (e) => {\r\n        let get = new Date();\r\n        let Select = get.getMonth() + 1;\r\n        let year = get.getFullYear();\r\n        let event = await AuthApi.getEvent(Select, year);\r\n\r\n\r\n        if (event && event.status === true) {\r\n            this.setState({\r\n                event: event.data,\r\n                count: event.data.length\r\n            })\r\n        }\r\n    }\r\n\r\n    handleMonthChange = async (e) => {\r\n        let select = e.target.value;\r\n        let get = new Date(select);\r\n        let month = get.getMonth() + 1;\r\n        let year = get.getFullYear();\r\n        let event = await AuthApi.getEvent(month, year);\r\n\r\n\r\n        if (event && event.status === true) {\r\n            this.setState({\r\n                event: event.data,\r\n                count: event.data.length\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    async removeEvent(id) {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            icon: \"warning\",\r\n            buttons: [\"Cancel\", \"Yes\"]\r\n        }).then(async (confirm) => {\r\n            if (confirm) {\r\n                let currentEvent = await AuthApi.eventDelete(id);\r\n                if (currentEvent && currentEvent.status === true) {\r\n                    this.setState({\r\n                        pageStatus: true\r\n                    })\r\n                    this.eventData();\r\n                    setTimeout(\r\n                        () => this.setState({ pageStatus: false }),\r\n                        500\r\n                    );\r\n                } else {\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // ds() {\r\n    //     return <div style={{ display: 'none' }}> </div>\r\n    // }\r\n\r\n    render() {\r\n        const classes = this.props;\r\n        var month = new Array();\r\n        month[0] = \"01\";\r\n        month[1] = \"02\";\r\n        month[2] = \"03\";\r\n        month[3] = \"04\";\r\n        month[4] = \"05\";\r\n        month[5] = \"06\";\r\n        month[6] = \"07\";\r\n        month[7] = \"08\";\r\n        month[8] = \"09\";\r\n        month[9] = \"10\";\r\n        month[10] = \"11\";\r\n        month[11] = \"12\";\r\n\r\n        var d = new Date();\r\n        var dateString = d.getFullYear() + '-' + (month[d.getMonth()])\r\n\r\n        return (\r\n            <div>\r\n                <Header\r\n                    {...this.props}\r\n                    authUser={this.props.authUser}\r\n                    setAutUser={this.props.setAutUser}\r\n                    component={\r\n                        <div>\r\n                            <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                                <CardContent>\r\n                                    <Breadcrumb\r\n                                        {...this.props}\r\n                                        primaryPageName=\"Event\"\r\n                                        primaryPageLink=\"/event\"\r\n                                        isSecondaryPage={false}\r\n                                        secondaryPageName=\"\" />\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Grid container style={{ top: '20px', paddingBottom: '10px', float: 'left' }}>\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    label=\"Select Month/Year\"\r\n                                    views={[\"year\", \"month\"]}\r\n                                    variant=\"outlined\"\r\n                                    // format=\"yyyy/mm\"                          \r\n                                    defaultValue={dateString}\r\n                                    type=\"Month\"\r\n                                    // openTo=\"month\"\r\n                                    // value={this.state.selectedDate}\r\n                                    onChange={this.handleMonthChange}\r\n                                    className={classes.textField}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    inputProps={{ min: \"2020-01\", max: dateString }}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <TableComponent\r\n                                {...this.props}\r\n                                tableTh={this.state.tableTh}\r\n                                tableData={this.state.event}\r\n                                tableCount={this.state.count}\r\n                                tablePagestatus={this.state.pageStatus}\r\n                                colNameToShow={['name', 'date', 'created_at']}\r\n                                openPopUp={false}\r\n                                removeRow={this.removeEvent}\r\n                                actionBtns={ls('roles') === 'Super Admin' ||  ls('roles') === 'Admin' ? ['update', 'delete'] : ['show']}\r\n                                modelName={'Events'}\r\n                                addRoute={'/event/add'}\r\n                                updateRoute={'/event/edit'}\r\n                                openPopUpUpdate={false}\r\n                            /></div>\r\n                    } />\r\n                <Footer {...this.props} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Event;",["339","340"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\EditTicket.js",["341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\n\r\n\r\nconst inileaves = {\r\n    leaveType: \"\",\r\n    ticketMesasge: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    leaveStatus: \"\",\r\n    ticket_Id: 0,\r\n}\r\n\r\n\r\n\r\nconst EditTicket = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(inileaves);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        // console.log(editValues);\r\n    }\r\n\r\n\r\n    // function dateDiffInDays(startDate, endDate) {\r\n    //     // round to the nearest whole number\r\n    //     return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    // }\r\n    // const daysDiff = dateDiffInDays(new Date(editValues.startDate), new Date(editValues.endDate));\r\n    // const dsp = dateDiffInDays(new Date(), new Date(editValues.startDate));\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n        // if (!values.leaveType) {\r\n        //     errors.leaveType = \"Cannot be blank\";\r\n        // } else if (!regex.test(values.leaveType)) {\r\n        //     errors.leaveType = \"Invalid firstName format\";\r\n        // }\r\n\r\n\r\n        // if (!values.ticketMesasge) {\r\n        //     errors.ticketMesasge = \"Cannot be blank\";\r\n        // } else if (!regex.test(values.ticketMesasge)) {\r\n        //     errors.ticketMesasge = \"Invalid ticketMesasge format\";\r\n        // }\r\n\r\n        // if (!values.startDate) {\r\n        //     errors.startDate = \"Cannot be  blank\";\r\n        // } else if (!dateR.test(values.startDate)) {\r\n        //     errors.startDate = \"Invalid dob format\"\r\n        // }\r\n        // else {\r\n\r\n\r\n        //     if (dsp < 0) {\r\n        //         errors.startDate = \"you can chooes only Current and future Date\";\r\n\r\n        //     }\r\n        // }\r\n\r\n        // if (!values.endDate) {\r\n        //     errors.endDate = \"Cannot be  blank\";\r\n        // } else if (!dateR.test(values.endDate)) {\r\n        //     errors.endDate = \"Invalid dob format\"\r\n        // } else {\r\n\r\n\r\n        //     if (daysDiff < 0) {\r\n        //         errors.endDate = \"you can chooes only Current and future Date\";\r\n\r\n        //     }\r\n        // }\r\n\r\n        if (!values.leaveStatus) {\r\n            errors.leaveStatus = \"Cannot be blank\";\r\n        } else if (!regex.test(values.leaveStatus)) {\r\n            errors.leaveStatus = \"Invalid firstName format\";\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const getTicketData = async () => {\r\n        let ticketId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let ticket = await AuthApi.singleTicket(ticketId);\r\n        let ticket_Id = ticketId\r\n\r\n        let leaveType = (ticket.status === true && ticket.data[0] && ticket.data[0].leaveType && (ticket.data[0].leaveType !== null || ticket.data[0].leaveType !== false)) ? ticket.data[0].leaveType : null;\r\n        let ticketMesasge = (ticket.status === true && ticket.data[0] && ticket.data[0].ticket_mesasge) ? ticket.data[0].ticket_mesasge : null;\r\n        let dateRangeArr = (ticket.status === true && ticket.data[0] && ticket.data[0].date_range) ? ticket.data[0].date_range : null;\r\n        let Status = (ticket.status === true && ticket.data[0] && ticket.data[0].status) ? ticket.data[0].status : null;\r\n\r\n        setEditValues({\r\n            leaveType: leaveType,\r\n            ticketMesasge: ticketMesasge,\r\n            startDate: dateRangeArr[0],\r\n            endDate: dateRangeArr[1],\r\n            leaveStatus: Status,\r\n            ticket_Id: ticket_Id,\r\n        });\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getTicketData(),\r\n                500), []);\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await editTickets();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    // function  diffday() {\r\n    //     const a = moment(editValues.startDate);\r\n    //     const b = moment(editValues.endDate);\r\n    //     const dateRangeArr = [];\r\n\r\n\r\n    //         var startDate = editValues.startDate; \r\n    //         dateRangeArr.push(startDate);\r\n\r\n    //         var endDate = editValues.endDate; \r\n    //         dateRangeArr.push(endDate);\r\n\r\n\r\n    //     editValues.dateRange = dateRangeArr;\r\n    //     editValues.noOfDays = b.diff(a, 'days')\r\n\r\n    // }\r\n\r\n    const editTickets = async (id) => {\r\n        let status = await AuthApi.updateTicket(editValues, editValues.ticket_Id);\r\n        if (status && status.status === true) {\r\n            props.history.push('/tickets');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"LeavesTicket\"\r\n                                    primaryPageLink=\"/tickets\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit Ticket</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} disabled >\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Leave-Type</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            label=\"leave-Type\"\r\n                                                            name=\"leaveType\"\r\n                                                            // error = {formErrors.leaveType && true}\r\n                                                            value={(editValues && editValues.leaveType !== null) ? editValues.leaveType : \"\"}\r\n                                                            // focused={(editValues && editValues.leaveType !== null) ? true : false}\r\n                                                            className={formErrors.leaveType && \"input-error\"}\r\n                                                        >\r\n\r\n                                                            <MenuItem value=\"full-leave\">Full leave</MenuItem>\r\n                                                            <MenuItem value=\"half-leave\">Half leave</MenuItem>\r\n                                                            <MenuItem value=\"sick-leave\">Sick leave</MenuItem>\r\n                                                            <MenuItem value=\"early-leave\">Early leave</MenuItem>\r\n\r\n\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {/* {formErrors.leaveType && (\r\n                                                            <span className=\"error\">{formErrors.leaveType}</span>\r\n                                                        )} */}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        // error={formErrors.startDate && true}\r\n                                                        value={(editValues && editValues.startDate !== null) ? editValues.startDate : null}\r\n                                                        // focused={(editValues && editValues.startDate !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                    {/* {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )} */}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        // error={formErrors.endDate && true}\r\n                                                        value={(editValues && editValues.endDate !== null) ? editValues.endDate : null}\r\n                                                        // focused={(editValues && editValues.endDate !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {/* {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )} */}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={7}>\r\n                                                    <TextField\r\n                                                        disabled\r\n                                                        fullWidth\r\n                                                        multiline\r\n                                                        rows={4}\r\n                                                        id=\"ticketMesasge\"\r\n                                                        name=\"ticketMesasge\"\r\n                                                        label=\"Reason for leave\"\r\n                                                        variant=\"outlined\"\r\n                                                        // defaultValue\r\n                                                        // error={formErrors.ticketMesasge && true}\r\n                                                        value={(editValues && editValues.ticketMesasge !== null) ? editValues.ticketMesasge : null}\r\n                                                        // focused={(editValues && editValues.ticketMesasge !== null) ? true : false}\r\n                                                        // onChange={handleChange}\r\n                                                        className={formErrors.ticketMesasge && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {/* {formErrors.ticketMesasge && (\r\n                                                        <span className=\"error\">{formErrors.ticketMesasge}</span>\r\n                                                    )} */}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={3}>\r\n\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} disabled={ls('roles') === 'Super Admin' ? false : true}>\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label1\">Leave-Status</InputLabel>\r\n                                                        <Select\r\n                                                            autoFocus\r\n                                                            labelId=\"demo-simple-select-outlined-label1\"\r\n                                                            id=\"demo-simple-select-outlined1\"\r\n                                                            label=\"leave-status\"\r\n                                                            name=\"leaveStatus\"\r\n                                                            error={formErrors.leaveStatus && true}\r\n                                                            value={(editValues && editValues.leaveStatus !== null) ? editValues.leaveStatus : \"\"}\r\n                                                            // focused={(editValues && editValues.leaveStatus !== null) ? true : false}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.leaveStatus && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"pending\">Pending</MenuItem>\r\n                                                            <MenuItem value=\"approved\">Approved</MenuItem>\r\n                                                            <MenuItem value=\"declined\">Declined</MenuItem>\r\n                                                            <MenuItem value=\"canceled\">Canceled</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.leaveStatus && (\r\n                                                        <span className=\"error\">{formErrors.leaveStatus}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Edit</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTicket;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Profile\\Profile.js",["358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Header from \"../../Layouts/Header\";\r\nimport Footer from \"../../Layouts/Footer\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Breadcrumb from \"../../Layouts/Breadcrumb\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LoadderButton from \"../../Layouts/LoadderButton\";\r\nimport AuthApi from \"../../Services/Authapi\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FontAwesomeIconComponent from \"../../Layouts/FontAwesomeIconComponent\";\r\nimport { SignalCellularNull } from \"@material-ui/icons\";\r\nimport Authapi from \"../../Services/Authapi\";\r\nimport swal from \"sweetalert\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { months, now } from \"moment\";\r\nimport moment from \"moment\";\r\nimport ls from \"local-storage\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { Pdfdownload } from \"../../../TableAction\";\r\nimport { isEmptyArray } from \"formik\";\r\nimport jsPDF from \"jspdf\";\r\nimport pdfMake from \"pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport htmlToPdfmake from \"html-to-pdfmake\";\r\nimport Logo from \"../../../Images/logo.png\";\r\n\r\nlet length;\r\n\r\nlet ds;\r\n\r\nconst columns = [\r\n  { id: \"BasicSalary\", label: \"BasicSalary\", minWidth: 170 },\r\n  { id: \"DA\", label: \"DA\", minWidth: 100 },\r\n  { id: \"HRA\", label: \"HRA\", minWidth: 170, align: \"right\" },\r\n  { id: \"CA\", label: \"CA\", minWidth: 170, align: \"right\" },\r\n  { id: \"Tax\", label: \"Tax\", minWidth: 170, align: \"right\" },\r\n  { id: \"netSalary\", label: \"NetSalary\", minWidth: 170, align: \"right\" },\r\n  { label: \"Actions\", buttons: [Pdfdownload] },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: 500,\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  content: {\r\n    flex: \"1 0 auto\",\r\n  },\r\n  cover: {\r\n    width: 151,\r\n  },\r\n  controls: {\r\n    display: \"flex\",\r\n    alignItems: \"left\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  playIcon: {\r\n    height: 38,\r\n    width: 38,\r\n  },\r\n  hr: {\r\n    borderTop: \"3px solid #1B6E95\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  spacing: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(2),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst iniuser = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  gender: \"\",\r\n  dob: \"\",\r\n  photo: \"\",\r\n  qualification: \"\",\r\n  last_organization: \"\",\r\n  uploadedImgName: \"\",\r\n  roleName: \"\",\r\n  user: false,\r\n  user_id: 0,\r\n};\r\n\r\nconst iniSalary = {\r\n  salary: \"\",\r\n};\r\n\r\nconst DataForSal = {\r\n  getData: [],\r\n};\r\n\r\nlet inipdf = [];\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst Profile = (props) => {\r\n  const classes = props;\r\n  const classes1 = useStyles();\r\n  const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n  const [editValues, setEditValues] = useState(iniuser);\r\n  const [shown, setShown] = useState(false);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [sal, setSal] = useState(iniSalary);\r\n  const [data, setData] = useState(DataForSal);\r\n  const [click, setClick] = useState(false);\r\n\r\n  const handleChangePage1 = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage1 = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n  const handleChange1 = (e) => {\r\n    const { name, value } = e.target;\r\n    // console.log(value);\r\n    setEditValues({ ...editValues, [name]: value });\r\n  };\r\n\r\n  // const handleSalary = (e) => {\r\n  //     const { name, value } = e.target;\r\n  //     setSal({ ...sal, [name]: value });\r\n  //     console.log(sal.salary)\r\n  // }\r\n\r\n  // const addSalary1 = async () => {\r\n  //     let userId = ls('user').id\r\n  //     console.log(userId)\r\n  //     const gh = await AuthApi.addSalary(sal, userId);\r\n  //     if (gh && gh.status === true) {\r\n  //         console.log(\"ds\")\r\n  //         props.history.push(\"/dashboard\")\r\n  //     }\r\n  // }\r\n\r\n  // const AllSalaryData = async (e) => {\r\n  //     const select = e.target.value\r\n  //     console.log(select)\r\n  //     // let today = new Date(select);\r\n  //     // let month = today.getMonth() + 1;\r\n  //     // let year = today.getFullYear();\r\n  //     // console.log(month)\r\n  //     // const AllData = await AuthApi.getAllSalaryData(month, year);\r\n  //     // console.log(AllData)\r\n\r\n  //     // // length = AllData.data.length\r\n  //     // if (AllData && AllData.status === true) {\r\n  //     //     setData({\r\n  //     //         ...data,\r\n  //     //         getData: AllData.data\r\n  //     //     })\r\n\r\n  //     //     console.log(data)\r\n  //     // }\r\n\r\n  // }\r\n  // useEffect(\r\n  //     () =>\r\n  //         setTimeout(\r\n  //             () => AllSalaryData(),\r\n  //             10), []);\r\n\r\n  function createData(BasicSalary, DA, HRA, CA, Tax, netSalary) {\r\n    return { BasicSalary, DA, HRA, CA, Tax, netSalary };\r\n  }\r\n\r\n  ds = [data.getData];\r\n\r\n  const rows = [];\r\n\r\n  if (ds[0].length !== 0) {\r\n    ds[0].forEach((element1) => {\r\n      rows.push(\r\n        createData(\r\n          element1.BasicSalary,\r\n          element1.DA,\r\n          element1.HRA,\r\n          element1.CA,\r\n          element1.Tax,\r\n          element1.netSalary\r\n        )\r\n      );\r\n    });\r\n  } else {\r\n    rows.push(createData(\"Data Not Found\"));\r\n  }\r\n\r\n  const getFormData = async () => {\r\n    let userId = ls(\"user\").id;\r\n    let user = await AuthApi.singleUser(userId);\r\n    // console.log(user)\r\n    // editUser = editValues;\r\n\r\n    let user_id = userId;\r\n    let firstName =\r\n      user.status === true &&\r\n      user.data &&\r\n      user.data.firstName &&\r\n      (user.data.firstName !== null || user.data.firstName !== false)\r\n        ? user.data.firstName\r\n        : null;\r\n    let lastName =\r\n      user.status === true && user.data && user.data.lastName\r\n        ? user.data.lastName\r\n        : null;\r\n    let email =\r\n      user.status === true && user.data && user.data.email\r\n        ? user.data.email\r\n        : null;\r\n    let gender =\r\n      user.status === true && user.data && user.data.gender\r\n        ? user.data.gender\r\n        : null;\r\n    let dob =\r\n      user.status === true && user.data && user.data.dob ? user.data.dob : null;\r\n    let photo =\r\n      user.status === true && user.data && user.data.photo\r\n        ? user.data.photo\r\n        : null;\r\n    let qualification =\r\n      user.status === true && user.data && user.data.qualification\r\n        ? user.data.qualification\r\n        : null;\r\n    let last_organization =\r\n      user.status === true && user.data && user.data.last_organization\r\n        ? user.data.last_organization\r\n        : null;\r\n    let userRole =\r\n      user.status === true &&\r\n      user.data &&\r\n      user.data.roles &&\r\n      Object.keys(user.data.roles).length > 0\r\n        ? user.data.roles\r\n        : [];\r\n    let roleName = Object.keys(userRole).length > 0 ? userRole[0].name : null;\r\n    let imageName =\r\n      user.data.photo !== null\r\n        ? user.data.photo.substr(user.data.photo.lastIndexOf(\"/\") + 1)\r\n        : \"\";\r\n    let uploadedImgName = imageName;\r\n    setEditValues({\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      email: email,\r\n      gender: gender,\r\n      dob: dob,\r\n      photo: photo,\r\n      qualification: qualification,\r\n      last_organization: last_organization,\r\n      roleName: roleName,\r\n      uploadedImgName: uploadedImgName,\r\n      user_id: user_id,\r\n    });\r\n  };\r\n  useEffect(() => setTimeout(() => getFormData(), 10), []);\r\n\r\n  const imgUpload = async (e) => {\r\n    const postData = new FormData();\r\n    postData.append(\"file\", e.target.files[0]);\r\n    let updateImg = await AuthApi.updateImg(postData);\r\n    if (updateImg && updateImg.status === true) {\r\n      setEditValues({\r\n        ...editValues,\r\n        photo: updateImg.data.image_url,\r\n        uploadedImgName: updateImg.data.image_name,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeImg = () => {\r\n    setEditValues({\r\n      ...editValues,\r\n      photo: null,\r\n      uploadedImgName: null,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const editUser1 = async (id) => {\r\n    let status = await AuthApi.updateUser(editValues, ls(\"user\").id);\r\n    if (status && status.status === true) {\r\n      ls.set(\"user\", false);\r\n      ls.set(\"user\", status.data);\r\n      props.history.push(\"/dashboard\");\r\n    }\r\n  };\r\n\r\n  const call1 = async (e) => {\r\n    if (shown === false) {\r\n      setShown({ shown: shown });\r\n    } else {\r\n      handleSubmit(e);\r\n      await editUser1();\r\n    }\r\n  };\r\n\r\n  console.warn = console.error = () => {};\r\n\r\n  var month = new Array();\r\n  month[0] = \"01\";\r\n  month[1] = \"02\";\r\n  month[2] = \"03\";\r\n  month[3] = \"04\";\r\n  month[4] = \"05\";\r\n  month[5] = \"06\";\r\n  month[6] = \"07\";\r\n  month[7] = \"08\";\r\n  month[8] = \"09\";\r\n  month[9] = \"10\";\r\n  month[10] = \"11\";\r\n  month[11] = \"12\";\r\n\r\n  var d = new Date();\r\n  var dateString = d.getFullYear() + \"-\" + month[d.getMonth()];\r\n\r\n  const handleMonthChange = async (e) => {\r\n    let select = e.target.value;\r\n\r\n    let today = new Date(select);\r\n    let month = today.getMonth() + 1;\r\n    let year = today.getFullYear();\r\n\r\n    const AllData = await AuthApi.getAllSalaryData(month, year);\r\n    // console.log(AllData.salarySlip)\r\n\r\n    // length = AllData.data.length\r\n    if (AllData && AllData.status === true) {\r\n      setData({\r\n        ...data,\r\n        getData: AllData.salarySlip,\r\n      });\r\n    }\r\n  };\r\n\r\n  const allData = async (e) => {\r\n    let today = new Date();\r\n    let month = today.getMonth() + 1;\r\n    let year = today.getFullYear();\r\n    const dis = await AuthApi.getAllSalaryData(month, year);\r\n    if (dis && dis.status === true) {\r\n      setData({\r\n        ...data,\r\n        getData: dis.salarySlip,\r\n      });\r\n    }\r\n\r\n    const input = document.getElementById(\"datetime-local\");\r\n    input.value = dateString;\r\n  };\r\n\r\n  const pdfGenrate = async () => {\r\n    const input = document.getElementById(\"datetime-local\");\r\n    let today = new Date(input.value);\r\n    let month = today.getMonth() + 1;\r\n    let year = today.getFullYear();\r\n    const pdfGen = await AuthApi.getAllSalaryData(month, year);\r\n    var cuurentMonth = new Array();\r\n    cuurentMonth[1] = \"January\";\r\n    cuurentMonth[2] = \"February\";\r\n    cuurentMonth[3] = \"March\";\r\n    cuurentMonth[4] = \"April\";\r\n    cuurentMonth[5] = \"May\";\r\n    cuurentMonth[6] = \"June\";\r\n    cuurentMonth[7] = \"July\";\r\n    cuurentMonth[8] = \"August\";\r\n    cuurentMonth[9] = \"September\";\r\n    cuurentMonth[10] = \"October\";\r\n    cuurentMonth[11] = \"November\";\r\n    cuurentMonth[12] = \"December\";\r\n\r\n    var cMonth = cuurentMonth[month];\r\n\r\n    if (pdfGen) {\r\n      var dd = {\r\n        background: function (currentPage, pageSize) {\r\n          return {\r\n            image: Logo,\r\n            width: 420,\r\n            height: 350,\r\n            absolutePosition: { x: 77, y: 40 },\r\n            opacity: 0.2,\r\n          };\r\n        },\r\n        content: [\r\n          {\r\n            nodeName: \"TABLE\",\r\n            table: {\r\n              body: [\r\n                [\r\n                  {\r\n                    image: Logo,\r\n                    width: 50,\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#356631\",\r\n                    alignment: \"center\",\r\n                    color: \"white\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 2,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    nodeName: \"TH\",\r\n                    stack: [\r\n                      {\r\n                        text: \"Cherrypik Software Inc.\",\r\n                        nodeName: \"H2\",\r\n                        bold: true,\r\n                        fillColor: \"#356631\",\r\n                        alignment: \"center\",\r\n                        color: \"white\",\r\n                        fontSize: 22,\r\n                        marginBottom: 5,\r\n                        marginTop: 12,\r\n                        style: [\r\n                          \"html-h2\",\r\n                          \"html-th\",\r\n                          \"html-tr\",\r\n                          \"html-tbody\",\r\n                          \"html-table\",\r\n                        ],\r\n                      },\r\n                    ],\r\n                    colSpan: 14,\r\n                    bold: true,\r\n                    fillColor: \"#356631\",\r\n                    alignment: \"center\",\r\n                    color: \"white\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    nodeName: \"TD\",\r\n                    stack: [\r\n                      {\r\n                        text: \"Payslip for\" + \" \" + cMonth + \" \" + year,\r\n                        nodeName: \"H6\",\r\n                        alignment: \"center\",\r\n                        fontSize: 14,\r\n                        bold: true,\r\n                        marginBottom: 5,\r\n                        style: [\r\n                          \"html-h6\",\r\n                          \"html-td\",\r\n                          \"html-tr\",\r\n                          \"html-tbody\",\r\n                          \"html-table\",\r\n                        ],\r\n                      },\r\n                    ],\r\n                    colSpan: 16,\r\n                    alignment: \"center\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Mobile Number\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    width: 151,\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.user.mobileNo,\r\n                    nodeName: \"TD\",\r\n                    width: 151,\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Name\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    width: 151,\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.user.firstName + \" \" + pdfGen.user.lastName,\r\n                    nodeName: \"TD\",\r\n                    width: 151,\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Bank Name\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.user.bankName,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Bank A/c No\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.user.bankAccNo,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Date of Join\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.user.doj,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"location\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.user.location,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Working Days\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.totalWorkingDays,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Attended Days\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.totalAttendedDays,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Free Leave\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.totalFreeLeaveDays,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Paid Leave\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.totalPaidLeaveDays,\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 16,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Earnings\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Amount\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Deductions\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Amount\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#b5d59b\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Basic Salary\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.salarySlip[0].BasicSalary,\r\n                    nodeName: \"TD\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Professinal Tax\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.salarySlip[0].Tax,\r\n                    nodeName: \"TD\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"DA\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.salarySlip[0].DA,\r\n                    nodeName: \"TD\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Income Tax\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"-\",\r\n                    nodeName: \"TD\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"HRA\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.salarySlip[0].HRA,\r\n                    nodeName: \"TD\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                    nodeName: \"TD\",\r\n                    colSpan: 8,\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"CA\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.salarySlip[0].CA,\r\n                    nodeName: \"TD\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                    nodeName: \"TD\",\r\n                    colSpan: 8,\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 16,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Gross Earnings\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#EEEEEE\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text:\r\n                      parseInt(pdfGen.salarySlip[0].BasicSalary) +\r\n                      parseInt(pdfGen.salarySlip[0].DA) +\r\n                      parseInt(pdfGen.salarySlip[0].HRA) +\r\n                      parseInt(pdfGen.salarySlip[0].CA),\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#EEEEEE\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"Gross Deductions\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#EEEEEE\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.salarySlip[0].Tax,\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#EEEEEE\",\r\n                    alignment: \"center\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 4,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"\",\r\n                    nodeName: \"TD\",\r\n                    style: [\"html-td\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 16,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n                [\r\n                  {\r\n                    text: \"Net Pay\",\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#EEEEEE\",\r\n                    alignment: \"right\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 8,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: pdfGen.salarySlip[0].netSalary,\r\n                    nodeName: \"TH\",\r\n                    bold: true,\r\n                    fillColor: \"#EEEEEE\",\r\n                    style: [\"html-th\", \"html-tr\", \"html-tbody\", \"html-table\"],\r\n                    colSpan: 8,\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                  {\r\n                    text: \"\",\r\n                  },\r\n                ],\r\n              ],\r\n              widths: [\r\n                37.75,\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                37.75,\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n              ],\r\n              heights: [\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n                \"auto\",\r\n              ],\r\n            },\r\n            marginBottom: 5,\r\n            width: 200,\r\n            margin: [50, 5, 5, 5],\r\n            style: [\"html-table\"],\r\n          },\r\n        ],\r\n        styles: {\r\n          green: {\r\n            color: \"green\",\r\n          },\r\n        },\r\n      };\r\n\r\n      // let doc = new jsPDF( 'l','px', 'letter', [1, 1])\r\n      // const doc = new jsPDF();\r\n\r\n      //get table html\r\n      //html to pdf format\r\n      // var html = htmlToPdfmake(pdfGen);\r\n\r\n      // const documentDefinition = { content: html };\r\n      pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n      pdfMake.createPdf(dd).open();\r\n\r\n      // doc.setFontSize(12);\r\n      // doc.html(pdfGen,\r\n\r\n      //     {\r\n      //     callback: function (doc) {\r\n\r\n      //         doc.save('sample.pdf');\r\n      //     },\r\n      // //    width: 100\r\n      // });\r\n      // doc.setFontSize(8);\r\n\r\n      //     const el = document.getElementById('content')\r\n      //         el.style.display = 'block'\r\n      //         console.log(el)\r\n      //     if (typeof (el) === 'object' && el !== null) {\r\n      //\r\n\r\n      //         // html2pdf().set(opt).from(source).save();\r\n      //         // doc.setFontSize(1);\r\n\r\n      //     }\r\n      //     el.style.display = 'none'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header\r\n        {...props}\r\n        authUser={props.authUser}\r\n        component={\r\n          <div>\r\n            <Card className={classes.root} style={{ marginBottom: \"3%\" }}>\r\n              <CardContent>\r\n                <Breadcrumb\r\n                  {...props}\r\n                  primaryPageName=\"Profile\"\r\n                  primaryPageLink=\"/profile\"\r\n                  isSecondaryPage={false}\r\n                  secondaryPageName=\"\"\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <AppBar position=\"static\" color=\"default\">\r\n              <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                variant=\"fullWidth\"\r\n                aria-label=\"full width tabs example\"\r\n              >\r\n                <Tab label=\"Profile Info\" {...a11yProps(0)} />\r\n                <Tab label=\"Salary Info\" {...a11yProps(1)} onClick={allData} />\r\n                {/* <Tab label=\"Item Three\" {...a11yProps(2)} /> */}\r\n              </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n              axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n              index={value}\r\n              onChangeIndex={handleChangeIndex}\r\n            >\r\n              <TabPanel value={value} index={0} dir={theme.direction}>\r\n                <Grid container className={classes.root} spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <Card className={classes.root}>\r\n                      <CardContent>\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              variant=\"body2\"\r\n                              style={{ float: \"left\" }}\r\n                            >\r\n                              FirstName :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            {shown === false ? (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"body2\"\r\n                                display=\"block\"\r\n                              >\r\n                                {editValues.firstName}\r\n                              </Typography>\r\n                            ) : (\r\n                              true && (\r\n                                <TextField\r\n                                  style={{ float: \"left\" }}\r\n                                  id=\"standard-basic\"\r\n                                  variant=\"outlined\"\r\n                                  name=\"firstName\"\r\n                                  label=\"FirstName\"\r\n                                  value={editValues.firstName}\r\n                                  onChange={handleChange1}\r\n                                />\r\n                              )\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              LastName :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            {shown === false ? (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"body2\"\r\n                                display=\"block\"\r\n                              >\r\n                                {editValues.lastName}\r\n                              </Typography>\r\n                            ) : (\r\n                              true && (\r\n                                <TextField\r\n                                  style={{ float: \"left\" }}\r\n                                  id=\"standard-basic\"\r\n                                  name=\"lastName\"\r\n                                  variant=\"outlined\"\r\n                                  label=\"LastName\"\r\n                                  value={editValues.lastName}\r\n                                  onChange={handleChange1}\r\n                                />\r\n                              )\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              Email :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                              display=\"block\"\r\n                            >\r\n                              {editValues.email}\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              Gender :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            {shown === false ? (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"body2\"\r\n                                display=\"block\"\r\n                              >\r\n                                {editValues.gender}\r\n                              </Typography>\r\n                            ) : (\r\n                              true && (\r\n                                <RadioGroup\r\n                                  aria-label=\"gender\"\r\n                                  name=\"gender\"\r\n                                  value={editValues.gender}\r\n                                  onChange={handleChange1}\r\n                                >\r\n                                  <Grid\r\n                                    container\r\n                                    className={classes.root}\r\n                                    spacing={2}\r\n                                  >\r\n                                    <FormControlLabel\r\n                                      style={{ float: \"left\" }}\r\n                                      value=\"Female\"\r\n                                      control={<Radio />}\r\n                                      label=\"Female\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                      style={{ float: \"left\" }}\r\n                                      value=\"Male\"\r\n                                      control={<Radio />}\r\n                                      label=\"Male\"\r\n                                    />\r\n                                  </Grid>\r\n                                </RadioGroup>\r\n                              )\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              Dob :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            {shown === false ? (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"body2\"\r\n                                display=\"block\"\r\n                              >\r\n                                {editValues.dob}\r\n                              </Typography>\r\n                            ) : (\r\n                              true && (\r\n                                <TextField\r\n                                  style={{ float: \"left\" }}\r\n                                  id=\"date\"\r\n                                  variant=\"outlined\"\r\n                                  label=\"Birthday\"\r\n                                  name=\"dob\"\r\n                                  type=\"date\"\r\n                                  value={editValues.dob}\r\n                                  className={classes.textField}\r\n                                  onChange={handleChange1}\r\n                                  InputLabelProps={{\r\n                                    shrink: true,\r\n                                  }}\r\n                                />\r\n                              )\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              Photo :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            {shown === false ? (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"body2\"\r\n                                display=\"block\"\r\n                              >\r\n                                {\" \"}\r\n                                <img\r\n                                  src={editValues.photo}\r\n                                  alt=\"User profile imagelllll\"\r\n                                  width=\"100\"\r\n                                  height=\"100\"\r\n                                />\r\n                              </Typography>\r\n                            ) : editValues.photo === null ? (\r\n                              <div style={{ float: \"left\" }}>\r\n                                <input\r\n                                  accept=\"image/*\"\r\n                                  className={classes.input}\r\n                                  name=\"photo\"\r\n                                  id=\"contained-button-file\"\r\n                                  type=\"file\"\r\n                                  onChange={(e) => imgUpload(e)}\r\n                                  style={{ display: \"none\" }}\r\n                                />\r\n                                <label htmlFor=\"contained-button-file\">\r\n                                  <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    component=\"span\"\r\n                                  >\r\n                                    {\" \"}\r\n                                    Upload Profile Picture{\" \"}\r\n                                  </Button>\r\n                                </label>\r\n                              </div>\r\n                            ) : (\r\n                              <div style={{ float: \"left\" }}>\r\n                                <Card className={classes.root}>\r\n                                  <CardContent>\r\n                                    <Grid\r\n                                      container\r\n                                      className={classes.root}\r\n                                      spacing={3}\r\n                                    >\r\n                                      <Grid item xs={4}>\r\n                                        <img\r\n                                          src={editValues.photo}\r\n                                          alt=\"User profile imagelllll\"\r\n                                          width=\"35\"\r\n                                          height=\"35\"\r\n                                        />\r\n                                      </Grid>\r\n                                      <Grid item xs={4}>\r\n                                        <Typography\r\n                                          variant=\"subtitle1\"\r\n                                          gutterBottom\r\n                                        >\r\n                                          {editValues.uploadedImgName}\r\n                                        </Typography>\r\n                                      </Grid>\r\n                                      <Grid item xs={4}>\r\n                                        <Button\r\n                                          onClick={(e) => {\r\n                                            removeImg(e);\r\n                                          }}\r\n                                        >\r\n                                          <FontAwesomeIconComponent\r\n                                            classes=\"fa fa-trash\"\r\n                                            colorName=\"primary\"\r\n                                            fontSize=\"small\"\r\n                                          />\r\n                                        </Button>\r\n                                      </Grid>\r\n                                    </Grid>\r\n                                  </CardContent>\r\n                                </Card>\r\n                              </div>\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              Qualification :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            {shown === false ? (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"body2\"\r\n                                display=\"block\"\r\n                              >\r\n                                {editValues.qualification}\r\n                              </Typography>\r\n                            ) : (\r\n                              true && (\r\n                                <TextField\r\n                                  style={{ float: \"left\" }}\r\n                                  id=\"standard-basic\"\r\n                                  name=\"qualification\"\r\n                                  variant=\"outlined\"\r\n                                  label=\"Qualification\"\r\n                                  value={editValues.qualification}\r\n                                  onChange={handleChange1}\r\n                                />\r\n                              )\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              Last_organization :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            {shown === false ? (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"body2\"\r\n                                display=\"block\"\r\n                              >\r\n                                {editValues.last_organization}\r\n                              </Typography>\r\n                            ) : (\r\n                              true && (\r\n                                <TextField\r\n                                  style={{ float: \"left\" }}\r\n                                  id=\"standard-basic\"\r\n                                  name=\"last_organization\"\r\n                                  variant=\"outlined\"\r\n                                  label=\"Last_organization\"\r\n                                  value={editValues.last_organization}\r\n                                  onChange={handleChange1}\r\n                                />\r\n                              )\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                            >\r\n                              Role_Name :\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              style={{ float: \"left\" }}\r\n                              variant=\"body2\"\r\n                              display=\"block\"\r\n                            >\r\n                              {editValues.roleName}\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid\r\n                          container\r\n                          className={classes1.controls}\r\n                          spacing={3}\r\n                        >\r\n                          <Grid item xs={4} style={{ display: \"flex\" }}>\r\n                            <Button\r\n                              type=\"submit\"\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              onClick={(e) => {\r\n                                call1(e);\r\n                              }}\r\n                            >\r\n                              Edit Profile{\" \"}\r\n                            </Button>\r\n                            <Button\r\n                              type=\"button\"\r\n                              onClick={(e) => {\r\n                                e.preventDefault();\r\n                                props.history.push(\"/dashboard\");\r\n                              }}\r\n                            >\r\n                              Cancel\r\n                            </Button>\r\n                          </Grid>\r\n                          <Grid item xs={4}></Grid>\r\n                          <Grid item xs={4}></Grid>\r\n                        </Grid>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n              </TabPanel>\r\n\r\n              <TabPanel value={value} index={1} dir={theme.direction}>\r\n                <div className={classes1.spacing}>\r\n                  <TextField\r\n                    id=\"datetime-local\"\r\n                    label=\"Select Month/Year\"\r\n                    views={[\"year\", \"month\"]}\r\n                    variant=\"outlined\"\r\n                    style={{ top: \"-10px\", float: \"left\" }}\r\n                    defaultValue={dateString}\r\n                    // value={select}\r\n                    type=\"Month\"\r\n                    onChange={(e) => {\r\n                      handleMonthChange(e);\r\n                    }}\r\n                    className={classes.textField}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    inputProps={{ min: \"2020-01\", max: dateString }}\r\n                  />\r\n                  {/* {ls('roles') === 'Super Admin' ?\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            style={{ float: \"right\", width: \"25px\" }}\r\n                                            onClick={addSalary1}\r\n                                        >\r\n                                            Submit\r\n                                        </Button> : null}\r\n\r\n                                    {ls('roles') === 'Super Admin' ?\r\n                                        <TextField\r\n                                            id=\"outlined-basic\"\r\n                                            label=\"Salary\"\r\n                                            variant=\"outlined\"\r\n                                            name=\"salary\"\r\n                                            style={{ top: \"-10px\", float: \"right\" }}\r\n                                            value={sal.salary}\r\n                                            onChange={handleSalary}\r\n                                            className={classes.textField}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                        /> : null} */}\r\n                </div>\r\n\r\n                <Paper className={classes.root}>\r\n                  <TableContainer className={classes.container}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                      <TableHead>\r\n                        <StyledTableRow>\r\n                          {columns.map((column) => (\r\n                            <StyledTableCell\r\n                              key={column.id}\r\n                              align={column.align}\r\n                              style={{ minWidth: column.minWidth }}\r\n                            >\r\n                              {column.label}\r\n                            </StyledTableCell>\r\n                          ))}\r\n                        </StyledTableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {rows\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((row) => {\r\n                            return (\r\n                              <StyledTableRow\r\n                                hover\r\n                                role=\"checkbox\"\r\n                                tabIndex={-1}\r\n                              >\r\n                                {columns.map((column) => {\r\n                                  if (column.buttons) {\r\n                                    return (\r\n                                      <StyledTableCell key={column.label}>\r\n                                        {column.buttons.map((val, index) => {\r\n                                          return (\r\n                                            <React.Fragment key={index}>\r\n                                              <Pdfdownload\r\n                                                variant=\"contained\"\r\n                                                style={{\r\n                                                  display:\r\n                                                    ds[0].length !== 0\r\n                                                      ? \"block\"\r\n                                                      : \"none\",\r\n                                                }}\r\n                                                color=\"primary\"\r\n                                                classes=\"fas fa-file-pdf\"\r\n                                                colorName=\"primary\"\r\n                                                onClick={pdfGenrate}\r\n                                              />\r\n                                              {/* {click ? <Pdf /> : null} */}\r\n                                            </React.Fragment>\r\n                                          );\r\n                                        })}\r\n                                      </StyledTableCell>\r\n                                    );\r\n                                  }\r\n                                  const value = row[column.id];\r\n                                  return (\r\n                                    <StyledTableCell\r\n                                      key={column.id}\r\n                                      align={column.align}\r\n                                    >\r\n                                      {column.format &&\r\n                                      typeof value === \"number\"\r\n                                        ? column.format(value)\r\n                                        : value}\r\n                                    </StyledTableCell>\r\n                                  );\r\n                                })}\r\n                              </StyledTableRow>\r\n                            );\r\n                          })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage1}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage1}\r\n                  />\r\n                </Paper>\r\n              </TabPanel>\r\n\r\n              {/* <TabPanel value={value} index={2} dir={theme.direction}>\r\n                                <h1>Dhaval shah</h1>\r\n                            </TabPanel> */}\r\n            </SwipeableViews>\r\n          </div>\r\n        }\r\n      />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#1B6E95\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nexport default Profile;\r\n",["384","385"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Qulification\\EditQulification.js",["386","387","388","389","390","391","392","393","394","395","396","397","398"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../../Layouts/Header\";\r\nimport Footer from \"../../Layouts/Footer\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Breadcrumb from \"../../Layouts/Breadcrumb\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AuthApi from \"../../Services/Authapi\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst inivalue = {\r\n  qulification: \"\",\r\n  quli_id: 0,\r\n};\r\n\r\nconst AddQulification = (props) => {\r\n  const classes = props;\r\n  const [qulifi, setQulifi] = useState(inivalue);\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props && props.authToken === false) {\r\n      props.history.push(\"/login\");\r\n    }\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setQulifi({ ...qulifi, [name]: value });\r\n    // console.log(ticketValues);\r\n  };\r\n\r\n  const validate = (values) => {\r\n    let errors = {};\r\n    const regex = /^[a-zA-Z]/;\r\n    const ds = /^[0-9\\b]+$/;\r\n    // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n    if (!values.qulification) {\r\n      errors.qulification = \"Cannot be blank\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const getQulification = async () => {\r\n    let quliId =\r\n      props.history.location.pathname.split(\"/\")[\r\n        props.history.location.pathname.split(\"/\").length - 1\r\n      ];\r\n    let get = await AuthApi.singleQulification(quliId);\r\n    let quli_id = quliId;\r\n\r\n    let qualification =\r\n      get.data &&\r\n      get.data &&\r\n      (get.data.qualification !== null || get.data.qualification !== false)\r\n        ? get.data.qualification\r\n        : null;\r\n\r\n    setQulifi({\r\n      qulification: qualification,\r\n      quli_id: quli_id,\r\n    });\r\n  };\r\n\r\n  useEffect(() => setTimeout(() => getQulification(), 500), []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormErrors(validate(qulifi));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n      await Qulification();\r\n    }\r\n  }, [formErrors]);\r\n\r\n  const Qulification = async (id) => {\r\n    let status = await AuthApi.editQulification(qulifi, qulifi.quli_id);\r\n    if (status && status.status === true) {\r\n      props.history.push(\"/qulification\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header\r\n        {...props}\r\n        authUser={props.authUser}\r\n        component={\r\n          <div>\r\n            <Card className={classes.root} style={{ marginBottom: \"3%\" }}>\r\n              <CardContent>\r\n                <Breadcrumb\r\n                  {...props}\r\n                  primaryPageName=\"Qulification\"\r\n                  primaryPageLink=\"/qulification\"\r\n                  isSecondaryPage={true}\r\n                  secondaryPageName=\"Edit\"\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n            <Grid container className={classes.root} spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Card className={classes.root}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h2\">Edit Qulification</Typography>\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                      <Grid container className={classes.root} spacing={5}>\r\n                        <Grid item xs={6}>\r\n                          <TextField\r\n                            fullWidth\r\n                            id=\"Qulification\"\r\n                            name=\"qulification\"\r\n                            label=\"Qulification\"\r\n                            variant=\"outlined\"\r\n                            error={formErrors.qulification && true}\r\n                            value={\r\n                              qulifi && qulifi.qulification !== null\r\n                                ? qulifi.qulification\r\n                                : null\r\n                            }\r\n                            onChange={handleChange}\r\n                            className={formErrors.qulification && \"input-error\"}\r\n                          />\r\n                          {formErrors.qulification && (\r\n                            <span className=\"error\">\r\n                              {formErrors.qulification}\r\n                            </span>\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container className={classes.root} spacing={5}>\r\n                        <Grid item xs={4}></Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container className={classes.root} spacing={3}>\r\n                        <Grid item xs={4} style={{ display: \"flex\" }}>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            style={{ marginTop: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                          >\r\n                            Save\r\n                          </Button>\r\n                          <Button\r\n                            type=\"button\"\r\n                            style={{ marginTop: \"10px\" }}\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              props.history.push(\"/qulification\");\r\n                            }}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                      </Grid>\r\n                    </form>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={6}></Grid>\r\n            </Grid>\r\n          </div>\r\n        }\r\n      />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddQulification;\r\n",["399","400"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Experience\\EditExp.js",["401","402","403","404","405","406","407","408","409","410","411","412"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\n\r\nconst inivalue = {\r\n    minExpYear: \"\",\r\n    maxExpYear: \"\",\r\n    exp_id: 0,\r\n}\r\n\r\nconst EditExperience = (props) => {\r\n    const classes = props;\r\n    const [exp, setExp] = useState(inivalue);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setExp({ ...exp, [name]: value });\r\n\r\n    };\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const ds = /^[0-9\\b]+$/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!ds.test(values.minExpYear)) {\r\n            errors.minExpYear = \"only numeric\";\r\n        }\r\n\r\n        if (!ds.test(values.maxExpYear)) {\r\n            errors.maxExpYear = \"only numeric\";\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n    const getExp = async () => {\r\n        let ExpId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        console.log(ExpId)\r\n        let get = await AuthApi.singleExp(ExpId)\r\n\r\n        let exp_id = ExpId\r\n\r\n        let minExpYear = (get.data && get.data && (get.data.minExpYear !== null || get.data.minExpYear !== false)) ? get.data.minExpYear : null;\r\n        let maxExpYear = (get.data && get.data && (get.data.maxExpYear !== null || get.data.maxExpYear !== false)) ? get.data.maxExpYear : null;\r\n\r\n\r\n        setExp({\r\n            minExpYear: minExpYear,\r\n            maxExpYear: maxExpYear,\r\n            exp_id: exp_id,\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getExp(),\r\n                500), []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(exp));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await experience1();\r\n        }\r\n    }, [formErrors])\r\n\r\n    const experience1 = async (id) => {\r\n        let status = await AuthApi.editExperience(exp, exp.exp_id);\r\n\r\n        if (status && status.status === true) {\r\n            props.history.push('/experience');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Experience\"\r\n                                    primaryPageLink=\"/experience\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit Experience</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"minExpYear\"\r\n                                                        name=\"minExpYear\"\r\n                                                        label=\"MinExpYear\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.minExpYear && true}\r\n                                                        value={exp.minExpYear}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.minExpYear && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.minExpYear && (\r\n                                                        <span className=\"error\">{formErrors.minExpYear}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"maxExpYear\"\r\n                                                        name=\"maxExpYear\"\r\n                                                        label=\"MaxExpYear\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.maxExpYear && true}\r\n                                                        value={exp.maxExpYear}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.maxExpYear && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.maxExpYear && (\r\n                                                        <span className=\"error\">{formErrors.maxExpYear}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Edit</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/experience') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditExperience;\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Documents\\latter.js",["413","414","415","416","417","418"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Header from '../../Layouts/Header'\r\nimport Footer from '../../Layouts/Footer';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Grid } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MUIRichTextEditor from \"mui-rte\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Editor, EditorState, convertToRaw } from 'draft-js';\r\nimport pdfMake from 'pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\nimport draftToHtml from 'draftjs-to-html';\r\n\r\n\r\n\r\n\r\n\r\nconst iniLatter = {\r\n    title: '',\r\n\r\n\r\n}\r\n\r\n\r\nconst Latter = (props) => {\r\n    const classes = props;\r\n    const [doc, setDoc] = useState(iniLatter);\r\n    const [editorState, setEditorState] = React.useState(\r\n        EditorState.createEmpty()\r\n    );\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n        // console.log(props.history)\r\n    });\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setDoc({ ...doc, [name]: value });\r\n\r\n        console.log(doc)\r\n    };\r\n\r\n\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n\r\n\r\n\r\n        if (!values.title) {\r\n            errors.title = \"Cannot be blank\";\r\n        } else if (!regex.test(values.title)) {\r\n            errors.title = \"Invalid title format\";\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n\r\n        e.preventDefault()\r\n        setFormErrors(validate(doc));\r\n        setIsSubmitting(true);\r\n\r\n        console.log(doc)\r\n        console.log(draftToHtml(convertToRaw(editorState.getCurrentContent())))\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"User Offerlatter\"\r\n                                    primaryPageLink=\"/latter\"\r\n                                    isSecondaryPage={false}\r\n                                    secondaryPageName=\"\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\" style={{ paddingTop: 0, paddingLeft: 0, paddingBottom: 0 }}>Generate OfferLater</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit}>\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"outlined-basic\"\r\n                                                        label=\"Title\"\r\n                                                        name=\"title\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.title && true}\r\n                                                        value={doc.title}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.title && \"input-error\"}\r\n                                                    />\r\n                                                    {formErrors.title && (\r\n                                                        <span className=\"error\">{formErrors.title}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={12}>\r\n                                                    <MUIRichTextEditor\r\n                                                        label=\"Type something here...\"\r\n                                                        name=\"texteditor\"\r\n                                                        inlineToolbar={true}\r\n                                                        editorState={editorState}\r\n                                                        onChange={editorState => setEditorState(editorState)}\r\n\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} >\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\", float: 'left' }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\", float: 'left' }} onClick={(e) => { e.preventDefault(); props.history.push('/dashboard') }}>Cancel</Button>\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n\r\n                                        </form>\r\n                                    </CardContent>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Latter;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Messages\\message.js",["419","420","421","422"],"import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport Breadcrumb from \"../../Layouts/Breadcrumb\";\r\nimport Footer from \"../../Layouts/Footer\";\r\nimport Header from \"../../Layouts/Header\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nconst iniData = {\r\n  name: \"\",\r\n  title: \"\",\r\n  sendMessage: \"\",\r\n};\r\n\r\nconst Message = (props) => {\r\n  const classes = props;\r\n\r\n  const [message, setMessgae] = useState({ iniData });\r\n  const [selectedImages, setSelectedImages] = useState([]);\r\n  const [stringImages, setStringImages] = useState({ images: [] });\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props && props.authToken === false) {\r\n      props.history.push(\"/login\");\r\n    }\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMessgae({ ...message, [name]: value });\r\n  };\r\n\r\n  const validate = (values) => {\r\n    let errors = {};\r\n    // const regex = /^[a-zA-Z]/;\r\n    // const ds = /^[0-9\\b]+$/;\r\n    // // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n    if (!values.name) {\r\n      errors.name = \"Cannot be blank\";\r\n    }\r\n\r\n    if (!values.title) {\r\n      errors.name = \"Cannot be blank\";\r\n    }\r\n\r\n    if (!values.sendMessage) {\r\n      errors.name = \"Cannot be blank\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormErrors(validate(message));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n      // await qulification();\r\n    }\r\n  }, [formErrors]);\r\n\r\n  const columns = [\r\n    { field: \"id\", headerName: \"ID\", width: 70 },\r\n    { field: \"name\", headerName: \"Name\", width: 130 },\r\n    { field: \"mobileNumber\", headerName: \"Mobile Number\", width: 130 },\r\n  ];\r\n\r\n  const rows = [\r\n    { id: 1, name: \"Snow\", mobileNumber: 8511745623 },\r\n    { id: 2, name: \"Dhaval\", mobileNumber: 241545421 },\r\n    { id: 3, name: \"Pratik\", mobileNumber: 4512154687 },\r\n    { id: 4, name: \"Praveen\", mobileNumber: 8517456234 },\r\n    { id: 5, name: \"Ritik\", mobileNumber: 444475765 },\r\n  ];\r\n\r\n  const imageHandleChange = (e) => {\r\n    const files = e.target.files;\r\n    const stringFiles = [];\r\n    if (e.target.files) {\r\n      for (let i = 0; i < files.length; i++) {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          stringFiles.push(\r\n            reader.result.replace(\"data:\", \"\").replace(/^.+,/, \"\")\r\n          );\r\n        };\r\n        reader.readAsDataURL(files[i]);\r\n      }\r\n\r\n      const fileArray1 = Array.from(e.target.files).map((file) =>\r\n        URL.createObjectURL(file)\r\n      );\r\n      // console.log(fileArray1)\r\n      setSelectedImages((prevImages) => prevImages.concat(fileArray1));\r\n      setStringImages({ ...stringImages, images: stringFiles });\r\n\r\n      Array.from(e.target.files).map((file) => URL.revokeObjectURL(file));\r\n    }\r\n  };\r\n\r\n  const renderPhotos = (source) => {\r\n    return source.map((photo, index) => {\r\n      return (\r\n        <div key={Math.random()} style={{ float: \"left\" }}>\r\n          <img\r\n            src={photo}\r\n            key={photo}\r\n            alt=\"User profile image\"\r\n            style={{ padding: \"20px\" }}\r\n            width=\"200px\"\r\n            height=\"200px\"\r\n          />\r\n          <Button\r\n            style={{ marginTop: \"-20rem\" }}\r\n            onClick={(e) => {\r\n              removeImage(index);\r\n            }}\r\n          >\r\n            x\r\n          </Button>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const removeImage = (e) => {\r\n    const stringImages1 = stringImages.images;\r\n    const selectedImages1 = selectedImages;\r\n    stringImages1.splice(e, 1);\r\n    selectedImages1.splice(e, 1);\r\n\r\n    setSelectedImages((prevImages) => (prevImages = selectedImages1));\r\n    setStringImages({ ...stringImages, images: stringImages1 });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header\r\n        {...props}\r\n        authUser={props.authUser}\r\n        component={\r\n          <div>\r\n            <Card className={classes.root} style={{ marginBottom: \"3%\" }}>\r\n              <CardContent>\r\n                <Breadcrumb\r\n                  {...props}\r\n                  primaryPageName=\"Send Message\"\r\n                  primaryPageLink=\"/message\"\r\n                  isSecondaryPage={true}\r\n                  secondaryPageName=\"\"\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Grid container className={classes.root} spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Card className={classes.root}>\r\n                  <div style={{ height: 400, width: \"100%\" }}>\r\n                    <DataGrid\r\n                      rows={rows}\r\n                      columns={columns}\r\n                      pageSize={5}\r\n                      rowsPerPageOptions={[5]}\r\n                      checkboxSelection\r\n                    />\r\n                  </div>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container className={classes.root} spacing={2}>\r\n              <Grid item xs={12} style={{ marginBottom: \"40px\" }}>\r\n                <Card className={classes.root}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h2\" style={{ padding: 0 }}>\r\n                      Send Message\r\n                    </Typography>\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                      <Grid container className={classes.root} spacing={5}>\r\n                        <Grid item xs={4}>\r\n                          <TextField\r\n                            fullWidth\r\n                            id=\"Title\"\r\n                            name=\"title\"\r\n                            label=\"Title\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                          <TextField\r\n                            fullWidth\r\n                            id=\"content\"\r\n                            name=\"content\"\r\n                            label=\"Content\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                          <div>\r\n                            <input\r\n                              accept=\"image/*\"\r\n                              // className={classes.input}\r\n                              id=\"contained-button-file\"\r\n                              multiple\r\n                              type=\"file\"\r\n                              onChange={(e) => {\r\n                                imageHandleChange(e);\r\n                              }}\r\n                              style={{ display: \"none\" }}\r\n                            />\r\n                            <label htmlFor=\"contained-button-file\">\r\n                              <Button\r\n                                style={{ float: \"left\" }}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                component=\"span\"\r\n                              >\r\n                                {\" \"}\r\n                                Upload Event Picture{\" \"}\r\n                              </Button>\r\n                            </label>\r\n                          </div>\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container className={classes.root} spacing={5}>\r\n                        <Grid item xs={12}>\r\n                          <div style={{ float: \"left\" }}>\r\n                            <Card className={classes.root}>\r\n                              <Grid item xs={12}>\r\n                                {renderPhotos(selectedImages)}\r\n                              </Grid>\r\n                            </Card>\r\n                          </div>\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container className={classes.root} spacing={5}>\r\n                        <Grid item xs={4}></Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container className={classes.root} spacing={3}>\r\n                        <Grid item xs={4} style={{ display: \"flex\" }}>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            style={{ marginTop: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                          >\r\n                            Send\r\n                          </Button>\r\n                          <Button\r\n                            type=\"button\"\r\n                            style={{ marginTop: \"10px\" }}\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              props.history.push(\"\");\r\n                            }}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                      </Grid>\r\n                    </form>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        }\r\n      />\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Footer.js",["423"],"import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"footer\"> <p> Copyright@2021. All rights reserved.</p></div>\r\n  }\r\n}\r\n\r\nexport default Footer;",["424","425"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Nav.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\FontAwesomeIconComponent.js",["426"],"import React from 'react';\r\nimport { loadCSS } from 'fg-loadcss';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > .fa': {\r\n      margin: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function FontAwesomeIconComponent(props) {\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    const node = loadCSS(\r\n      'https://use.fontawesome.com/releases/v5.12.0/css/all.css',\r\n      document.querySelector('#font-awesome-css'),\r\n    );\r\n\r\n    return () => {\r\n      node.parentNode.removeChild(node);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Icon className={props.classes} color={(props.colorName) ? \"primary\" : \"\"} fontSize={(props.fontSize) ? \"small\" : \"\"} />\r\n  );\r\n}","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\TableComponent.js",["427","428","429","430","431","432"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  withStyles,\r\n  makeStyles,\r\n  useTheme,\r\n  lighten,\r\n} from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport PropTypes from \"prop-types\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FontAwesomeIconComponent from \"../Layouts/FontAwesomeIconComponent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ls from \"local-storage\";\r\n\r\nexport default function TableComponent(props) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [order, setOrder] = React.useState(props.tableTh[0]);\r\n  const [orderBy, setOrderBy] = React.useState(props.tableTh[0]);\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, props.tableData.length - page * rowsPerPage);\r\n\r\n  const handleRequestSort = (property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  console.warn = console.error = () => {};\r\n\r\n  const getActionBtns = (props, row) => {\r\n    return (\r\n      <div>\r\n        <Grid container spacing={3}>\r\n          {props.actionBtns.indexOf(\"update\") > -1 ? (\r\n            <Grid item xs={1}>\r\n              {\" \"}\r\n              <IconButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={(e) => {\r\n                  props.openPopUpUpdate !== false\r\n                    ? props.openPopUpUpdate(row)\r\n                    : props.history.push(props.updateRoute + \"/\" + row.id);\r\n                }}\r\n              >\r\n                <FontAwesomeIconComponent\r\n                  classes=\"fa fa-edit\"\r\n                  colorName=\"primary\"\r\n                  fontSize={\"small\"}\r\n                />\r\n              </IconButton>{\" \"}\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {props.actionBtns.indexOf(\"delete\") > -1 ? (\r\n            <Grid item xs={1}>\r\n              {\" \"}\r\n              <IconButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={(e) => {\r\n                  props.removeRow(row.id);\r\n                }}\r\n              >\r\n                <FontAwesomeIconComponent\r\n                  classes=\"fa fa-trash\"\r\n                  colorName=\"primary\"\r\n                  fontSize={\"small\"}\r\n                />\r\n              </IconButton>{\" \"}\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {props.actionBtns.indexOf(\"show\") > -1 ? (\r\n            <Grid item xs={1}>\r\n              {\" \"}\r\n              <IconButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  props.history.push(\"/show\" + \"/\" + row.id);\r\n                }}\r\n              >\r\n                <FontAwesomeIconComponent\r\n                  classes=\"far fa-eye\"\r\n                  colorName=\"primary\"\r\n                  fontSize={\"small\"}\r\n                />\r\n              </IconButton>{\" \"}\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {props.actionBtns.indexOf(\"approve\") > -1 ? (\r\n            <Grid item xs={1}>\r\n              {\" \"}\r\n              <IconButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={(e) => {\r\n                  props.acceptRow(row.id);\r\n                }}\r\n              >\r\n                <FontAwesomeIconComponent\r\n                  classes=\"far fa-check-square\"\r\n                  colorName=\"primary\"\r\n                  fontSize={\"small\"}\r\n                />\r\n              </IconButton>{\" \"}\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {props.actionBtns.indexOf(\"reject\") > -1 ? (\r\n            <Grid item xs={1}>\r\n              {\" \"}\r\n              <IconButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={(e) => {\r\n                  props.rejectRow(row.id);\r\n                }}\r\n              >\r\n                <FontAwesomeIconComponent\r\n                  classes=\"fas fa-window-close\"\r\n                  colorName=\"primary\"\r\n                  fontSize={\"small\"}\r\n                />\r\n              </IconButton>{\" \"}\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // let th = [];\r\n  useEffect(() => {\r\n    if (props.tablePagestatus === true) {\r\n      let rawCount = props.tableCount;\r\n      let perPage = rowsPerPage;\r\n      let answer = rawCount / perPage;\r\n      let page2 = page;\r\n      if (page2 > rawCount % perPage) {\r\n        if (rawCount % perPage === 0) {\r\n          handleChangePage(answer - 1);\r\n        } else {\r\n          handleChangePage(Math.floor(answer));\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  let td = [];\r\n  let tr = [];\r\n  if (Object.keys(props.tableData).length > 0) {\r\n    let tableRows = props.tableData;\r\n\r\n    if (rowsPerPage > 0) {\r\n      tableRows = props.tableData.slice(\r\n        page * rowsPerPage,\r\n        page * rowsPerPage + rowsPerPage\r\n      );\r\n    }\r\n    tableRows = stableSort(tableRows, getComparator(order, orderBy));\r\n    Object.keys(tableRows).forEach((key) => {\r\n      Object.keys(tableRows[key]).forEach((i) => {\r\n        if (props.colNameToShow.indexOf(i) > -1) {\r\n          td.push(\r\n            <TableCell key={i} align=\"left\">\r\n              {tableRows[key][i]}\r\n            </TableCell>\r\n          );\r\n        }\r\n      });\r\n      // td.push()\r\n      tr.push(\r\n        <StyledTableRow key={key}>\r\n          {td}\r\n          <TableCell align=\"left\">\r\n            {getActionBtns(props, tableRows[key])}\r\n          </TableCell>\r\n        </StyledTableRow>\r\n      );\r\n      td = [];\r\n    });\r\n\r\n    if (emptyRows > 0) {\r\n      tr.push(\r\n        <TableRow key={Math.random} style={{ height: emptyRows }}>\r\n          {\" \"}\r\n        </TableRow>\r\n      );\r\n      // tr.push(<TableRow  key={Math.random} style={{ height: 67 * emptyRows }}> <TableCell colSpan={Object.keys(props.tableTh).length} /> </TableRow>)\r\n    }\r\n  } else {\r\n    // td.push(<TableCell colSpan={Object.keys(props.tableTh).length} align=\"center\">No data found</TableCell>)\r\n    tr.push(\r\n      <StyledTableRow key={1}>\r\n        <TableCell colSpan={Object.keys(props.tableTh).length} align=\"center\">\r\n          No found\r\n        </TableCell>\r\n      </StyledTableRow>\r\n    );\r\n  }\r\n\r\n  const url = window.location.pathname;\r\n\r\n  var display;\r\n  if (url == \"/event\") {\r\n    if (ls(\"roles\") === \"Super Admin\" || ls(\"roles\") === \"Admin\") {\r\n      display = \"block\";\r\n    } else {\r\n      display = \"none\";\r\n    }\r\n  } else if (url == \"/check\") {\r\n    display = \"none\";\r\n  }\r\n\r\n  return (\r\n    <TableContainer component={Paper} style={{ marginBottom: \"5%\" }}>\r\n      <Typography variant=\"h2\">Manage {props.modelName}</Typography>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        style={{ float: \"right\", margin: \"22px\", display: display }}\r\n        onClick={(e) => {\r\n          props.openPopUp !== false\r\n            ? props.openPopUp()\r\n            : props.history.push(props.addRoute);\r\n        }}\r\n      >\r\n        Add\r\n      </Button>\r\n      <Table\r\n        className={classes.table}\r\n        aria-label=\"customized table\"\r\n        style={{ tableLayout: \"fixed\", width: \"100%\" }}\r\n      >\r\n        <TableHead>\r\n          <EnhancedTableHead\r\n            classes={classes}\r\n            order=\"desc\"\r\n            orderBy=\"asc\"\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={props.tableTh.length}\r\n            tableTh={props.tableTh}\r\n          />\r\n        </TableHead>\r\n        <TableBody>{tr}</TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\r\n              colSpan={3}\r\n              // count={props.tableData.length}\r\n              count={props.tableCount}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { \"aria-label\": \"rows per page\" },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  head: {\r\n    backgroundColor: \"#1B6E95\",\r\n    color: \"#fff\",\r\n    margin: \"0 auto\",\r\n    \"& th\": {\r\n      color: \"#fff\",\r\n    },\r\n    \"& th > span:hover\": {\r\n      color: \"#fff\",\r\n    },\r\n    \"& th:hover\": {\r\n      color: \"#fff\",\r\n    },\r\n    \"& th:active\": {\r\n      color: \"#fff\",\r\n    },\r\n    \"& th > span:active\": {\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  // console.log(props.tablePage)\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = () => {\r\n    onChangePage(0);\r\n  };\r\n\r\n  const handleBackButtonClick = () => {\r\n    onChangePage(page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = () => {\r\n    onChangePage(page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = () => {\r\n    onChangePage(Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  // console.log(props.count)\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => () => {\r\n    onRequestSort(property);\r\n  };\r\n\r\n  return (\r\n    <TableRow className={classes.head}>\r\n      {props.tableTh.map((headCell) => (\r\n        <TableCell\r\n          key={headCell.id}\r\n          align={headCell.numeric ? \"right\" : \"left\"}\r\n          // padding=\"10%\"\r\n          maxwidth=\"300px\"\r\n          whitespace=\"normal\"\r\n          sortDirection={orderBy === headCell.id ? order : false}\r\n        >\r\n          {headCell.sortable === true ? (\r\n            <TableSortLabel\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}></span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          ) : (\r\n            headCell.label\r\n          )}\r\n        </TableCell>\r\n      ))}\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  // onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\PageLoader.js",["433"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function PageLoader() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div style={{ display: 'grid', height: '100vh' }}><div style={{ margin: 'auto', verticalAlign: 'middle' }}> <CircularProgress /></div></div>\r\n  );\r\n}\r\n",["434","435"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\EditForm.js",["436","437","438","439","440","441"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./AddForm.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AuthApi from \"../../../Services/Authapi\";\r\nimport FontAwesomeIconComponent from \"../../../Layouts/FontAwesomeIconComponent\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ls from \"local-storage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    border: \"1px solid rgba(0, 0, 0, .125)\",\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst iniuser = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  gender: \"\",\r\n  dob: \"\",\r\n  photo: \"\",\r\n  qualification: \"\",\r\n  last_organization: \"\",\r\n  roleName: \"\",\r\n  uploadedImgName: \"\",\r\n  user: false,\r\n  user_id: 0,\r\n  salary: \"\",\r\n  mobileNo: \"\",\r\n  bankName: \"\",\r\n  bankAccNo: \"\",\r\n  doj: \"\",\r\n  location: \"\",\r\n  department: \"\",\r\n  designation: \"\",\r\n  password: \"\",\r\n  role: [],\r\n};\r\n\r\nconst EditForm = (props) => {\r\n  const styles = useStyles();\r\n  const classes = props;\r\n  const [editValues, setEditValues] = useState(iniuser);\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [roleOptions] = React.useState([]);\r\n\r\n  const handleChange1 = (e) => {\r\n    const { name, value } = e.target;\r\n    // console.log(value);\r\n    setEditValues({ ...editValues, [name]: value });\r\n  };\r\n\r\n  const validate = (values) => {\r\n    let errors = {};\r\n    const regex = /^[a-zA-Z]/;\r\n    const emailRegx =\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const dobRegx =\r\n      /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n    const Numeric = /^\\d+$/;\r\n    const phone = /^[0-9]{10}$/;\r\n\r\n    if (!values.firstName) {\r\n      errors.firstName = \"Cannot be blank\";\r\n    } else if (!regex.test(values.firstName)) {\r\n      errors.firstName = \"Invalid firstName format\";\r\n    }\r\n\r\n    if (!values.lastName) {\r\n      errors.lastName = \"Cannot be blank\";\r\n    } else if (!regex.test(values.lastName)) {\r\n      errors.lastName = \"Invalid lastName format\";\r\n    }\r\n\r\n    if (!values.email) {\r\n      errors.email = \"Cannot be  blank\";\r\n    } else if (!emailRegx.test(values.email)) {\r\n      errors.email = \"Invalid email format\";\r\n    }\r\n\r\n    if (!values.dob) {\r\n      errors.dob = \"Cannot be  blank\";\r\n    } else if (!dobRegx.test(values.dob)) {\r\n      errors.dob = \"Invalid dob format\";\r\n    }\r\n\r\n    if (!values.qualification) {\r\n      errors.qualification = \"Cannot be blank\";\r\n    } else if (!regex.test(values.qualification)) {\r\n      errors.qualification = \"Invalid qualification format\";\r\n    }\r\n\r\n    if (!values.last_organization) {\r\n      errors.last_organization = \"Cannot be blank\";\r\n    } else if (!regex.test(values.last_organization)) {\r\n      errors.last_organization = \"Invalid last_organization format\";\r\n    }\r\n\r\n    if (!values.roleName) {\r\n      errors.roleName = \"Cannot be blank\";\r\n    }\r\n\r\n    if (!values.salary) {\r\n      errors.salary = \"Cannot be blank\";\r\n    } else if (!Numeric.test(values.salary)) {\r\n      errors.salary = \"Must Be Numeric\";\r\n    }\r\n\r\n    if (!values.mobileNo) {\r\n      errors.mobileNo = \"Cannot be blank\";\r\n    } else if (!phone.test(values.mobileNo)) {\r\n      errors.mobileNo = \"Must Be Numeric and 10 digit Fix \";\r\n    }\r\n\r\n    if (!values.bankName) {\r\n      errors.bankName = \"Cannot be blank\";\r\n    } else if (!regex.test(values.bankName)) {\r\n      errors.bankName = \"Please Enter Your bank Name\";\r\n    }\r\n\r\n    if (!values.bankAccNo) {\r\n      errors.bankAccNo = \"Cannot be blank\";\r\n    } else if (!Numeric.test(values.bankAccNo)) {\r\n      errors.bankAccNo = \"Must Be Numeric \";\r\n    }\r\n\r\n    if (!values.doj) {\r\n      errors.doj = \"Cannot be  blank\";\r\n    } else if (!dobRegx.test(values.doj)) {\r\n      errors.doj = \"Invalid dob format\";\r\n    }\r\n\r\n    if (!values.location) {\r\n      errors.location = \"Cannot be blank\";\r\n    } else if (!regex.test(values.location)) {\r\n      errors.location = \"Please Enter Location\";\r\n    }\r\n\r\n    if (!values.department) {\r\n      errors.department = \"Cannot be blank\";\r\n    } else if (!regex.test(values.department)) {\r\n      errors.department = \"Please Enter Department\";\r\n    }\r\n\r\n    if (!values.designation) {\r\n      errors.designation = \"Cannot be blank\";\r\n    } else if (!regex.test(values.designation)) {\r\n      errors.designation = \"Please Enter Department\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const getFormData = async () => {\r\n    let userId =\r\n      props.history.location.pathname.split(\"/\")[\r\n        props.history.location.pathname.split(\"/\").length - 1\r\n      ];\r\n    let user = await AuthApi.singleUser(userId);\r\n\r\n    // editUser = editValues;\r\n\r\n    let user_id = userId;\r\n    let firstName =\r\n      user.status === true &&\r\n      user.data &&\r\n      user.data.firstName &&\r\n      (user.data.firstName !== null || user.data.firstName !== false)\r\n        ? user.data.firstName\r\n        : null;\r\n    let lastName =\r\n      user.status === true && user.data && user.data.lastName\r\n        ? user.data.lastName\r\n        : null;\r\n    let email =\r\n      user.status === true && user.data && user.data.email\r\n        ? user.data.email\r\n        : null;\r\n    let gender =\r\n      user.status === true && user.data && user.data.gender\r\n        ? user.data.gender\r\n        : null;\r\n    let dob =\r\n      user.status === true && user.data && user.data.dob ? user.data.dob : null;\r\n    let photo =\r\n      user.status === true && user.data && user.data.photo\r\n        ? user.data.photo\r\n        : null;\r\n    let qualification =\r\n      user.status === true && user.data && user.data.qualification\r\n        ? user.data.qualification\r\n        : null;\r\n    let last_organization =\r\n      user.status === true && user.data && user.data.last_organization\r\n        ? user.data.last_organization\r\n        : null;\r\n    let userRole =\r\n      user.status === true &&\r\n      user.data &&\r\n      user.data.roles &&\r\n      Object.keys(user.data.roles).length > 0\r\n        ? user.data.roles\r\n        : [];\r\n    let roleName = Object.keys(userRole).length > 0 ? userRole[0].name : null;\r\n    let imageName =\r\n      user.data.photo !== null\r\n        ? user.data.photo.substr(user.data.photo.lastIndexOf(\"/\") + 1)\r\n        : \"\";\r\n    let salary =\r\n      user.status === true && user.data && user.data.salary\r\n        ? user.data.salary\r\n        : null;\r\n    let mobileNo =\r\n      user.status === true && user.data && user.data.mobileNo\r\n        ? user.data.mobileNo\r\n        : null;\r\n    let bankName =\r\n      user.status === true && user.data && user.data.bankName\r\n        ? user.data.bankName\r\n        : null;\r\n    let bankAccNo =\r\n      user.status === true && user.data && user.data.bankAccNo\r\n        ? user.data.bankAccNo\r\n        : null;\r\n    let doj =\r\n      user.status === true && user.data && user.data.doj ? user.data.doj : null;\r\n    let location =\r\n      user.status === true && user.data && user.data.location\r\n        ? user.data.location\r\n        : null;\r\n    let department =\r\n      user.status === true && user.data && user.data.department\r\n        ? user.data.department\r\n        : null;\r\n    let designation =\r\n      user.status === true && user.data && user.data.designation\r\n        ? user.data.designation\r\n        : null;\r\n\r\n    let password = editValues.password;\r\n\r\n    let uploadedImgName = imageName;\r\n\r\n    setEditValues({\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      email: email,\r\n      gender: gender,\r\n      dob: dob,\r\n      photo: photo,\r\n      qualification: qualification,\r\n      last_organization: last_organization,\r\n      roleName: roleName,\r\n      uploadedImgName: uploadedImgName,\r\n      salary: salary,\r\n      mobileNo: mobileNo,\r\n      bankName: bankName,\r\n      bankAccNo: bankAccNo,\r\n      doj: doj,\r\n      location: location,\r\n      department: department,\r\n      designation: designation,\r\n      password: password,\r\n      user_id: user_id,\r\n    });\r\n  };\r\n  useEffect(() => setTimeout(() => getFormData(), 1000), []);\r\n\r\n  const imgUpload = async (e) => {\r\n    const postData = new FormData();\r\n    postData.append(\"file\", e.target.files[0]);\r\n    let updateImg = await AuthApi.updateImg(postData);\r\n    console.log(updateImg);\r\n    // return false;\r\n    if (updateImg && updateImg.status === true) {\r\n      setEditValues({\r\n        ...editValues,\r\n        photo: updateImg.data.image_url,\r\n        uploadedImgName: updateImg.data.image_name,\r\n      });\r\n      //   console.log(editValues)\r\n    }\r\n  };\r\n\r\n  const removeImg = async (e) => {\r\n    let imageLink = editValues.photo;\r\n    imageLink = imageLink.substr(imageLink.indexOf(\"/\", 7) + 1);\r\n    let remImg = await AuthApi.deleteImg(imageLink);\r\n    if (remImg && remImg.status === true) {\r\n      // setEditValues({\r\n      //     // ...setEditValues,\r\n      //     photo: null,\r\n      //     imageName: null\r\n      // })\r\n      getFormData();\r\n    } else {\r\n    }\r\n    // setEditValues({\r\n    //     photo: null,\r\n    //     uploadedImgName: null\r\n    // })\r\n  };\r\n\r\n  async function RoleData() {\r\n    let role = await AuthApi.getRole();\r\n\r\n    //    console.log(editValues);\r\n\r\n    if (role && role.status === true) {\r\n      if (Object.keys(role.data).length > 0) {\r\n        Object.keys(role.data).forEach((key) => {\r\n          roleOptions.push(\r\n            <MenuItem key={key} value={role.data[key].name}>\r\n              {role.data[key].name}\r\n            </MenuItem>\r\n          );\r\n        });\r\n      } else {\r\n        roleOptions.push(\r\n          <MenuItem value=\"\">\r\n            <em>Select Role</em>\r\n          </MenuItem>\r\n        );\r\n      }\r\n    }\r\n  }\r\n  React.useEffect(() => RoleData(), []);\r\n\r\n  //    const  addRole =(e) =>{\r\n  //         let user = editValues;\r\n  //         console.log(user);\r\n  //         user.roleName = e.target.value;\r\n  //         setEditValues({\r\n  //             editValues: user\r\n  //         })\r\n  //     }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormErrors(validate(editValues));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n      // submitForm();\r\n      await editUser1();\r\n    }\r\n  }, [formErrors]);\r\n\r\n  const editUser1 = async (id) => {\r\n    let status = await AuthApi.updateUser(editValues, editValues.user_id);\r\n    console.log(status);\r\n    if (status && status.status === true) {\r\n      props.history.push(\"/users\");\r\n    }\r\n  };\r\n\r\n  // console.log(editValues);\r\n\r\n  return (\r\n    <div>\r\n      <form className={classes.root} onSubmit={handleSubmit}>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"firstName\"\r\n              label=\"First name\"\r\n              variant=\"outlined\"\r\n              error={formErrors.firstName && true}\r\n              value={\r\n                editValues && editValues.firstName !== null\r\n                  ? editValues.firstName\r\n                  : null\r\n              }\r\n              // focused={(editValues && editValues.firstName !== null) ? true : false}\r\n              onChange={handleChange1}\r\n              className={formErrors.firstName && \"input-error\"}\r\n            />\r\n            {formErrors.firstName && (\r\n              <span className=\"error\">{formErrors.firstName}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"lastName\"\r\n              label=\"Last name\"\r\n              variant=\"outlined\"\r\n              value={\r\n                editValues && editValues.lastName !== null\r\n                  ? editValues.lastName\r\n                  : null\r\n              }\r\n              // focused={(editValues && editValues.lastName !== null) ? true : false}\r\n              onChange={handleChange1}\r\n              className={formErrors.lastName && \"input-error\"}\r\n              error={formErrors.lastName && true}\r\n            />\r\n            {formErrors.lastName && (\r\n              <span className=\"error\">{formErrors.lastName}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"email\"\r\n              label=\"Email-address\"\r\n              variant=\"outlined\"\r\n              value={\r\n                editValues && editValues.email !== null\r\n                  ? editValues.email\r\n                  : null\r\n              }\r\n              // focused={(editValues && editValues.email !== null) ? true : false}\r\n              error={formErrors.email && true}\r\n              onChange={handleChange1}\r\n              className={formErrors.email && \"input-error\"}\r\n            />\r\n            {formErrors.email && (\r\n              <span className=\"error\">{formErrors.email}</span>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4} style={{ display: \"flex\" }}>\r\n            <FormControl component=\"fieldset\">\r\n              <Grid container className={classes.root} spacing={4}>\r\n                <Grid item xs={12} style={{ display: \"flex\" }}>\r\n                  <FormLabel component=\"legend\">Gender</FormLabel>\r\n                </Grid>\r\n              </Grid>\r\n              <RadioGroup\r\n                aria-label=\"gender\"\r\n                name=\"gender\"\r\n                onChange={handleChange1}\r\n                value={editValues.gender}\r\n                // focused={(editValues && editValues.gender !== null) ? true : false}\r\n              >\r\n                <Grid container className={classes.root} spacing={2}>\r\n                  <Grid item xs={6}>\r\n                    <FormControlLabel\r\n                      value=\"Female\"\r\n                      control={<Radio />}\r\n                      label=\"Female\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <FormControlLabel\r\n                      value=\"Male\"\r\n                      control={<Radio />}\r\n                      label=\"Male\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"date\"\r\n              label=\"Birthday\"\r\n              name=\"dob\"\r\n              type=\"date\"\r\n              variant=\"outlined\"\r\n              // defaultValue=\"2017-05-24\"\r\n              error={formErrors.dob && true}\r\n              value={\r\n                editValues && editValues.dob !== null ? editValues.dob : null\r\n              }\r\n              // focused={(editValues && editValues.dob !== null) ? true : false}\r\n              onChange={handleChange1}\r\n              className={formErrors.dob && \"input-error\"}\r\n              className={classes.textField}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            {formErrors.dob && <span className=\"error\">{formErrors.dob}</span>}\r\n          </Grid>\r\n\r\n          <Grid item xs={4} style={{ display: \"flex\" }}>\r\n            {editValues.photo === null ? (\r\n              <div>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  className={classes.input}\r\n                  name=\"photo\"\r\n                  id=\"contained-button-file\"\r\n                  type=\"file\"\r\n                  onChange={(e) => imgUpload(e)}\r\n                  style={{ display: \"none\" }}\r\n                />\r\n                <label htmlFor=\"contained-button-file\">\r\n                  <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                    {\" \"}\r\n                    Upload Profile Picture{\" \"}\r\n                  </Button>\r\n                </label>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <Card className={classes.root}>\r\n                  <CardContent>\r\n                    <Grid container className={classes.root} spacing={5}>\r\n                      <Grid item xs={4}>\r\n                        <img\r\n                          src={editValues.photo}\r\n                          alt=\"User profile imagelllll\"\r\n                          width=\"35\"\r\n                          height=\"35\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <Typography variant=\"subtitle1\" gutterBottom>\r\n                          {editValues.uploadedImgName}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <Button\r\n                          onClick={(e) => {\r\n                            removeImg(e);\r\n                          }}\r\n                        >\r\n                          <FontAwesomeIconComponent\r\n                            classes=\"fa fa-trash\"\r\n                            colorName=\"primary\"\r\n                            fontSize={\"small\"}\r\n                          />\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"qualification\"\r\n              label=\"Qualification\"\r\n              variant=\"outlined\"\r\n              value={\r\n                editValues && editValues.qualification !== null\r\n                  ? editValues.qualification\r\n                  : null\r\n              }\r\n              // focused={(editValues && editValues.qualification !== null) ? true : false}\r\n              error={formErrors.qualification && true}\r\n              onChange={handleChange1}\r\n              className={formErrors.dob && \"input-error\"}\r\n            />\r\n            {formErrors.qualification && (\r\n              <span className=\"error\">{formErrors.qualification}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"last_organization\"\r\n              label=\"Last Organization\"\r\n              variant=\"outlined\"\r\n              value={\r\n                editValues && editValues.last_organization !== null\r\n                  ? editValues.last_organization\r\n                  : null\r\n              }\r\n              // focused={(editValues && editValues.last_organization !== null) ? true : false}\r\n              error={formErrors.last_organization && true}\r\n              onChange={handleChange1}\r\n              className={formErrors.last_organization && \"input-error\"}\r\n            />\r\n            {formErrors.last_organization && (\r\n              <span className=\"error\">{formErrors.last_organization}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControl variant=\"outlined\" style={{ width: \"100%\" }}>\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                Role\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                name=\"roleName\"\r\n                label=\"Role\"\r\n                error={formErrors.roleName && true}\r\n                className={formErrors.roleName && \"input-error\"}\r\n                onChange={handleChange1}\r\n                value={\r\n                  editValues &&\r\n                  editValues.roleName &&\r\n                  editValues.roleName !== null\r\n                    ? editValues.roleName\r\n                    : \"\"\r\n                }\r\n                // focused={(editValues && editValues.roleName && editValues.roleName !== null) ? true : false}\r\n              >\r\n                {roleOptions}\r\n              </Select>\r\n            </FormControl>\r\n            {formErrors.roleName && (\r\n              <span className=\"error\">{formErrors.roleName}</span>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              variant=\"outlined\"\r\n              error={formErrors.password && true}\r\n              value={editValues.password}\r\n              onChange={handleChange1}\r\n              className={formErrors.password && \"input-error\"}\r\n            />\r\n            {formErrors.password && (\r\n              <span className=\"error\">{formErrors.password}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={12}>\r\n            <div className={styles.root}>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{ color: \"#1B6E95\" }}\r\n                >\r\n                  <Typography className={styles.heading}>\r\n                    Other Settings\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"location\"\r\n                        label=\"Location\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          editValues && editValues.location !== null\r\n                            ? editValues.location\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.location && \"input-error\"}\r\n                        error={formErrors.location && true}\r\n                      />\r\n                      {formErrors.location && (\r\n                        <span className=\"error\">{formErrors.location}</span>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"mobileNo\"\r\n                        label=\"Mobile No\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          editValues && editValues.mobileNo !== null\r\n                            ? editValues.mobileNo\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.mobileNo && \"input-error\"}\r\n                        error={formErrors.mobileNo && true}\r\n                      />\r\n                      {formErrors.mobileNo && (\r\n                        <span className=\"error\">{formErrors.mobileNo}</span>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"date\"\r\n                        label=\"Date of joining\"\r\n                        name=\"doj\"\r\n                        type=\"date\"\r\n                        variant=\"outlined\"\r\n                        // defaultValue=\"2017-05-24\"\r\n                        error={formErrors.doj && true}\r\n                        value={\r\n                          editValues && editValues.doj !== null\r\n                            ? editValues.doj\r\n                            : null\r\n                        }\r\n                        // focused={(editValues && editValues.dob !== null) ? true : false}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.doj && \"input-error\"}\r\n                        className={classes.textField}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                      {formErrors.dob && (\r\n                        <span className=\"error\">{formErrors.doj}</span>\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n\r\n                <AccordionDetails>\r\n                  <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"bankAccNo\"\r\n                        label=\"Bank Account Number\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          editValues && editValues.bankAccNo !== null\r\n                            ? editValues.bankAccNo\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.bankAccNo && \"input-error\"}\r\n                        error={formErrors.bankAccNo && true}\r\n                      />\r\n                      {formErrors.bankAccNo && (\r\n                        <span className=\"error\">{formErrors.bankAccNo}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"bankName\"\r\n                        label=\"Bank Name\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          editValues && editValues.bankName !== null\r\n                            ? editValues.bankName\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.bankName && \"input-error\"}\r\n                        error={formErrors.bankName && true}\r\n                      />\r\n                      {formErrors.bankName && (\r\n                        <span className=\"error\">{formErrors.bankName}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"designation\"\r\n                        label=\"Designation\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          editValues && editValues.designation !== null\r\n                            ? editValues.designation\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.designation && \"input-error\"}\r\n                        error={formErrors.designation && true}\r\n                      />\r\n                      {formErrors.designation && (\r\n                        <span className=\"error\">{formErrors.designation}</span>\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n\r\n                <AccordionDetails>\r\n                  <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"department\"\r\n                        label=\"Department\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          editValues && editValues.department !== null\r\n                            ? editValues.department\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.department && \"input-error\"}\r\n                        error={formErrors.department && true}\r\n                      />\r\n                      {formErrors.department && (\r\n                        <span className=\"error\">{formErrors.department}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    {ls(\"roles\") === \"Admin\" ? (\r\n                      <Grid item xs={4}>\r\n                        <TextField\r\n                          fullWidth\r\n                          id=\"outlined-basic\"\r\n                          name=\"salary\"\r\n                          label=\"Salary\"\r\n                          variant=\"outlined\"\r\n                          value={\r\n                            editValues && editValues.salary !== null\r\n                              ? editValues.salary\r\n                              : null\r\n                          }\r\n                          // focused={(editValues && editValues.lastName !== null) ? true : false}\r\n                          onChange={handleChange1}\r\n                          className={formErrors.salary && \"input-error\"}\r\n                          error={formErrors.salary && true}\r\n                        />\r\n                        {formErrors.salary && (\r\n                          <span className=\"error\">{formErrors.salary}</span>\r\n                        )}\r\n                      </Grid>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </Grid>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.root} spacing={3}>\r\n          <Grid item xs={4} style={{ display: \"flex\" }}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Edit User{\" \"}\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                props.history.push(\"/users\");\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditForm;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Login.js",["442","443","444","445","446","447","448","449","450","451","452","453","454","455","456"],"import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport AuthApi from \"../Services/Authapi\";\r\nimport clsx from \"clsx\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport ls, { get, set } from \"local-storage\";\r\nimport { Textbox } from \"react-inputs-validation\";\r\nimport LoadderButton from \"../Layouts/LoadderButton\";\r\nimport Logo from \"../../Images/logo.png\";\r\nimport swal from \"sweetalert\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Formik } from \"formik\";\r\nimport LoginForm from \"../Layouts/Forms/AuthForms/LoginForm\";\r\n// import './login.css';\r\nimport \"./login.css\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: false,\r\n      password: false,\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken !== false) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken !== false) {\r\n      props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (e) => {\r\n    let formData = {\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n    };\r\n    let checkLogin = await AuthApi.login(formData);\r\n    if (checkLogin && checkLogin !== false) {\r\n      ls.set(\"authToken\", checkLogin.access_token);\r\n      this.props.setAutUser({\r\n        authUser: checkLogin.data,\r\n        authToken: checkLogin.access_token,\r\n      });\r\n    } else {\r\n      swal({\r\n        title: \"OOPS!\",\r\n        text: \"Invalid Credentials\",\r\n        icon: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <main className=\"main\">\r\n        {/* <CssBaseline /> */}\r\n        <Paper className=\"paper\" elevation={3}>\r\n          <img style={{ height: \"45px\" }} src={Logo} alt=\"ds\" />\r\n          <Typography component=\"h1\" variant=\"h2\">\r\n            Cherrypik Software Inc\r\n          </Typography>\r\n          <Typography style={{ color: \"#1B6E95\", height: \"38px\" }}>\r\n            Employee Management System\r\n          </Typography>\r\n          <LoginForm setAutUser={this.props.setAutUser} />\r\n        </Paper>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = (theme) => ({\r\n  main: {\r\n    width: \"auto\",\r\n    display: \"block\", // Fix IE 11 issue.\r\n    overflow: \"hidden\",\r\n    marginLeft: theme.spacing(40),\r\n    marginRight: theme.spacing(3),\r\n    [theme.breakpoints.up(400 + theme.spacing(3, 2))]: {\r\n      width: 400,\r\n      // marginLeft: 'auto',\r\n      // marginRight: 'auto',\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(10),\r\n    // marginRight: 20,\r\n    width: 710,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    padding: `${theme.spacing(10)}px ${theme.spacing(10)}px ${theme.spacing(\r\n      10\r\n    )}px`,\r\n  },\r\n\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(0),\r\n  },\r\n  submit: {\r\n    marginTop: theme.spacing(3),\r\n    backgroundColor: \"#000\",\r\n  },\r\n  link: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  wrapper: {\r\n    margin: theme.spacing(1),\r\n    position: \"relative\",\r\n  },\r\n  buttonSuccess: {\r\n    backgroundColor: green[500],\r\n    \"&:hover\": {\r\n      backgroundColor: green[700],\r\n    },\r\n  },\r\n\r\n  buttonProgress: {\r\n    color: green[500],\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n});\r\nexport default withStyles(styles)(Login);\r\n",["457","458"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\InitComponent.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\EditUser.js",["459","460","461","462","463","464","465","466","467","468","469","470","471"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport EditForm from '../../Layouts/Forms/UserForms/EditForm';\r\n\r\n\r\nclass HandleUser1 extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         users: {\r\n    //             firstName: null,\r\n    //             lastName: null,\r\n    //             email: null,\r\n    //             gender: null,\r\n    //             dob: null,\r\n    //             photo: null,\r\n    //             qualification: null,\r\n    //             last_organization: null,\r\n    //             roleName: null,\r\n    //         },\r\n    //         uploadedImgName: \"\",\r\n    //         user: false,\r\n    //         userId: 0,\r\n    //         role: []\r\n    //     }\r\n    //     // this.handleSubmit = this.handleSubmit.bind(this);\r\n    //     // this.roleData = this.roleData.bind(this);\r\n    //     // this.updateChange = this.updateChange.bind(this);\r\n    //     // this.addRole = this.addRole.bind(this);\r\n    //     // this.editUser = this.editUser.bind(this);\r\n    //     // this.roleData();\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (this.props && this.props.authToken === false) {\r\n          this.props.history.push('/login');\r\n        }\r\n       \r\n      }\r\n    \r\n      componentWillReceiveProps(props) {\r\n        if (props && props.authToken === false) {\r\n          props.history.push('/login');\r\n        }\r\n      }\r\n\r\n\r\n    // componentWillMount() {\r\n    //     let userId = this.props.history.location.pathname.split('/')[this.props.history.location.pathname.split('/').length - 1];\r\n    //     this.setState({ userId: userId }, async function () {\r\n    //         let user = await AuthApi.singleUser(this.state.userId);           \r\n    //         let editUser = this.state.users;\r\n    //         editUser.firstName = (user.status === true && user.data && user.data.firstName && (user.data.firstName !== null || user.data.firstName !== false)) ? user.data.firstName : null;\r\n    //         editUser.lastName = (user.status === true && user.data && user.data.lastName) ? user.data.lastName : null;\r\n    //         editUser.email = (user.status === true && user.data && user.data.email) ? user.data.email : null;\r\n    //         editUser.gender = (user.status === true && user.data && user.data.gender) ? user.data.gender : null;\r\n    //         editUser.dob = (user.status === true && user.data && user.data.dob) ? user.data.dob : null;\r\n    //         editUser.photo = (user.status === true && user.data && user.data.photo) ? user.data.photo : null;\r\n    //         editUser.qualification = (user.status === true && user.data && user.data.qualification) ? user.data.qualification : null;\r\n    //         editUser.last_organization = (user.status === true && user.data && user.data.last_organization) ? user.data.last_organization : null;\r\n    //         let userRole = (user.status === true && user.data && user.data.roles && Object.keys(user.data.roles).length > 0) ? user.data.roles : [];\r\n    //         editUser.roleName = (Object.keys(userRole).length > 0) ? userRole[0].name : null;\r\n    //         let imageName = editUser.photo.substr(editUser.photo.lastIndexOf('/') + 1);\r\n    //         this.setState({ uploadedImgName: imageName })\r\n    //         this.setState({\r\n    //             users: editUser\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    // async handleSubmit(e) {\r\n    //     await this.editUser(this.state.users, this.state.userId)\r\n    // }\r\n\r\n    // async removeImg(e) {\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, photo: null }\r\n    //     })\r\n    //     this.setState({ uploadedImgName: null })\r\n    // }\r\n\r\n    // addRole(e) {\r\n    //     let user = this.state.users;\r\n    //     user.roleName = e.target.value;\r\n    //     this.setState({\r\n    //         users: user\r\n    //     })\r\n    // }\r\n\r\n    // updateChange(e) {\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, [e.target.name]: e.target.value }\r\n    //     })\r\n    // }\r\n\r\n    // async imgUpload(e) {\r\n    //     const postData = new FormData();\r\n    //     postData.append('file', e.target.files[0]);\r\n    //     let updateImg = await AuthApi.updateImg(postData);\r\n    //     if (updateImg && updateImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: updateImg.data.image_url }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: updateImg.data.image_name })\r\n    //     }\r\n    // }\r\n\r\n    // async editUser(id) {\r\n    //     let status = await AuthApi.updateUser(this.state.users, this.state.userId);\r\n    //     console.log(status);\r\n    //     if (status && status.status === true) {\r\n    //         this.props.history.push('/users');\r\n    //     }\r\n    // }\r\n\r\n    // async roleData() {\r\n    //     let role = await AuthApi.getRole();\r\n    //     this.setState({\r\n    //         role: role.data\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        const classes = this.props;\r\n        // let roleOptions = [];\r\n        // if (Object.keys(this.state.role).length > 0) {\r\n        //     Object.keys(this.state.role).forEach((key) => {\r\n        //         roleOptions.push(<MenuItem value={this.state.role[key].name}>{this.state.role[key].name}</MenuItem>)\r\n        //     })\r\n        // }\r\n        // else {\r\n        //     roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n        // }\r\n        return (\r\n            <div>\r\n                <Header\r\n                    {...this.props}\r\n                    authUser={this.props.authUser}\r\n                    component={\r\n                        <div>\r\n                            <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                                <CardContent>\r\n                                    <Breadcrumb\r\n                                        {...this.props}\r\n                                        primaryPageName=\"Users\"\r\n                                        primaryPageLink=\"/users\"\r\n                                        isSecondaryPage={true}\r\n                                        secondaryPageName=\"Edit\" />\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Grid container className={classes.root} spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Typography variant=\"h2\">Edit User</Typography>\r\n                                            <EditForm  {...this.props}/>\r\n                                            {/* <form className={classes.root} noValidate autoComplete=\"off\">\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"firstName\" label=\"First name\" value={(this.state.users && this.state.users.firstName !== null) ? this.state.users.firstName : null} variant=\"outlined\" focused={(this.state.users && this.state.users.firstName !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"lastName\" label=\"Last name\" value={(this.state.users && this.state.users.lastName !== null) ? this.state.users.lastName : null} variant=\"outlined\" focused={(this.state.users && this.state.users.lastName !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"email\" label=\"Email-address\" value={(this.state.users && this.state.users.email !== null) ? this.state.users.email : null} variant=\"outlined\" focused={(this.state.users && this.state.users.email !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5} >\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <FormControl component=\"fieldset\">\r\n                                                            <Grid container className={classes.root} spacing={4} >\r\n                                                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                            <RadioGroup aria-label=\"gender\" name=\"gender\" value={this.state.users.gender} focused={(this.state.users && this.state.users.email !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} fullWidth>\r\n                                                                <Grid container className={classes.root} spacing={2}>\r\n                                                                    <Grid textAlign=\"left\" item xs={6}><FormControlLabel value=\"Female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                                                    <Grid item xs={6}><FormControlLabel value=\"Male\" control={<Radio />} label=\"Male\" /></Grid>\r\n                                                                </Grid>\r\n                                                            </RadioGroup>\r\n                                                        </FormControl></Grid>\r\n                                                    <Grid item xs={4}>\r\n                                                        <TextField\r\n                                                            fullWidth\r\n                                                            id=\"date\"\r\n                                                            label=\"Birthday\"\r\n                                                            name=\"dob\"\r\n                                                            type=\"date\"\r\n                                                            onChange={(e) => { this.updateChange(e) }}\r\n                                                            defaultValue=\"2017-05-24\"\r\n                                                            value={(this.state.users && this.state.users.dob !== null) ? this.state.users.dob : null}\r\n                                                            focused={(this.state.users && this.state.users.dob !== null) ? true : false}\r\n                                                            className={classes.textField}\r\n                                                            InputLabelProps={{\r\n                                                                shrink: true,\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        {\r\n                                                            (this.state.users.photo === null) ?\r\n                                                                <div>\r\n                                                                    <input\r\n                                                                        accept=\"image/*\"\r\n                                                                        className={classes.input}\r\n                                                                        id=\"contained-button-file\"\r\n                                                                        type=\"file\"\r\n                                                                        onChange={(e) => this.imgUpload(e)}\r\n                                                                        style={{ display: 'none' }}\r\n                                                                    />\r\n                                                                    <label htmlFor=\"contained-button-file\">\r\n                                                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                                                    </label>\r\n                                                                </div>\r\n                                                                :\r\n                                                                <div>\r\n                                                                    <Card className={classes.root}>\r\n                                                                        <CardContent>\r\n                                                                            <Grid container className={classes.root} spacing={5}>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <img src={this.state.users.photo} alt=\"User profile image\" width=\"35\" height=\"35\" />\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                                                        {this.state.uploadedImgName}\r\n                                                                                    </Typography>\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Button onClick={(e) => { this.removeImg(e) }}>\r\n                                                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                                </Grid>\r\n                                                                            </Grid>\r\n                                                                        </CardContent>\r\n                                                                    </Card>\r\n                                                                </div>\r\n                                                        }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"qualification\" label=\"Qualification\" variant=\"outlined\" value={(this.state.users && this.state.users.qualification !== null) ? this.state.users.qualification : null}\r\n                                                        focused={(this.state.users && this.state.users.qualification !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"last_organization\" label=\"Last Organization\" variant=\"outlined\" value={(this.state.users && this.state.users.last_organization !== null) ? this.state.users.last_organization : null}\r\n                                                        focused={(this.state.users && this.state.users.last_organization !== null) ? true : false} onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}>\r\n                                                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                                                            <Select\r\n                                                                labelId=\"demo-simple-select-outlined-label\"\r\n                                                                id=\"demo-simple-select-outlined\"\r\n                                                                label=\"Role\"\r\n                                                                onChange={(e) => { this.addRole(e) }}\r\n                                                                value={(this.state.users && this.state.users.roleName && this.state.users.roleName !== null) ? this.state.users.roleName : null}\r\n                                                                focused={(this.state.users && this.state.users.roleName && this.state.users.roleName !== null) ? true : false}\r\n                                                            >{roleOptions}\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={3}>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <LoadderButton btnType=\"button\" btnText=\"Edit User\" onClickFn={this.handleSubmit} />\r\n                                                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); this.props.history.push('/users') }}>Cancel</Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                            </form> */}\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item xs={6}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    } />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HandleUser1;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\AddLeaves.js",["472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../../Layouts/Header\";\r\nimport Footer from \"../../Layouts/Footer\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Breadcrumb from \"../../Layouts/Breadcrumb\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LoadderButton from \"../../Layouts/LoadderButton\";\r\nimport AuthApi from \"../../Services/Authapi\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FontAwesomeIconComponent from \"../../Layouts/FontAwesomeIconComponent\";\r\nimport { SignalCellularNull } from \"@material-ui/icons\";\r\nimport Authapi from \"../../Services/Authapi\";\r\nimport swal from \"sweetalert\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { now } from \"moment\";\r\nimport moment from \"moment\";\r\n\r\nconst inileaves = {\r\n  leaveName: \"\",\r\n  dateRange: \"\",\r\n  startDate: \"\",\r\n  endDate: \"\",\r\n  noOfDays: \"\",\r\n};\r\n\r\n// const inilea = {\r\n//     leaveName: \"dsfsd\",\r\n//     dateRange: [\"14-01-2021\",\"15-01-2021\"],\r\n//     // startDate: null,\r\n//     // endDate: null,\r\n//     noOfDays:2\r\n// }\r\n\r\nconst AddLeaves = (props) => {\r\n  const classes = props;\r\n  const [leaveValues, setLeaveValues] = useState(inileaves);\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props && props.authToken === false) {\r\n      props.history.push(\"/login\");\r\n    }\r\n  });\r\n\r\n  //   componentWillReceiveProps(props) {\r\n  //     if (props && props.authToken === false) {\r\n  //       props.history.push('/login');\r\n  //     }\r\n  //   }\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setLeaveValues({ ...leaveValues, [name]: value });\r\n  };\r\n\r\n  function dateDiffInDays(startDate, endDate) {\r\n    // round to the nearest whole number\r\n    return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n  }\r\n  const daysDiff = dateDiffInDays(\r\n    new Date(leaveValues.startDate),\r\n    new Date(leaveValues.endDate)\r\n  );\r\n  const dsp = dateDiffInDays(new Date(), new Date(leaveValues.startDate));\r\n\r\n  const validate = (values) => {\r\n    let errors = {};\r\n    const regex = /^[a-zA-Z]/;\r\n    const dateR =\r\n      /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n    if (!values.leaveName) {\r\n      errors.leaveName = \"Cannot be blank\";\r\n    } else if (!regex.test(values.leaveName)) {\r\n      errors.leaveName = \"Invalid firstName format\";\r\n    }\r\n\r\n    if (!values.startDate) {\r\n      errors.startDate = \"Cannot be  blank\";\r\n    } else if (!dateR.test(values.startDate)) {\r\n      errors.startDate = \"Invalid dob format\";\r\n    } else {\r\n      if (dsp < 0) {\r\n        errors.startDate = \"you can chooes only Current and future Date\";\r\n      }\r\n    }\r\n\r\n    if (!values.endDate) {\r\n      errors.endDate = \"Cannot be  blank\";\r\n    } else if (!dateR.test(values.endDate)) {\r\n      errors.endDate = \"Invalid dob format\";\r\n    } else {\r\n      if (daysDiff < 0) {\r\n        errors.endDate = \"you can chooes only Current and future Date\";\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormErrors(validate(leaveValues));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n      await createLeaves();\r\n    }\r\n  }, [formErrors]);\r\n\r\n  const createLeaves = async () => {\r\n    console.log(\"test\");\r\n    let create = await AuthApi.createHoliday(leaveValues);\r\n    console.log(create);\r\n\r\n    if (create && create.status === true) {\r\n      props.history.push(\"/leaves\");\r\n    } else {\r\n      swal({\r\n        title: \"OOPS!\",\r\n        icon: \"fail\",\r\n        message: \"Something went wrong, Please try later!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  function diffday() {\r\n    const a = moment(leaveValues.startDate);\r\n    const b = moment(leaveValues.endDate);\r\n    const dateRangeArr = [];\r\n\r\n    // if(e.target.name == \"startDate\"){\r\n    var startDate = leaveValues.startDate;\r\n    dateRangeArr.push(startDate);\r\n    // }\r\n    // if(e.target.name == \"endDate\"){\r\n    var endDate = leaveValues.endDate;\r\n    dateRangeArr.push(endDate);\r\n    // }\r\n\r\n    leaveValues.dateRange = dateRangeArr;\r\n    leaveValues.noOfDays = b.diff(a, \"days\");\r\n  }\r\n  // console.log(leaveValues);\r\n\r\n  // function convertDate(userDate) {\r\n  //     var date = userDate;\r\n  //     var newdate = date.split(\"-\").reverse().join(\"-\");\r\n  //     return newdate;\r\n  // }\r\n\r\n  //   console.log(convertDate(todaysDate)); // Returns: 2015-08-25\r\n\r\n  return (\r\n    <div>\r\n      <Header\r\n        {...props}\r\n        authUser={props.authUser}\r\n        component={\r\n          <div>\r\n            <Card className={classes.root} style={{ marginBottom: \"3%\" }}>\r\n              <CardContent>\r\n                <Breadcrumb\r\n                  {...props}\r\n                  primaryPageName=\"Leaves\"\r\n                  primaryPageLink=\"/leaves\"\r\n                  isSecondaryPage={true}\r\n                  secondaryPageName=\"Add Leave\"\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n            <Grid container className={classes.root} spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Card className={classes.root}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h2\">Add leave</Typography>\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                      <Grid container className={classes.root} spacing={5}>\r\n                        <Grid item xs={3}>\r\n                          <TextField\r\n                            fullWidth\r\n                            id=\"leaveName\"\r\n                            name=\"leaveName\"\r\n                            label=\"LeaveName\"\r\n                            variant=\"outlined\"\r\n                            error={formErrors.leaveName && true}\r\n                            value={leaveValues.leaveName}\r\n                            onChange={handleChange}\r\n                            className={formErrors.leaveName && \"input-error\"}\r\n                          />\r\n                          {formErrors.leaveName && (\r\n                            <span className=\"error\">\r\n                              {formErrors.leaveName}\r\n                            </span>\r\n                          )}\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                          <TextField\r\n                            fullWidth\r\n                            id=\"date\"\r\n                            variant=\"outlined\"\r\n                            label=\"Start-date\"\r\n                            name=\"startDate\"\r\n                            type=\"date\"\r\n                            error={formErrors.startDate && true}\r\n                            value={leaveValues.startDate}\r\n                            onChange={handleChange}\r\n                            className={formErrors.startDate && \"input-error\"}\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                          />\r\n                          {formErrors.startDate && (\r\n                            <span className=\"error\">\r\n                              {formErrors.startDate}\r\n                            </span>\r\n                          )}\r\n                        </Grid>\r\n                        <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                        <Grid item xs={4}>\r\n                          <TextField\r\n                            fullWidth\r\n                            id=\"date\"\r\n                            variant=\"outlined\"\r\n                            label=\"End-date\"\r\n                            name=\"endDate\"\r\n                            type=\"date\"\r\n                            error={formErrors.endDate && true}\r\n                            value={leaveValues.endDate}\r\n                            onChange={handleChange}\r\n                            className={formErrors.endDate && \"input-error\"}\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                          />\r\n                          {formErrors.endDate && (\r\n                            <span className=\"error\">{formErrors.endDate}</span>\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container className={classes.root} spacing={3}>\r\n                        <Grid item xs={4} style={{ display: \"flex\" }}>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            onClick={(e) => {\r\n                              diffday();\r\n                            }}\r\n                            style={{ marginTop: \"10px\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                          >\r\n                            Save\r\n                          </Button>\r\n                          <Button\r\n                            type=\"button\"\r\n                            style={{ marginTop: \"10px\" }}\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              props.history.push(\"/leaves\");\r\n                            }}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                        <Grid item xs={4}></Grid>\r\n                      </Grid>\r\n                    </form>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={6}></Grid>\r\n            </Grid>\r\n          </div>\r\n        }\r\n      />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddLeaves;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\EditEvent.js",["494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\n\r\n\r\nconst iniEvent = {\r\n    eventName: \"\",\r\n    eventdate: \"\",\r\n    event_Id: 0,\r\n}\r\n\r\n\r\nconst EditTicket = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(iniEvent);\r\n    const [selectedImages, setSelectedImages] = useState([]);\r\n    const [apiImages, setApiImages] = useState({ images: [] })\r\n    const [stringImages, setStringImages] = useState({ images: [] });\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        // console.log(editValues);\r\n    }\r\n\r\n\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!values.eventName) {\r\n            errors.eventName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.eventName)) {\r\n            errors.eventName = \"Invalid ticketMesasge format\";\r\n        }\r\n\r\n        if (!values.eventdate) {\r\n            errors.eventdate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.eventdate)) {\r\n            errors.eventdate = \"Invalid dob format\"\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const getEventData = async () => {\r\n        let eventId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        \r\n        let event = await AuthApi.singleEvent(eventId);\r\n      \r\n        let event_Id = eventId\r\n\r\n        let eventName = (event.status === true && event.data && event.data.name && (event.data.name !== null || event.data.name !== false)) ? event.data.name : null;\r\n        let eventdate = (event.status === true && event.data && event.data.date) ? event.data.date : null;\r\n        let images = (event.status === true && event.data && event.data.images) ? event.data.images : null;\r\n       \r\n        let ds = JSON.parse(images)\r\n        \r\n\r\n\r\n        setEditValues({\r\n            eventName: eventName,\r\n            eventdate: eventdate,\r\n            event_Id: event_Id,\r\n\r\n\r\n        });\r\n\r\n\r\n        setApiImages({\r\n            images: ds\r\n        })\r\n        // stringImages.images.push(selectedImages)\r\n        // console.log(stringImages)\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getEventData(),\r\n                500), []);\r\n\r\n\r\n    const imageHandleChange = (e) => {\r\n        const files = e.target.files\r\n        const stringFiles = [];\r\n        if (e.target.files) {\r\n            for (let i = 0; i < files.length; i++) {\r\n                const reader = new FileReader();\r\n                reader.onloadend = () => {\r\n                    stringFiles.push(reader.result.replace(\"data:\", \"\").replace(/^.+,/, \"\"));\r\n                };\r\n                reader.readAsDataURL(files[i]);\r\n            }\r\n\r\n            const fileArray1 = Array.from(e.target.files).map((file) => URL.createObjectURL(file))\r\n            setSelectedImages((prevImages) => prevImages.concat(fileArray1))\r\n            setStringImages({ ...stringImages, images: stringFiles });\r\n\r\n\r\n            Array.from(e.target.files).map(\r\n                (file) => URL.revokeObjectURL(file)\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderPhotos = (source) => {\r\n        return source.map((photo, index) => {\r\n            // stringImages.images.push(selectedImages)\r\n            return <div key={Math.random()} style={{ float: \"left\" }}>\r\n                <img src={photo} key={photo} alt=\"User profile image\" style={{ padding: \"20px\" }} width=\"200px\" height=\"200px\" />\r\n                <Button style={{ marginTop: \"-20rem\" }} onClick={(e) => { removeImage(index) }}>x</Button>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    const renderApiPhotos = (source) => {\r\n        return source.map((photo, index) => {\r\n            // stringImages.images.push(selectedImages)\r\n            return <div key={Math.random()} style={{ float: \"left\" }}>\r\n                <img src={photo} key={photo} alt=\"Event Pictures\" style={{ padding: \"20px\" }} width=\"200px\" height=\"200px\" />\r\n                <Button style={{ marginTop: \"-20rem\" }} onClick={(e) => { removeApiImage(index) }}>x</Button>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    const removeImage = async (e) => {\r\n        const stringImages1 = stringImages.images\r\n        const selectedImages1 = selectedImages\r\n        stringImages1.splice(e, 1)\r\n        selectedImages1.splice(e, 1)\r\n\r\n\r\n        setSelectedImages((prevImages) => prevImages = selectedImages1)\r\n        setStringImages({ ...stringImages, images: stringImages1 });\r\n    }\r\n\r\n    const removeApiImage = async (e) => {\r\n\r\n        let eventId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        const image = await AuthApi.imageRemove(eventId, e)\r\n        console.log(image);\r\n\r\n        const stringImages1 = apiImages.images\r\n        stringImages1.splice(e, 1)\r\n\r\n\r\n        setApiImages({ ...apiImages, images: stringImages1 });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await editEvent();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n\r\n\r\n    const editEvent = async (id) => {\r\n        let status = await AuthApi.updateEvent(editValues, editValues.event_Id, stringImages.images);\r\n        console.log(status);\r\n        if (status && status.status === true) {\r\n            props.history.push('/event');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Event\"\r\n                                    primaryPageLink=\"/event\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit Event</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"EventName\"\r\n                                                        name=\"eventName\"\r\n                                                        label=\"Event-Name\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.eventName && true}\r\n                                                        value={(editValues && editValues.eventName !== null) ? editValues.eventName : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.eventName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.eventName && (\r\n                                                        <span className=\"error\">{formErrors.eventName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Event-Date\"\r\n                                                        name=\"eventdate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.eventdate && true}\r\n                                                        value={(editValues && editValues.eventdate !== null) ? editValues.eventdate : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.eventdate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.eventdate && (\r\n                                                        <span className=\"error\">{formErrors.eventdate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={12} style={{ display: 'flex' }} >\r\n\r\n                                                    <div>\r\n                                                        <input\r\n                                                            accept=\"image/*\"\r\n                                                            // className={classes.input}\r\n                                                            id=\"contained-button-file\"\r\n                                                            multiple\r\n                                                            type=\"file\"\r\n                                                            onChange={(e) => { imageHandleChange(e) }}\r\n                                                            style={{ display: 'none' }}\r\n                                                        />\r\n                                                        <label htmlFor=\"contained-button-file\">\r\n                                                            <Button style={{ float: \"left\" }} variant=\"contained\" color=\"primary\" component=\"span\" > Upload Event Picture </Button>\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={12}>\r\n                                                    <div style={{ float: \"left\" }}>\r\n                                                        <Card className={classes.root}>\r\n                                                            <Grid item xs={12}>\r\n                                                                {renderApiPhotos(apiImages.images)}\r\n                                                                {renderPhotos(selectedImages)}\r\n\r\n                                                            </Grid>\r\n                                                        </Card>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Edit</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/event') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTicket;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\AddUpcomingEvent.js",["520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { colors, TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\n\r\n\r\nconst iniEvent = {\r\n    upcomingEventName: \"\",\r\n    upcomingEventdate: \"\",\r\n    description: \"\",\r\n    image: null\r\n}\r\n\r\n\r\nconst UpcomingEvent = (props) => {\r\n    const classes = props;\r\n\r\n    const [eventValues, setEventsValues] = useState(iniEvent);\r\n    // const [selectedImages, setSelectedImages] = useState({ image: null });\r\n    // const [stringImages, setStringImages] = useState({ images: [] });\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEventsValues({ ...eventValues, [name]: value });\r\n\r\n\r\n        // console.log(selectedImages);\r\n    };\r\n\r\n\r\n    const uploadSingleFile = async (e) => {\r\n        const postData = new FormData();\r\n        postData.append('file', e.target.files[0]);\r\n        // console.log(postData);\r\n        let updaImg = await AuthApi.uploadEventImg(postData);\r\n        // console.log(updaImg)\r\n        if (updaImg && updaImg.status === true) {\r\n\r\n            setEventsValues({\r\n                ...eventValues,\r\n                image: updaImg.data.image_url,\r\n                // imageName: updaImg.data.image_name\r\n            })\r\n\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const removeImg = async (e) => {\r\n        let imageLink = eventValues.image;\r\n        imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n        let remImg = await AuthApi.upcomingdeleteImg(imageLink);\r\n        console.log(remImg)\r\n        if (remImg && remImg.status === true) {\r\n            setEventsValues({\r\n                ...eventValues,\r\n                image: null,\r\n                // imageName: null\r\n            })\r\n\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // const removeImage = (e) => {\r\n    //     const stringImages1 = stringImages.images\r\n    //     const selectedImages1 = selectedImages\r\n    //     stringImages1.splice(e, 1)\r\n    //     selectedImages1.splice(e, 1)\r\n\r\n\r\n    //     setSelectedImages((prevImages) => prevImages = selectedImages1)\r\n    //     setStringImages({ ...stringImages, images: stringImages1 });\r\n    // }\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n\r\n    const dsp = dateDiffInDays(new Date(), new Date(eventValues.upcomingEventdate))\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!values.upcomingEventName) {\r\n            errors.upcomingEventName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.upcomingEventName)) {\r\n            errors.upcomingEventName = \"Invalid upcomingEventName format\";\r\n        }\r\n\r\n        if (!values.upcomingEventdate) {\r\n            errors.upcomingEventdate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.upcomingEventdate)) {\r\n            errors.upcomingEventdate = \"Invalid upcomingEventdate format\"\r\n        }\r\n        else {\r\n\r\n\r\n            if (dsp < 0) {\r\n                errors.upcomingEventdate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n\r\n        if (!values.description) {\r\n            errors.description = \"Cannot be  blank\";\r\n        } else if (!regex.test(values.description)) {\r\n            errors.description = \"Invalid description format\"\r\n        }\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(eventValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await upcomingEvent();\r\n        }\r\n    }, [formErrors])\r\n\r\n\r\n\r\n\r\n    const upcomingEvent = async () => {\r\n\r\n        let create1 = await AuthApi.createUpcomingEvent(eventValues);\r\n        console.log(create1)\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/upcoming');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Upcoming Events\"\r\n                                    primaryPageLink=\"/upcoming\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add Upcomming Event\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Upcomming Event</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"upcomingEventName\"\r\n                                                        name=\"upcomingEventName\"\r\n                                                        label=\"Event Name\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.upcomingEventName && true}\r\n                                                        value={eventValues.upcomingEventName}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.upcomingEventName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.upcomingEventName && (\r\n                                                        <span className=\"error\">{formErrors.upcomingEventName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Event Date\"\r\n                                                        name=\"upcomingEventdate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.upcomingEventdate && true}\r\n                                                        value={eventValues.upcomingEventdate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.upcomingEventdate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.upcomingEventdate && (\r\n                                                        <span className=\"error\">{formErrors.upcomingEventdate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={6}>\r\n                                                    <TextareaAutosize\r\n                                                        style={{ float: 'left', width: \"100%\" }}\r\n                                                        aria-label=\"empty textarea\"\r\n                                                        placeholder=\"Event Details\"\r\n                                                        name=\"description\"\r\n                                                        error={formErrors.description && true}\r\n                                                        className={formErrors.description && \"input-error\"}\r\n                                                        rowsMin={3}\r\n                                                        className={classes.textField}\r\n                                                        value={eventValues.description}\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                    {formErrors.description && (\r\n                                                        <span className=\"error\">{formErrors.description}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={6} style={{ display: 'flex' }} >\r\n\r\n                                                    {\r\n                                                        (eventValues.image === null) ?\r\n                                                            <div>\r\n                                                                <input\r\n                                                                    accept=\"image/*\"\r\n                                                                    className={classes.input}\r\n                                                                    name=\"photo\"\r\n                                                                    id=\"contained-button-file\"\r\n                                                                    type=\"file\"\r\n                                                                    onChange={(e) => uploadSingleFile(e)}\r\n                                                                    style={{ display: 'none' }}\r\n                                                                />\r\n                                                                <label htmlFor=\"contained-button-file\">\r\n                                                                    <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Event Picture </Button>\r\n                                                                </label>\r\n                                                            </div>\r\n                                                            :\r\n                                                            <div>\r\n                                                                <Card className={classes.root}>\r\n                                                                    <CardContent style={{ width: \"550px\" }}>\r\n                                                                        <Grid container className={classes.root} spacing={5}>\r\n                                                                            <Grid item xs={6}>\r\n                                                                                <img src={eventValues.image} alt=\"Event image\" width=\"100%\" height=\"100%\" />\r\n                                                                            </Grid>\r\n                                                                            <input\r\n                                                                                className={classes.input}\r\n                                                                                name=\"photo\"\r\n                                                                                id=\"photo\"\r\n                                                                                type=\"hidden\"\r\n                                                                                value={eventValues.image ? eventValues.image : \"\"}\r\n                                                                            />\r\n                                                                            <Grid item xs={6}>\r\n                                                                                <Button style={{ marginTop: \"70px\" }}\r\n                                                                                    onClick={(e) => removeImg(e)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                            </Grid>\r\n                                                                        </Grid>\r\n                                                                    </CardContent>\r\n                                                                </Card>\r\n                                                            </div>\r\n                                                    }\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            {/* <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={6}>\r\n                                                    <div style={{ float: \"left\" }}>\r\n                                                        <Card className={classes.root}>\r\n                                                            <Grid item xs={12}>\r\n                                                                <div>\r\n                                                                    <img src={eventValues.image} alt=\"Event image\" width=\"100\" height=\"100\" />\r\n                                                                </div>\r\n                                                            </Grid>\r\n                                                        </Card>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid> */}\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/upcoming') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UpcomingEvent;\r\n\r\n\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Experience\\ExperienceList.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Qulification\\AddQulification.js",["548","549","550","551","552","553","554","555","556","557","558"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\n\r\nconst inivalue = {\r\n    qulification: \"\"\r\n}\r\n\r\nconst AddQulification = (props) => {\r\n    const classes = props;\r\n    const [qulifi, setQulifi] = useState(inivalue);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setQulifi({ ...qulifi, [name]: value });\r\n        // console.log(ticketValues);\r\n    };\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const ds = /^[0-9\\b]+$/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.qulification) {\r\n            errors.qulification = \"Cannot be blank\";\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(qulifi));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await qulification();\r\n        }\r\n    }, [formErrors])\r\n\r\n\r\n    const qulification = async () => {\r\n\r\n        let create = await AuthApi.createQulification(qulifi);\r\n        if (create && create.status === true) {\r\n            props.history.push('/qulification');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Qulification\"\r\n                                    primaryPageLink=\"/qulification\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add Qulification\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Qulification</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"Qulification\"\r\n                                                        name=\"qulification\"\r\n                                                        label=\"Qulification\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.qulification && true}\r\n                                                        value={qulifi.qulification}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.qulification && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.qulification && (\r\n                                                        <span className=\"error\">{formErrors.qulification}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/qulification') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddQulification;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UserCheck\\Check.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Documents\\Offer.js",["559","560","561","562","563","564","565","566"],"import React, { useState, useEffect } from 'react'\r\nimport Header from '../../Layouts/Header'\r\nimport Footer from '../../Layouts/Footer';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Grid } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport pdfMake from 'pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\n\r\n\r\n\r\n\r\nlet userData;\r\n\r\nconst iniDoc = {\r\n    candidateName: \"\",\r\n    designation: \"\",\r\n    doj: \"\",\r\n    monthlySalary: \"\",\r\n    location: \"\",\r\n\r\n}\r\n\r\nconst iniData = {\r\n    userData: [],\r\n}\r\n\r\nconst Offer = (props) => {\r\n    const classes = props;\r\n    const [doc, setDoc] = useState(iniDoc);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [formvalue, setFormvalue] = useState(iniData)\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setDoc({ ...doc, [name]: value });\r\n    };\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dobRegx = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n        const Numeric = /^\\d+$/;\r\n\r\n\r\n        if (!values.candidateName) {\r\n            errors.candidateName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.candidateName)) {\r\n            errors.candidateName = \"Invalid candidateName format\";\r\n        }\r\n\r\n        if (!values.designation) {\r\n            errors.designation = \"Cannot be blank\";\r\n        } else if (!regex.test(values.designation)) {\r\n            errors.designation = \"Invalid designation format\";\r\n        }\r\n\r\n        if (!values.doj) {\r\n            errors.doj = \"Cannot be blank\";\r\n        } else if (!dobRegx.test(values.doj)) {\r\n            errors.doj = \"Invalid dateOfJoining format\";\r\n        }\r\n\r\n        if (!values.monthlySalary) {\r\n            errors.monthlySalary = \"Cannot be blank\";\r\n        } else if (!Numeric.test(values.monthlySalary)) {\r\n            errors.monthlySalary = \"Must Be Numeric\"\r\n        }\r\n\r\n        if (!values.location) {\r\n            errors.location = \"Cannot be blank\";\r\n        } else if (!regex.test(values.location)) {\r\n            errors.location = \"Invalid location format\"\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(doc));\r\n        setIsSubmitting(true);\r\n\r\n        // console.log(props.history.replace({ state: { doc: doc } }));\r\n\r\n        console.log(doc)\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            generatePdf();\r\n\r\n            // setDoc({\r\n            //     candidateName: '',\r\n            //     designation: '',\r\n            //     doj: '',\r\n            //     monthlySalary: '',\r\n            //     location: '',\r\n            // })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // var ds = \"Dhaval\"\r\n    // console.log(ds)\r\n    // ds = doc.candidateName\r\n    // console.log(ds)\r\n\r\n\r\n\r\n    const generatePdf = () => {\r\n        // setFormErrors({\r\n        //     doc\r\n        // })\r\n\r\n        var dd = {\r\n            \"content\": [\r\n                {\r\n                    \"nodeName\": \"TABLE\",\r\n                    \"table\": {\r\n                        \"body\": [\r\n                            [\r\n                                {\r\n                                    \"nodeName\": \"TH\",\r\n                                    \"stack\": [\r\n                                        {\r\n                                            \"text\": \"Cherrypik Software Inc.\",\r\n                                            \"nodeName\": \"H1\",\r\n                                            \"bold\": true,\r\n                                            \"fillColor\": \"#356631\",\r\n                                            \"alignment\": \"center\",\r\n                                            \"color\": \"white\",\r\n                                            \"fontSize\": 24,\r\n                                            \"marginBottom\": 5,\r\n                                            \"style\": [\r\n                                                \"html-h1\",\r\n                                                \"html-th\",\r\n                                                \"html-tr\",\r\n                                                \"html-tbody\",\r\n                                                \"html-table\"\r\n                                            ]\r\n                                        },\r\n                                        {\r\n                                            \"text\": \"Offer-Later\",\r\n                                            \"nodeName\": \"H2\",\r\n                                            \"bold\": true,\r\n                                            \"fillColor\": \"#356631\",\r\n                                            \"alignment\": \"center\",\r\n                                            \"color\": \"white\",\r\n                                            \"fontSize\": 22,\r\n                                            \"marginBottom\": 5,\r\n                                            \"style\": [\r\n                                                \"html-h2\",\r\n                                                \"html-th\",\r\n                                                \"html-tr\",\r\n                                                \"html-tbody\",\r\n                                                \"html-table\"\r\n                                            ]\r\n                                        }\r\n                                    ],\r\n                                    \"colSpan\": 16,\r\n                                    \"bold\": true,\r\n                                    \"fillColor\": \"#356631\",\r\n                                    \"alignment\": \"center\",\r\n                                    \"color\": \"white\",\r\n                                    \"style\": [\r\n                                        \"html-th\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                }\r\n                            ],\r\n                            [\r\n                                {\r\n                                    \"nodeName\": \"TD\",\r\n                                    \"stack\": [\r\n                                        {\r\n                                            \"text\": \"Offer-Later\",\r\n                                            \"nodeName\": \"H6\",\r\n                                            \"alignment\": \"center\",\r\n                                            \"fontSize\": 14,\r\n                                            \"bold\": true,\r\n                                            \"marginBottom\": 5,\r\n                                            \"style\": [\r\n                                                \"html-h6\",\r\n                                                \"html-td\",\r\n                                                \"html-tr\",\r\n                                                \"html-tbody\",\r\n                                                \"html-table\"\r\n                                            ]\r\n                                        }\r\n                                    ],\r\n                                    \"colSpan\": 16,\r\n                                    \"alignment\": \"center\",\r\n                                    \"style\": [\r\n                                        \"html-td\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                }\r\n                            ],\r\n                            [\r\n                                {\r\n                                    \"text\": \"Candidate name\",\r\n                                    \"nodeName\": \"TH\",\r\n                                    \"bold\": true,\r\n                                    \"fillColor\": \"#b5d59b\",\r\n                                    \"width\": 151,\r\n                                    \"style\": [\r\n                                        \"html-th\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": doc.candidateName,\r\n                                    \"nodeName\": \"TD\",\r\n                                    \"style\": [\r\n                                        \"html-td\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                }\r\n                            ],\r\n                            [\r\n                                {\r\n                                    \"text\": \"Designation\",\r\n                                    \"nodeName\": \"TH\",\r\n                                    \"bold\": true,\r\n                                    \"fillColor\": \"#b5d59b\",\r\n                                    \"style\": [\r\n                                        \"html-th\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": doc.designation,\r\n                                    \"nodeName\": \"TD\",\r\n                                    \"style\": [\r\n                                        \"html-td\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                }\r\n                            ],\r\n                            [\r\n                                {\r\n                                    \"text\": \"Date of Join\",\r\n                                    \"nodeName\": \"TH\",\r\n                                    \"bold\": true,\r\n                                    \"fillColor\": \"#b5d59b\",\r\n                                    \"style\": [\r\n                                        \"html-th\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": doc.doj,\r\n                                    \"nodeName\": \"TD\",\r\n                                    \"style\": [\r\n                                        \"html-td\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                }\r\n                            ],\r\n                            [\r\n                                {\r\n                                    \"text\": \"Monthly Salary\",\r\n                                    \"nodeName\": \"TH\",\r\n                                    \"bold\": true,\r\n                                    \"fillColor\": \"#b5d59b\",\r\n                                    \"style\": [\r\n                                        \"html-th\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": doc.monthlySalary,\r\n                                    \"nodeName\": \"TD\",\r\n                                    \"style\": [\r\n                                        \"html-td\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                }\r\n                            ],\r\n                            [\r\n                                {\r\n                                    \"text\": \"Location\",\r\n                                    \"nodeName\": \"TH\",\r\n                                    \"bold\": true,\r\n                                    \"fillColor\": \"#b5d59b\",\r\n                                    \"style\": [\r\n                                        \"html-th\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": doc.location,\r\n                                    \"nodeName\": \"TD\",\r\n                                    \"style\": [\r\n                                        \"html-td\",\r\n                                        \"html-tr\",\r\n                                        \"html-tbody\",\r\n                                        \"html-table\"\r\n                                    ],\r\n                                    \"colSpan\": 8\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                },\r\n                                {\r\n                                    \"text\": \"\"\r\n                                }\r\n                            ]\r\n                        ],\r\n                        \"widths\": [\r\n                            18.875,\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\"\r\n                        ],\r\n                        \"heights\": [\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\",\r\n                            \"auto\"\r\n                        ]\r\n                    },\r\n                    \"marginBottom\": 5,\r\n                    \"style\": [\r\n                        \"html-table\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"styles\": {\r\n                \"green\": {\r\n                    \"color\": \"green\"\r\n                }\r\n            }\r\n        }\r\n\r\n        pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n        pdfMake.createPdf(dd).open();\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Generate Documents\"\r\n                                    primaryPageLink=\"/offer\"\r\n                                    isSecondaryPage={false}\r\n                                    secondaryPageName=\"\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\" style={{ paddingLeft: 5 }}>Generate Documents</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} id=\"create-course-form\" >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"Candidatename\"\r\n                                                        name=\"candidateName\"\r\n                                                        label=\"Candidate Name\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.candidateName && true}\r\n                                                        value={doc.candidateName}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.candidateName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.candidateName && (\r\n                                                        <span className=\"error\">{formErrors.candidateName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"Designation\"\r\n                                                        name=\"designation\"\r\n                                                        label=\"Designation\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.designation && true}\r\n                                                        value={doc.designation}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.designation && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.designation && (\r\n                                                        <span className=\"error\">{formErrors.designation}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Date of Join\"\r\n                                                        name=\"doj\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.doj && true}\r\n                                                        value={doc.doj}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.doj && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.doj && (\r\n                                                        <span className=\"error\">{formErrors.doj}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"monthlySalary\"\r\n                                                        name=\"monthlySalary\"\r\n                                                        label=\"Monthly Salary\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.monthlySalary && true}\r\n                                                        value={doc.monthlySalary}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.monthlySalary && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.monthlySalary && (\r\n                                                        <span className=\"error\">{formErrors.monthlySalary}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"location\"\r\n                                                        name=\"location\"\r\n                                                        label=\"Location\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.location && true}\r\n                                                        value={doc.location}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.location && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.location && (\r\n                                                        <span className=\"error\">{formErrors.location}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/dashboard') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Offer;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Testing\\testing.js",["567","568"],"import React from \"react\";\r\nimport { useStopwatch } from \"react-timer-hook\";\r\n\r\nfunction Testing() {\r\n  const { seconds, minutes, hours, isRunning, start, pause, reset } =\r\n    useStopwatch({ autoStart: false });\r\n\r\n  const formatTime = (time) => {\r\n    return String(time).padStart(2, \"0\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h1>react-timer-hook</h1>\r\n      <p>Stopwatch Demo</p>\r\n      <div\r\n        style={{\r\n          fontSize: \"80px\",\r\n        }}\r\n      >\r\n        <span>{formatTime(hours)}</span>:<span>{formatTime(minutes)}</span>:\r\n        <span>{formatTime(seconds)}</span>\r\n      </div>\r\n\r\n      <button onClick={start}>In</button>\r\n      <button onClick={pause}>Out</button>\r\n      {/* <button onClick={reset}>Reset</button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Testing;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\DropdownComponent.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Filter\\Tableforfilter.js",["569","570","571","572","573","574","575"],"import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@mui/material/Box\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport { useDemoData } from \"@mui/x-data-grid-generator\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport CancelPresentationIcon from \"@mui/icons-material/CancelPresentation\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { useEffect } from \"react\";\r\nimport Authapi from \"../../Services/Authapi\";\r\nimport { useState } from \"react\";\r\nimport \"./tablefilter.css\";\r\n\r\nconst Tableforfilter = () => {\r\n  const [totalDurationTime, setTotalDurationTime] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let today = new Date();\r\n    let month = today.getMonth() + 1;\r\n    let year = today.getFullYear();\r\n\r\n    Authapi.getAttandance(month, year).then((data) =>\r\n      setTotalDurationTime(data.data)\r\n    );\r\n  }, []);\r\n\r\n  let row = totalDurationTime.map((item) => ({\r\n    date: item.date,\r\n    hours: item.hours,\r\n    attendance: item.attendance,\r\n    dayType: item.dayType,\r\n  }));\r\n\r\n  const { data } = useDemoData({\r\n    dataSet: \"\",\r\n    rowLength: 10,\r\n    maxColumns: 10,\r\n  });\r\n\r\n  const handleMonthChange = async (e) => {\r\n    let select = e.target.value;\r\n    let ds = new Date(select);\r\n\r\n    let month = ds.getMonth() + 1;\r\n    let year = ds.getFullYear();\r\n    const attr = await Authapi.getAttandance(month, year);\r\n\r\n    if (attr && attr.status === true) {\r\n      setTotalDurationTime(attr.data);\r\n    }\r\n  };\r\n\r\n  var month = new Array();\r\n  month[0] = \"01\";\r\n  month[1] = \"02\";\r\n  month[2] = \"03\";\r\n  month[3] = \"04\";\r\n  month[4] = \"05\";\r\n  month[5] = \"06\";\r\n  month[6] = \"07\";\r\n  month[7] = \"08\";\r\n  month[8] = \"09\";\r\n  month[9] = \"10\";\r\n  month[10] = \"11\";\r\n  month[11] = \"12\";\r\n\r\n  var d = new Date();\r\n  var dateString = d.getFullYear() + \"-\" + month[d.getMonth()];\r\n\r\n  const columns = [\r\n    { field: \"date\", headerName: \"Date\", flex: 1 },\r\n    { field: \"hours\", headerName: \"Hours / Min\", flex: 1 },\r\n    { field: \"attendance\", headerName: \"Attendance\", flex: 1 },\r\n    { field: \"dayType\", headerName: \"Day-Type\", flex: 1 },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"flex-end\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <TextField\r\n          id=\"datetime-local\"\r\n          label=\"Select Month/Year\"\r\n          views={[\"year\", \"month\"]}\r\n          variant=\"outlined\"\r\n          defaultValue={dateString}\r\n          type=\"Month\"\r\n          onChange={handleMonthChange}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          inputProps={{ min: \"2020-01\", max: dateString }}\r\n        />\r\n      </div>\r\n      <>\r\n        <Box sx={{ height: 400, width: 1 }}>\r\n          <DataGrid\r\n            {...data}\r\n            columns={columns}\r\n            rows={totalDurationTime}\r\n            components={{\r\n              Toolbar: GridToolbar,\r\n            }}\r\n          />\r\n        </Box>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tableforfilter;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\UserForms\\AddForm.js",["576","577","578","579","580","581","582","583","584","585","586"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./AddForm.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AuthApi from \"../../../Services/Authapi\";\r\nimport swal from \"sweetalert\";\r\nimport ls from \"local-storage\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FontAwesomeIconComponent from \"../../../Layouts/FontAwesomeIconComponent\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    border: \"1px solid rgba(0, 0, 0, .125)\",\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst iniuservalid = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  gender: \"\",\r\n  dob: \"\",\r\n  photo: null,\r\n  imageName: \"\",\r\n  qualification: \"\",\r\n  last_organization: \"\",\r\n  password: \"\",\r\n  roleName: \"\",\r\n  salary: \"\",\r\n  mobileNo: \"\",\r\n  bankName: \"\",\r\n  bankAccNo: \"\",\r\n  doj: \"\",\r\n  location: \"\",\r\n  department: \"\",\r\n  designation: \"\",\r\n  role: false,\r\n};\r\n\r\nconst Addform = (props) => {\r\n  const styles = useStyles();\r\n  const classes = props;\r\n  const [roleOptions] = React.useState([]);\r\n  const [formValues, setFormValues] = useState(iniuservalid);\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const submitForm = () => {\r\n    console.log(formValues);\r\n  };\r\n\r\n  const handleChange1 = (e) => {\r\n    const { name, value } = e.target;\r\n    // console.log(value);\r\n    setFormValues({ ...formValues, [name]: value });\r\n    console.log(formValues);\r\n  };\r\n\r\n  const validate = (values) => {\r\n    let errors = {};\r\n    const regex = /^[a-zA-Z]/;\r\n    const emailRegx =\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const dobRegx =\r\n      /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n    const passRegx = /^[#\\w@_-]{8,20}$/;\r\n    const Numeric = /^\\d+$/;\r\n    const phone = /^[0-9]{10}$/;\r\n\r\n    if (!values.firstName) {\r\n      errors.firstName = \"Cannot be blank\";\r\n    } else if (!regex.test(values.firstName)) {\r\n      errors.firstName = \"Invalid firstName format\";\r\n    }\r\n\r\n    if (!values.lastName) {\r\n      errors.lastName = \"Cannot be blank\";\r\n    } else if (!regex.test(values.lastName)) {\r\n      errors.lastName = \"Invalid lastName format\";\r\n    }\r\n\r\n    if (!values.email) {\r\n      errors.email = \"Cannot be  blank\";\r\n    } else if (!emailRegx.test(values.email)) {\r\n      errors.email = \"Invalid email format\";\r\n    }\r\n\r\n    if (!values.dob) {\r\n      errors.dob = \"Cannot be  blank\";\r\n    } else if (!dobRegx.test(values.dob)) {\r\n      errors.dob = \"Invalid dob format\";\r\n    }\r\n\r\n    if (!values.qualification) {\r\n      errors.qualification = \"Cannot be blank\";\r\n    } else if (!regex.test(values.qualification)) {\r\n      errors.qualification = \"Invalid qualification format\";\r\n    }\r\n\r\n    if (!values.last_organization) {\r\n      errors.last_organization = \"Cannot be blank\";\r\n    } else if (!regex.test(values.last_organization)) {\r\n      errors.last_organization = \"Invalid last_organization format\";\r\n    }\r\n\r\n    if (!values.password) {\r\n      errors.password = \"Cannot be blank\";\r\n    } else if (!passRegx.test(values.password)) {\r\n      errors.password = \"Password must be require\";\r\n    }\r\n\r\n    if (!values.roleName) {\r\n      errors.roleName = \"Cannot be blank\";\r\n    }\r\n\r\n    if (!values.salary) {\r\n      errors.salary = \"Cannot be blank\";\r\n    } else if (!Numeric.test(values.salary)) {\r\n      errors.salary = \"Must Be Numeric\";\r\n    }\r\n\r\n    if (!values.salary) {\r\n      errors.salary = \"Cannot be blank\";\r\n    } else if (!Numeric.test(values.salary)) {\r\n      errors.salary = \"Must Be Numeric\";\r\n    }\r\n\r\n    if (!values.mobileNo) {\r\n      errors.mobileNo = \"Cannot be blank\";\r\n    } else if (!phone.test(values.mobileNo)) {\r\n      errors.mobileNo = \"Must Be Numeric and 10 digit Fix \";\r\n    }\r\n\r\n    if (!values.bankName) {\r\n      errors.bankName = \"Cannot be blank\";\r\n    } else if (!regex.test(values.bankName)) {\r\n      errors.bankName = \"Please Enter Your bank Name\";\r\n    }\r\n\r\n    if (!values.bankAccNo) {\r\n      errors.bankAccNo = \"Cannot be blank\";\r\n    } else if (!Numeric.test(values.bankAccNo)) {\r\n      errors.bankAccNo = \"Must Be Numeric \";\r\n    }\r\n\r\n    if (!values.doj) {\r\n      errors.doj = \"Cannot be  blank\";\r\n    } else if (!dobRegx.test(values.doj)) {\r\n      errors.doj = \"Invalid dob format\";\r\n    }\r\n\r\n    if (!values.location) {\r\n      errors.location = \"Cannot be blank\";\r\n    } else if (!regex.test(values.location)) {\r\n      errors.location = \"Please Enter Location\";\r\n    }\r\n\r\n    if (!values.department) {\r\n      errors.department = \"Cannot be blank\";\r\n    } else if (!regex.test(values.department)) {\r\n      errors.department = \"Please Enter Department\";\r\n    }\r\n\r\n    if (!values.designation) {\r\n      errors.designation = \"Cannot be blank\";\r\n    } else if (!regex.test(values.designation)) {\r\n      errors.designation = \"Please Enter Department\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  async function RoleData() {\r\n    let role = await AuthApi.getRole();\r\n    //    console.log(rolee);\r\n    if (role && role.status === true) {\r\n      if (Object.keys(role.data).length > 0) {\r\n        Object.keys(role.data).forEach((key) => {\r\n          roleOptions.push(\r\n            <MenuItem key={key} value={role.data[key].name}>\r\n              {role.data[key].name}\r\n            </MenuItem>\r\n          );\r\n        });\r\n      } else {\r\n        roleOptions.push(\r\n          <MenuItem value=\"\">\r\n            <em>Select Role</em>\r\n          </MenuItem>\r\n        );\r\n      }\r\n    }\r\n  }\r\n  React.useEffect(() => RoleData(), []);\r\n\r\n  const imgUpload = async (e) => {\r\n    const postData = new FormData();\r\n    postData.append(\"file\", e.target.files[0]);\r\n    console.log(postData);\r\n    let updaImg = await AuthApi.updateImg(postData);\r\n    if (updaImg && updaImg.status === true) {\r\n      setFormValues({\r\n        ...formValues,\r\n        photo: updaImg.data.image_url,\r\n        imageName: updaImg.data.image_name,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeImg = async (e) => {\r\n    let imageLink = formValues.photo;\r\n    imageLink = imageLink.substr(imageLink.indexOf(\"/\", 7) + 1);\r\n    let remImg = await AuthApi.deleteImg(imageLink);\r\n    if (remImg && remImg.status === true) {\r\n      setFormValues({\r\n        ...formValues,\r\n        photo: null,\r\n        imageName: null,\r\n      });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormErrors(validate(formValues));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n      await createUser();\r\n    }\r\n  }, [formErrors]);\r\n\r\n  const createUser = async () => {\r\n    let create = await AuthApi.createUser(formValues);\r\n    console.log(create);\r\n\r\n    if (create && create.status === true) {\r\n      props.history.push(\"/users\");\r\n    } else {\r\n      swal({\r\n        title: \"OOPS!\",\r\n        icon: \"fail\",\r\n        message: \"Something went wrong, Please try later!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={classes.form} onSubmit={handleSubmit}>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"firstName\"\r\n              name=\"firstName\"\r\n              label=\"FirstName\"\r\n              variant=\"outlined\"\r\n              error={formErrors.firstName && true}\r\n              value={formValues.firstName}\r\n              onChange={handleChange1}\r\n              className={formErrors.firstName && \"input-error\"}\r\n            />\r\n            {formErrors.firstName && (\r\n              <span className=\"error\">{formErrors.firstName}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"lastName\"\r\n              name=\"lastName\"\r\n              label=\"LastName\"\r\n              variant=\"outlined\"\r\n              error={formErrors.lastName && true}\r\n              value={formValues.lastName}\r\n              onChange={handleChange1}\r\n              className={formErrors.lastName && \"input-error\"}\r\n            />\r\n            {formErrors.lastName && (\r\n              <span className=\"error\">{formErrors.lastName}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"email\"\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              error={formErrors.email && true}\r\n              value={formValues.email}\r\n              onChange={handleChange1}\r\n              className={formErrors.email && \"input-error\"}\r\n            />\r\n            {formErrors.email && (\r\n              <span className=\"error\">{formErrors.email}</span>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4} style={{ display: \"flex\" }}>\r\n            <FormControl component=\"fieldset\">\r\n              <Grid container className={classes.root} spacing={4}>\r\n                <Grid item xs={12} style={{ display: \"flex\" }}>\r\n                  <FormLabel component=\"legend\">Gender</FormLabel>\r\n                </Grid>\r\n              </Grid>\r\n              <RadioGroup\r\n                aria-label=\"gender\"\r\n                name=\"gender\"\r\n                defaultValue=\"female\"\r\n                onChange={handleChange1}\r\n              >\r\n                <Grid container className={classes.root} spacing={2}>\r\n                  <Grid textalign=\"left\" item xs={6}>\r\n                    <FormControlLabel\r\n                      value=\"female\"\r\n                      control={<Radio />}\r\n                      label=\"Female\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <FormControlLabel\r\n                      value=\"male\"\r\n                      control={<Radio />}\r\n                      label=\"Male\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"date\"\r\n              variant=\"outlined\"\r\n              label=\"Birthday\"\r\n              name=\"dob\"\r\n              type=\"date\"\r\n              error={formErrors.dob && true}\r\n              value={formValues.dob}\r\n              onChange={handleChange1}\r\n              className={formErrors.dob && \"input-error\"}\r\n              className={classes.textField}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            {formErrors.dob && <span className=\"error\">{formErrors.dob}</span>}\r\n          </Grid>\r\n          <Grid item xs={4} style={{ display: \"flex\" }}>\r\n            {formValues.photo === null ? (\r\n              <div>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  className={classes.input}\r\n                  name=\"photo\"\r\n                  id=\"contained-button-file\"\r\n                  type=\"file\"\r\n                  onChange={(e) => imgUpload(e)}\r\n                  style={{ display: \"none\" }}\r\n                />\r\n                <label htmlFor=\"contained-button-file\">\r\n                  <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                    {\" \"}\r\n                    Upload Profile Picture{\" \"}\r\n                  </Button>\r\n                </label>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <Card className={classes.root}>\r\n                  <CardContent>\r\n                    <Grid container className={classes.root} spacing={5}>\r\n                      <Grid item xs={4}>\r\n                        <img\r\n                          src={formValues.photo}\r\n                          alt=\"User profile image\"\r\n                          width=\"35\"\r\n                          height=\"35\"\r\n                        />\r\n                      </Grid>\r\n                      <input\r\n                        className={classes.input}\r\n                        name=\"photo\"\r\n                        id=\"photo\"\r\n                        type=\"hidden\"\r\n                        value={formValues.photo ? formValues.photo : \"\"}\r\n                      />\r\n                      <Grid item xs={4}>\r\n                        <Typography variant=\"subtitle1\" gutterBottom>\r\n                          {formValues.imageName}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <Button onClick={(e) => removeImg(e)}>\r\n                          <FontAwesomeIconComponent\r\n                            classes=\"fa fa-trash\"\r\n                            colorName=\"primary\"\r\n                            fontSize={\"small\"}\r\n                          />\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"qualification\"\r\n              label=\"Qualification\"\r\n              variant=\"outlined\"\r\n              error={formErrors.qualification && true}\r\n              value={formValues.qualification}\r\n              onChange={handleChange1}\r\n              className={formErrors.dob && \"input-error\"}\r\n            />\r\n            {formErrors.qualification && (\r\n              <span className=\"error\">{formErrors.qualification}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"last_organization\"\r\n              label=\"Last Organization\"\r\n              variant=\"outlined\"\r\n              error={formErrors.last_organization && true}\r\n              value={formValues.last_organization}\r\n              onChange={handleChange1}\r\n              className={formErrors.last_organization && \"input-error\"}\r\n            />\r\n            {formErrors.last_organization && (\r\n              <span className=\"error\">{formErrors.last_organization}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              variant=\"outlined\"\r\n              error={formErrors.password && true}\r\n              value={formValues.password}\r\n              onChange={handleChange1}\r\n              className={formErrors.password && \"input-error\"}\r\n            />\r\n            {formErrors.password && (\r\n              <span className=\"error\">{formErrors.password}</span>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}>\r\n            <FormControl variant=\"outlined\" style={{ width: \"100%\" }}>\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                Role\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                name=\"roleName\"\r\n                label=\"Role\"\r\n                error={formErrors.roleName && true}\r\n                value={formValues.roleName}\r\n                onChange={handleChange1}\r\n                className={formErrors.roleName && \"input-error\"}\r\n              >\r\n                {roleOptions}\r\n              </Select>\r\n            </FormControl>\r\n            {formErrors.roleName && (\r\n              <span className=\"error\">{formErrors.roleName}</span>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.root} spacing={5}>\r\n          <Grid item xs={12}>\r\n            <div className={styles.root}>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{ color: \"#1B6E95\" }}\r\n                >\r\n                  <Typography className={styles.heading}>\r\n                    Other Settings\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"location\"\r\n                        label=\"Location\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          formValues && formValues.location !== null\r\n                            ? formValues.location\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.location && \"input-error\"}\r\n                        error={formErrors.location && true}\r\n                      />\r\n                      {formErrors.location && (\r\n                        <span className=\"error\">{formErrors.location}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"mobileNo\"\r\n                        label=\"Mobile NO\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          formValues && formValues.mobileNo !== null\r\n                            ? formValues.mobileNo\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.mobileNo && \"input-error\"}\r\n                        error={formErrors.mobileNo && true}\r\n                      />\r\n                      {formErrors.mobileNo && (\r\n                        <span className=\"error\">{formErrors.mobileNo}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"date\"\r\n                        variant=\"outlined\"\r\n                        label=\"Date of Join\"\r\n                        name=\"doj\"\r\n                        type=\"date\"\r\n                        error={formErrors.doj && true}\r\n                        value={formValues.doj}\r\n                        onChange={handleChange1}\r\n                        className={formErrors.doj && \"input-error\"}\r\n                        className={classes.textField}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                      {formErrors.doj && (\r\n                        <span className=\"error\">{formErrors.doj}</span>\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n                <AccordionDetails>\r\n                  <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"bankAccNo\"\r\n                        label=\"Bank Account Number\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          formValues && formValues.bankAccNo !== null\r\n                            ? formValues.bankAccNo\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.bankAccNo && \"input-error\"}\r\n                        error={formErrors.bankAccNo && true}\r\n                      />\r\n                      {formErrors.bankAccNo && (\r\n                        <span className=\"error\">{formErrors.bankAccNo}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"bankName\"\r\n                        label=\"Bank Name\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          formValues && formValues.bankName !== null\r\n                            ? formValues.bankName\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.bankName && \"input-error\"}\r\n                        error={formErrors.bankName && true}\r\n                      />\r\n                      {formErrors.bankName && (\r\n                        <span className=\"error\">{formErrors.bankName}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"department\"\r\n                        label=\"Department\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          formValues && formValues.department !== null\r\n                            ? formValues.department\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.department && \"input-error\"}\r\n                        error={formErrors.department && true}\r\n                      />\r\n                      {formErrors.department && (\r\n                        <span className=\"error\">{formErrors.department}</span>\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n\r\n                <AccordionDetails>\r\n                  <Grid container className={classes.root} spacing={5}>\r\n                    <Grid item xs={4}>\r\n                      <TextField\r\n                        fullWidth\r\n                        id=\"outlined-basic\"\r\n                        name=\"designation\"\r\n                        label=\"Designation\"\r\n                        variant=\"outlined\"\r\n                        value={\r\n                          formValues && formValues.designation !== null\r\n                            ? formValues.designation\r\n                            : null\r\n                        }\r\n                        onChange={handleChange1}\r\n                        className={formErrors.designation && \"input-error\"}\r\n                        error={formErrors.designation && true}\r\n                      />\r\n                      {formErrors.designation && (\r\n                        <span className=\"error\">{formErrors.designation}</span>\r\n                      )}\r\n                    </Grid>\r\n\r\n                    {ls(\"roles\") === \"Admin\" ||\r\n                    ls(\"roles\") === \"Super Admin\" ? (\r\n                      <Grid item xs={4}>\r\n                        <TextField\r\n                          fullWidth\r\n                          id=\"outlined-basic\"\r\n                          name=\"salary\"\r\n                          label=\"Salary\"\r\n                          variant=\"outlined\"\r\n                          value={\r\n                            formValues && formValues.salary !== null\r\n                              ? formValues.salary\r\n                              : null\r\n                          }\r\n                          onChange={handleChange1}\r\n                          className={formErrors.salary && \"input-error\"}\r\n                          error={formErrors.salary && true}\r\n                        />\r\n                        {formErrors.salary && (\r\n                          <span className=\"error\">{formErrors.salary}</span>\r\n                        )}\r\n                      </Grid>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    <Grid item xs={4}></Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.root} spacing={3}>\r\n          <Grid item xs={4} style={{ display: \"flex\" }}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Save\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                props.history.push(\"/users\");\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={4}></Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Addform;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\Index.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\LeavesTicket\\AddTickets.js",["587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\n\r\nconst iniTickets = {\r\n    leaveType: \"\",\r\n    ticketMesasge: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    noOfDays: \"\",\r\n\r\n}\r\n\r\n\r\nconst AddTickets = (props) => {\r\n    const classes = props;\r\n    const [ticketValues, setTicketsValues] = useState(iniTickets);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setTicketsValues({ ...ticketValues, [name]: value });\r\n        // console.log(ticketValues);\r\n    };\r\n\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n    const daysDiff = dateDiffInDays(new Date(ticketValues.startDate), new Date(ticketValues.endDate));\r\n    const today = new Date();\r\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n    const dsp = dateDiffInDays(new Date(date), new Date(ticketValues.startDate));\r\n    // console.log(\"date only==\"+new Date());\r\n    // console.log(\"UTC date==\"+new Date(ticketValues.startDate));\r\n   \r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.leaveType) {\r\n            errors.leaveType = \"Cannot be blank\";\r\n        }\r\n\r\n\r\n        if (!values.ticketMesasge) {\r\n            errors.ticketMesasge = \"Cannot be blank\";\r\n        } else if (!regex.test(values.ticketMesasge)) {\r\n            errors.ticketMesasge = \"Invalid ticketMesasge format\";\r\n        }\r\n\r\n        if (!values.startDate) {\r\n            errors.startDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.startDate)) {\r\n            errors.startDate = \"Invalid dob format\"\r\n        } else {\r\n            if (dsp < 0) {\r\n                errors.startDate = \"You can chooes only current and future Date\";\r\n            }\r\n        }\r\n\r\n        if (!values.endDate) {\r\n            errors.endDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.endDate)) {\r\n            errors.endDate = \"Invalid dob format\"\r\n        } else {\r\n            if (daysDiff < 0) {\r\n                errors.endDate = \"You can chooes only current and future Date\";\r\n            }\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(ticketValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await Tickets();\r\n        }\r\n    }, [formErrors])\r\n\r\n    const Tickets = async () => {\r\n        let create1 = await AuthApi.createTicket(ticketValues);\r\n        console.log(create1)\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/tickets');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    function diffday() {\r\n        const a = moment(ticketValues.startDate);\r\n        const b = moment(ticketValues.endDate);\r\n        const dateRangeArr = [];\r\n\r\n        // if(e.target.name == \"startDate\"){\r\n        var startDate = ticketValues.startDate;\r\n        dateRangeArr.push(startDate);\r\n        // }\r\n        // if(e.target.name == \"endDate\"){\r\n        var endDate = ticketValues.endDate;\r\n        dateRangeArr.push(endDate);\r\n        // }\r\n\r\n        ticketValues.dateRange = dateRangeArr;\r\n        ticketValues.noOfDays = b.diff(a, 'days')\r\n        // console.log(ticketValues.noOfDays);\r\n        // console.log( ticketValues.dateRange);\r\n\r\n    }\r\n\r\n    // console.log(ticketValues);\r\n    // const clientTimezoneOffset = new Date().getTimezoneOffset()/60;\r\n   \r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"LeavesTicket\"\r\n                                    primaryPageLink=\"/tickets\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add Leave Ticket\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Tickets</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }} >\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Leave-Type</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            label=\"leave-Type\"\r\n                                                            name=\"leaveType\"\r\n                                                            error={formErrors.leaveType && true}\r\n                                                            value={ticketValues.leaveType}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.leaveType && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"full-leave\">Full leave</MenuItem>\r\n                                                            <MenuItem value=\"half-leave\">Half leave</MenuItem>\r\n                                                            <MenuItem value=\"sick-leave\">Sick leave</MenuItem>\r\n                                                            <MenuItem value=\"early-leave\">Early leave</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.leaveType && (\r\n                                                        <span className=\"error\">{formErrors.leaveType}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.startDate && true}\r\n                                                        value={ticketValues.startDate}                                                       \r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.endDate && true}\r\n                                                        value={ticketValues.endDate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={7}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        multiline\r\n                                                        rows={4}\r\n                                                        id=\"ticketMesasge\"\r\n                                                        name=\"ticketMesasge\"\r\n                                                        label=\"Reason for leave\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.ticketMesasge && true}\r\n                                                        value={ticketValues.ticketMesasge}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.ticketMesasge && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.ticketMesasge && (\r\n                                                        <span className=\"error\">{formErrors.ticketMesasge}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" onClick={(e) => {diffday()}} style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddTickets;\r\n\r\n\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Event\\AddEvent.js",["606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { colors, TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { ContactsOutlined, SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\n\r\n\r\n\r\nconst iniEvent = {\r\n    eventName: \"\",\r\n    eventdate: \"\",\r\n\r\n}\r\n\r\n\r\nconst AddEvent = (props) => {\r\n    const classes = props;\r\n\r\n    const [eventValues, setEventsValues] = useState(iniEvent);\r\n    const [selectedImages, setSelectedImages] = useState([]);\r\n    const [stringImages, setStringImages] = useState({ images: [] });\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEventsValues({ ...eventValues, [name]: value });\r\n        // console.log(eventValues);\r\n    };\r\n\r\n\r\n\r\n\r\n    const imageHandleChange = (e) => {\r\n        const files = e.target.files\r\n        const stringFiles = [];\r\n        if (e.target.files) {\r\n            for (let i = 0; i < files.length; i++) {\r\n                const reader = new FileReader();\r\n                reader.onloadend = () => {\r\n                    stringFiles.push(reader.result.replace(\"data:\", \"\").replace(/^.+,/, \"\"));\r\n                };\r\n                reader.readAsDataURL(files[i]);\r\n            }\r\n\r\n            const fileArray1 = Array.from(e.target.files).map((file) => URL.createObjectURL(file))\r\n            // console.log(fileArray1)\r\n            setSelectedImages((prevImages) => prevImages.concat(fileArray1))\r\n            setStringImages({ ...stringImages, images: stringFiles });\r\n\r\n            Array.from(e.target.files).map(\r\n                (file) => URL.revokeObjectURL(file)\r\n            )\r\n        }\r\n        console.log(stringImages)\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderPhotos = (source) => {\r\n        return source.map((photo, index) => {\r\n            return <div key={Math.random()} style={{ float: \"left\" }}>\r\n                <img src={photo} key={photo} alt=\"User profile image\" style={{ padding: \"20px\" }} width=\"200px\" height=\"200px\" />\r\n                <Button style={{ marginTop: \"-20rem\" }} onClick={(e) => { removeImage(index) }}>x</Button>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    const removeImage = (e) => {\r\n        const stringImages1 = stringImages.images\r\n        const selectedImages1 = selectedImages\r\n        stringImages1.splice(e, 1)\r\n        selectedImages1.splice(e, 1)\r\n\r\n\r\n        setSelectedImages((prevImages) => prevImages = selectedImages1)\r\n        setStringImages({ ...stringImages, images: stringImages1 });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!values.eventName) {\r\n            errors.eventName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.eventName)) {\r\n            errors.eventName = \"Invalid ticketMesasge format\";\r\n        }\r\n\r\n        if (!values.eventdate) {\r\n            errors.eventdate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.eventdate)) {\r\n            errors.eventdate = \"Invalid dob format\"\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(eventValues));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await event();\r\n        }\r\n    }, [formErrors])\r\n\r\n\r\n\r\n\r\n    const event = async () => {\r\n        let create1 = await AuthApi.createEvent(eventValues, stringImages.images);\r\n        console.log(create1)\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/event');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Event\"\r\n                                    primaryPageLink=\"/event\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add Events\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Events</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"EventName\"\r\n                                                        name=\"eventName\"\r\n                                                        label=\"Event-Name\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.eventName && true}\r\n                                                        value={eventValues.eventName}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.eventName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.eventName && (\r\n                                                        <span className=\"error\">{formErrors.eventName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Event-Date\"\r\n                                                        name=\"eventdate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.eventdate && true}\r\n                                                        value={eventValues.eventdate}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.eventdate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.eventdate && (\r\n                                                        <span className=\"error\">{formErrors.eventdate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={12} style={{ display: 'flex' }} >\r\n\r\n                                                    <div>\r\n                                                        <input\r\n                                                            accept=\"image/*\"\r\n                                                            // className={classes.input}\r\n                                                            id=\"contained-button-file\"\r\n                                                            multiple\r\n                                                            type=\"file\"\r\n                                                            onChange={(e) => { imageHandleChange(e) }}\r\n                                                            style={{ display: 'none' }}\r\n                                                        />\r\n                                                        <label htmlFor=\"contained-button-file\">\r\n                                                            <Button style={{ float: \"left\" }} variant=\"contained\" color=\"primary\" component=\"span\" > Upload Event Picture </Button>\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={12}>\r\n                                                    <div style={{ float: \"left\" }}>\r\n                                                        <Card className={classes.root}>\r\n                                                            <Grid item xs={12}>\r\n                                                                {renderPhotos(selectedImages)}\r\n                                                            </Grid>\r\n                                                        </Card>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/event') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddEvent;\r\n\r\n\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\JobPortal\\JobList.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\JobPortal\\EditJob.js",["635","636","637","638","639","640","641","642","643"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\n\r\n\r\n\r\nconst iniJob = {\r\n    jobtitle: \"\",\r\n    jobdescription: \"\",\r\n    roleresponsibilities: \"\",\r\n    exprequire: \"\",\r\n    minqualification: \"\",\r\n    jobactive: \"\",\r\n    numofvacanciese: '',\r\n    Companyprofile: \"\",\r\n    job_id: 0,\r\n\r\n}\r\n\r\n\r\nconst EditJob = (props) => {\r\n    const classes = props;\r\n    const [jobportal, setJobPortal] = useState(iniJob);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setJobPortal({ ...jobportal, [name]: value });\r\n        // console.log(ticketValues);\r\n    };\r\n\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const ds = /^[0-9\\b]+$/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.jobtitle) {\r\n            errors.jobtitle = \"Cannot be blank\";\r\n        }\r\n\r\n\r\n        if (!values.jobdescription) {\r\n            errors.jobdescription = \"Cannot be blank\";\r\n        } else if (!regex.test(values.jobdescription)) {\r\n            errors.jobdescription = \"Invalid jobdescription format\";\r\n        }\r\n\r\n        if (!values.roleresponsibilities) {\r\n            errors.roleresponsibilities = \"Cannot be blank\";\r\n        } else if (!regex.test(values.roleresponsibilities)) {\r\n            errors.roleresponsibilities = \"Invalid roleresponsibilities format\";\r\n        }\r\n\r\n        if (!ds.test(values.exprequire)) {\r\n            errors.exprequire = \"Cannot be blank\";\r\n        }\r\n\r\n        if (!values.minqualification) {\r\n            errors.minqualification = \"Cannot be blank\";\r\n        }\r\n\r\n        if (!values.jobactive) {\r\n            errors.jobactive = \"Cannot be blank\";\r\n        }\r\n\r\n        if (!ds.test(values.numofvacanciese)) {\r\n            errors.numofvacanciese = \"only numeric\";\r\n        }\r\n\r\n        if (!values.Companyprofile) {\r\n            errors.Companyprofile = \"Cannot be blank\";\r\n        } else if (!regex.test(values.Companyprofile)) {\r\n            errors.Companyprofile = \"Invalid Companyprofile format\";\r\n        }\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const getJob = async (e) => {\r\n        let jobId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let job = await AuthApi.singleJob(jobId)\r\n        // console.log(job)\r\n        let job_id = jobId\r\n\r\n        let jobTitle = (job.data && job.data.jobTitle && (job.data.jobTitle !== null || job.data.jobTitle !== false)) ? job.data.jobTitle : null;\r\n        let numberOfVacancies = (job.data && job.data.numberOfVacancies) ? job.data.numberOfVacancies : null;\r\n        let expRequired = (job.data && job.data.expRequired) ? job.data.expRequired : null;\r\n        let minQuallification = (job.data && job.data.minQuallification) ? job.data.minQuallification : null;\r\n        // console.log(minQuallification)\r\n        let jobActive = (job.data && job.data.jobActive) ? job.data.jobActive : null;\r\n        let jobDescription = (job.data && job.data.jobDescription) ? job.data.jobDescription : null;\r\n        let companyProfile = (job.data && job.data.companyProfile) ? job.data.companyProfile : null;\r\n        let rolesResponbilities = (job.data && job.data.rolesResponbilities) ? job.data.rolesResponbilities : null;\r\n\r\n        setJobPortal({\r\n            jobtitle: jobTitle,\r\n            jobdescription: jobDescription,\r\n            roleresponsibilities: rolesResponbilities,\r\n            exprequire: expRequired,\r\n            minqualification: minQuallification,\r\n            jobactive: jobActive,\r\n            numofvacanciese: numberOfVacancies,\r\n            Companyprofile: companyProfile,\r\n            job_id: job_id\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getJob(),\r\n                500), []);\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(jobportal));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await job();\r\n        }\r\n    }, [formErrors])\r\n\r\n    const job = async (id) => {\r\n        let status = await AuthApi.updateJob(jobportal, jobportal.job_id);\r\n        console.log(status)\r\n        if (status && status.status === true) {\r\n            props.history.push('/job');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"JobPortal\"\r\n                                    primaryPageLink=\"/job\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit Job-Portal</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit}>\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"Job Title\"\r\n                                                        name=\"jobtitle\"\r\n                                                        label=\"Job-Title\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.jobtitle && true}\r\n                                                        value={(jobportal && jobportal.jobtitle !== null) ? jobportal.jobtitle : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.jobtitle && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.jobtitle && (\r\n                                                        <span className=\"error\">{formErrors.jobtitle}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"Number of vacanciese\"\r\n                                                        name=\"numofvacanciese\"\r\n                                                        label=\"Number of vacancies\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.numofvacanciese && true}\r\n                                                        value={(jobportal && jobportal.numofvacanciese !== null) ? jobportal.numofvacanciese : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.numofvacanciese && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.numofvacanciese && (\r\n                                                        <span className=\"error\">{formErrors.numofvacanciese}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={4}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Exp. required</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            name=\"exprequire\"\r\n                                                            error={formErrors.exprequire && true}\r\n                                                            value={(jobportal && jobportal.exprequire !== null) ? jobportal.exprequire : \"\"}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.exprequire && \"input-error\"}\r\n                                                            label=\"Exp. required\"\r\n                                                        >\r\n                                                            <MenuItem value=\"\">\r\n                                                                <em>None</em>\r\n                                                            </MenuItem>\r\n                                                            <MenuItem value={1}>0</MenuItem>\r\n                                                            <MenuItem value={2}>1</MenuItem>\r\n                                                            <MenuItem value={3}>2</MenuItem>\r\n                                                            <MenuItem value={4}>3</MenuItem>\r\n                                                            <MenuItem value={5}>4</MenuItem>\r\n                                                            <MenuItem value={6}>5</MenuItem>\r\n                                                            <MenuItem value={7}>6</MenuItem>\r\n                                                            <MenuItem value={8}>7</MenuItem>\r\n                                                            <MenuItem value={9}>8</MenuItem>\r\n                                                            <MenuItem value={10}>9</MenuItem>\r\n                                                            <MenuItem value={11}>10</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.exprequire && (\r\n                                                        <span className=\"error\">{formErrors.exprequire}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Min. Qualification </InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            name=\"minqualification\"\r\n                                                            label=\"Min. Qualification\"\r\n                                                            error={formErrors.minqualification && true}\r\n                                                            value={(jobportal && jobportal.minqualification !== null) ? jobportal.minqualification : null}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.minqualification && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"\">\r\n                                                                <em>None</em>\r\n                                                            </MenuItem>\r\n                                                            <MenuItem value=\"btech\">btech</MenuItem>\r\n                                                            <MenuItem value=\"be\">Btech,BE</MenuItem>\r\n                                                            <MenuItem value=\"graduation\">graduation</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.minqualification && (\r\n                                                        <span className=\"error\">{formErrors.minqualification}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Job active </InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            name=\"jobactive\"\r\n                                                            label=\"Job active\"\r\n                                                            error={formErrors.jobactive && true}\r\n                                                            value={(jobportal && jobportal.jobactive !== null) ? jobportal.jobactive : null}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.jobactive && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"\">\r\n                                                                <em>None</em>\r\n                                                            </MenuItem>\r\n                                                            <MenuItem value=\"yes\">Yes</MenuItem>\r\n                                                            <MenuItem value=\"no\">No</MenuItem>\r\n                                                            {/* <MenuItem value={3}>3</MenuItem> */}\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.jobactive && (\r\n                                                        <span className=\"error\">{formErrors.jobactive}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={4} >\r\n                                                    <TextareaAutosize\r\n                                                        // fullWidth\r\n                                                        // multiline\r\n                                                        rows={3}\r\n                                                        id=\"Job Description\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Job-Description\"\r\n                                                        name=\"jobdescription\"\r\n                                                        placeholder=\"job description\"\r\n                                                        style={{ width: '450px', height: \"100px\" }}\r\n                                                        error={formErrors.jobdescription && true}\r\n                                                        value={(jobportal && jobportal.jobdescription !== null) ? jobportal.jobdescription : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.jobdescription && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                    // InputLabelProps={{\r\n                                                    //     shrink: true,\r\n                                                    // }}\r\n                                                    />\r\n                                                    {formErrors.jobdescription && (\r\n                                                        <span className=\"error\">{formErrors.jobdescription}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextareaAutosize\r\n                                                        // fullWidth\r\n                                                        // multiline\r\n                                                        rows={3}\r\n                                                        id=\"Company profile\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Company profile\"\r\n                                                        name=\"Companyprofile\"\r\n                                                        placeholder=\"Company profile\"\r\n                                                        style={{ width: '450px', height: \"100px\" }}\r\n                                                        error={formErrors.Companyprofile && true}\r\n                                                        value={(jobportal && jobportal.Companyprofile !== null) ? jobportal.Companyprofile : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.Companyprofile && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                    // InputLabelProps={{\r\n                                                    //     shrink: true,\r\n                                                    // }}\r\n                                                    />\r\n                                                    {formErrors.Companyprofile && (\r\n                                                        <span className=\"error\">{formErrors.Companyprofile}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextareaAutosize\r\n                                                        // fullWidth\r\n                                                        // multiline\r\n                                                        rows={3}\r\n                                                        id=\"Role&responsibilities\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Role&responsibilities\"\r\n                                                        name=\"roleresponsibilities\"\r\n                                                        placeholder=\"role & responsibilities\"\r\n                                                        style={{ width: '430px', height: \"100px\" }}\r\n                                                        error={formErrors.roleresponsibilities && true}\r\n                                                        value={(jobportal && jobportal.roleresponsibilities !== null) ? jobportal.roleresponsibilities : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.roleresponsibilities && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                    // InputLabelProps={{\r\n                                                    //     shrink: true,\r\n                                                    // }}\r\n                                                    />\r\n                                                    {formErrors.roleresponsibilities && (\r\n                                                        <span className=\"error\">{formErrors.roleresponsibilities}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Edit</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/job') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditJob;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\TIme Entry\\AddTime.js",["644","645","646","647","648","649","650"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\n\r\n\r\nconst inivalue = {\r\n    selectedDate: \"\",\r\n    startTime: \"\",\r\n    endTime: \"\"\r\n}\r\n\r\n\r\nconst AddTime = (props) => {\r\n    const classes = props;\r\n    const [addValues, setAddValues] = useState(inivalue);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setAddValues({ ...addValues, [name]: value });\r\n        console.log(addValues);\r\n    };\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n\r\n        const dobRegx = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n\r\n        if (!values.selectedDate) {\r\n            errors.selectedDate = \"Cannot be  blank\";\r\n        } else if (!dobRegx.test(values.selectedDate)) {\r\n            errors.selectedDate = \"Invalid dob format\"\r\n        }\r\n\r\n\r\n        if (!values.startTime) {\r\n            errors.startTime = \"Cannot be blank\";\r\n        }\r\n\r\n        if (!values.endTime) {\r\n            errors.endTime = \"Cannot be blank\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(addValues));\r\n        setIsSubmitting(true);\r\n\r\n\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await addTimeData();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    const addTimeData = async () => {\r\n\r\n        let create1 = await AuthApi.addTime(addValues);\r\n        if (create1 && create1.status === true) {\r\n            props.history.push('/check');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    var d = new Date(),\r\n    month = '' + (d.getMonth() + 1),\r\n    day = '' + (d.getDate() - 1),\r\n    year = d.getFullYear();\r\n\r\nif (month.length < 2) \r\n    month = '0' + month;\r\nif (day.length < 2) \r\n    day = '0' + day;\r\n\r\n    var ds= [year, month, day].join('-');\r\n\r\n    \r\n\r\n    console.log(ds);\r\n\r\n\r\n\r\n   \r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"AddTime Entry\"\r\n                                    primaryPageLink=\"/time\"\r\n                                    isSecondaryPage={false}\r\n                                    secondaryPageName=\"\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add AddTime-Entry</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit}>\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"selectedDate\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Date\"\r\n                                                        name=\"selectedDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.selectedDate && true}\r\n                                                        value={addValues.selectedDate}\r\n                                                        defaultValue=\"2017-05-24\"\r\n                                                        InputProps={{ inputProps: { max:  ds  } }}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.selectedDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.selectedDate && (\r\n                                                        <span className=\"error\">{formErrors.selectedDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"time\"\r\n                                                        label=\"Start-time\"\r\n                                                        variant=\"outlined\"\r\n                                                        type=\"time\"\r\n                                                        name=\"startTime\"\r\n                                                        error={formErrors.startTime && true}\r\n                                                        value={addValues.startTime}\r\n                                                        onChange={handleChange}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                        inputProps={{\r\n                                                            step: 300, // 5 min\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startTime && (\r\n                                                        <span className=\"error\">{formErrors.startTime}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"time\"\r\n                                                        label=\"End-time\"\r\n                                                        variant=\"outlined\"\r\n                                                        type=\"time\"\r\n                                                        name=\"endTime\"\r\n                                                        error={formErrors.endTime && true}\r\n                                                        value={addValues.endTime}\r\n                                                        onChange={handleChange}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                        inputProps={{\r\n                                                            step: 300, // 5 min\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endTime && (\r\n                                                        <span className=\"error\">{formErrors.endTime}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/dashboard') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTime;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\TImer\\timer.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\ScreenShot.js",["651"],"import AuthApi from './components/Services/Authapi';\r\n\r\nlet captureStream;\r\n\r\nexport const getAccess = async () => {\r\n    try {\r\n        captureStream = await navigator.mediaDevices.getDisplayMedia();\r\n        // console.log(captureStream)\r\n    } catch (err) {\r\n        console.error(\"Error: \" + err);\r\n    }\r\n};\r\n\r\n\r\nexport const capture = async () => {\r\n\r\n    console.log(\"heelo\")\r\n\r\n    // let canvas = document.createElement('canvas');\r\n\r\n    // // Request media\r\n    // navigator.mediaDevices.getDisplayMedia().then(stream => {\r\n    //     // Grab frame from stream\r\n    //     let track = stream.getVideoTracks()[0];\r\n    //     let capture = new ImageCapture(track);\r\n    //     capture.grabFrame().then(bitmap => {\r\n    //         // Stop sharing\r\n    //         track.stop();\r\n\r\n    //         // Draw the bitmap to canvas\r\n    //         canvas.width = bitmap.width;\r\n    //         canvas.height = bitmap.height;\r\n    //         canvas.getContext('2d').drawImage(bitmap, 0, 0);\r\n    //         const image = canvas.toDataURL(\"image/png\")\r\n    //         console.log(image)\r\n    //         return image;\r\n    //         // Grab blob from canvas\r\n    //         canvas.toBlob(blob => {\r\n    //             // Do things with blob here\r\n    //             console.log('output blob:', blob);\r\n    //         });\r\n    //     });\r\n    // })\r\n    //     .catch(e => console.log(e));\r\n\r\n    // const stream = await navigator.mediaDevices.getDisplayMedia({\r\n    //     video: { mediaSource: 'screen' },\r\n    // })\r\n    // // get correct video track\r\n    // const track = stream.getVideoTracks()[0]\r\n    // // init Image Capture and not Video stream\r\n    // const imageCapture = new ImageCapture(track)\r\n    // // take first frame only\r\n    // const bitmap = await imageCapture.grabFrame()\r\n    // // destory video track to prevent more recording / mem leak\r\n    // track.stop()\r\n\r\n    // const canvas = document.createElement(\"canvas\");\r\n    // console.log(canvas)\r\n    // canvas.width = bitmap.width\r\n    // canvas.height = bitmap.height\r\n    // const context = canvas.getContext('2d')\r\n    // context.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height)\r\n    // const image = canvas.toDataURL(\"image/png\")\r\n    // console.log(image)\r\n\r\n    // // this turns the base 64 string to a [File] object\r\n    // const res = await fetch(image)\r\n    // const buff = await res.arrayBuffer()\r\n    // // clone so we can rename, and put into array for easy proccessing\r\n    // const file = [\r\n    //     new File([buff], `photo_${new Date()}.jpg`, {\r\n    //         type: 'image/jpeg',\r\n    //     }),\r\n    // ]\r\n    // return file\r\n\r\n    // if (captureStream !== undefined || captureStream !== 'undefined') {\r\n    //     let frame\r\n    //     try {\r\n    //         const canvas = document.createElement(\"canvas\");\r\n    //         const context = canvas.getContext(\"2d\");\r\n    //         const video = document.createElement(\"video\");\r\n    //         video.srcObject = captureStream;\r\n    //         context.drawImage(video, 0, 0, window.width, window.height);\r\n    //         console.log(context)\r\n    //         frame = canvas.toDataURL(\"image/png\");\r\n\r\n\r\n    //         // window.location.href = frame;\r\n    //         console.log(frame)\r\n    //         // let get = await AuthApi.screenShotCapture();\r\n    //         // console.log(get)\r\n    //         return frame;\r\n    //     } catch (err) {\r\n    //         console.error(\"Error: \" + err);\r\n    //     }\r\n\r\n    // }\r\n    // return null;\r\n};\r\n\r\n\r\n\r\nexport const revokeAccess = async () => {\r\n    try {\r\n        captureStream.getTracks().forEach(track => track.stop());\r\n    } catch (err) {\r\n        console.error(\"Error: \" + err);\r\n    }\r\n};\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\TableAction.js",["652","653","654","655","656"],"import React, { useState, useEffect }  from 'react'\r\nimport FontAwesomeIconComponent from '../src/components/Layouts/FontAwesomeIconComponent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ls from \"local-storage\";\r\nimport AuthApi from '../src/components/Services/Authapi';\r\n\r\n\r\nexport const Pdfdownload = ({ variant, color, classes, colorName, onClick, style }) => {\r\n\r\n \r\n\r\n\r\n    return (\r\n        <div style={style}>\r\n            <IconButton variant={variant}  color={color}  onClick={onClick} >\r\n                <FontAwesomeIconComponent classes={classes} colorName={colorName} fontSize={\"small\"} />\r\n            </IconButton>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n{/* <IconButton variant=\"contained\" color=\"primary\">\r\n<FontAwesomeIconComponent classes=\"fas fa-file-pdf\" colorName=\"primary\" fontSize={\"small\"} />\r\n</IconButton> */}","C:\\xampp\\htdocs\\cpsi-ems\\src\\Config.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Permission.js",["657","658","659","660","661","662","663","664"],"import React, { Component } from 'react';\r\nimport Header from '../Layouts/Header'\r\nimport Footer from '../Layouts/Footer';\r\nimport AuthApi from '../Services/Authapi';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport swal from 'sweetalert';\r\nimport TableComponent from '../Layouts/TableComponent';\r\nimport Breadcrumb from '../Layouts/Breadcrumb';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nclass Permission extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      permission: [],\r\n      count:0,\r\n      setopen: false,\r\n      permissionName: false,\r\n      isPopup: false,\r\n      tableTh: [\r\n        { id: 'name', numeric: false, disablePadding: true, label: 'Name', sortable: true },\r\n        { id: 'created_at', numeric: false, disablePadding: true, label: 'Created On', sortable: true },\r\n        { id: 'actions', numeric: false, disablePadding: true, label: 'Actions', sortable: false }\r\n      ]\r\n    }\r\n    this.permissionData = this.permissionData.bind(this);\r\n    this.handleClickOpen = this.handleClickOpen.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.updatChange = this.updatChange.bind(this);\r\n    this.saveData = this.saveData.bind(this);\r\n    this.removePermission = this.removePermission.bind(this);\r\n    this.updatePermission = this.updatePermission.bind(this);\r\n    this.handleClickOpenUpdate = this.handleClickOpenUpdate.bind(this);\r\n\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push('/login');\r\n    }\r\n    this.permissionData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n\r\n  permissionData = async (e) => {\r\n    let permission = await AuthApi.getPermission();\r\n    if (permission && permission.status === true) {\r\n      this.setState({\r\n        permission: permission.data,\r\n        count:permission.data.length\r\n      })\r\n    }\r\n  }\r\n\r\n  updatePermission = async (id) => {\r\n    let stat = await AuthApi.updatePermission(this.state.permissionName, id);\r\n    if (stat && stat.status === true) {\r\n      this.setState({ setopen: false }, function () {\r\n        this.permissionData();\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClickOpen(row = false) {\r\n    this.setState({\r\n      setopen: true,\r\n      isPopup: true,\r\n      permissionName: row.name,\r\n\r\n    })\r\n  };\r\n\r\n  handleClickOpenUpdate(row = false) {\r\n    this.setState({\r\n      setopen: true,\r\n      isPopup: false,\r\n      permissionName: row.name,\r\n      permissionId: row.id,\r\n    })\r\n  };\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      setopen: false\r\n    })\r\n  };\r\n\r\n  async saveData() {\r\n    if (this.state.isPopup) {\r\n      let currentPermission = await AuthApi.createPermission(this.state.permissionName);\r\n      if (currentPermission && currentPermission.status === true) {\r\n        this.setState({ setopen: false }, function () {\r\n          this.permissionData();\r\n        });\r\n      } else {\r\n        // axios popup result  \r\n      }\r\n    } else {\r\n      this.updatePermission(this.state.permissionId)\r\n    }\r\n  }\r\n\r\n  async removePermission(id) {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      icon: \"warning\",\r\n      buttons: [\"Cancel\", \"Yes\"]\r\n    }).then(async (confirm) => {\r\n      if (confirm) {\r\n        let currentPermission = await AuthApi.deletePermission(id);\r\n        if (currentPermission && currentPermission.status === true) {\r\n          this.permissionData();\r\n        } else {\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  updatChange(e) {\r\n  \r\n    this.setState({ permissionName: e.target.value })\r\n  }\r\n\r\n  \r\n\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    \r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"Permissions\"\r\n                    primaryPageLink=\"/permission\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\" />\r\n                </CardContent>\r\n              </Card>\r\n              <TableComponent\r\n                {...this.props}\r\n                tableTh={this.state.tableTh}\r\n                tableData={this.state.permission}\r\n                tableCount={this.state.count}\r\n                colNameToShow={['name', 'created_at']}\r\n                openPopUp={this.handleClickOpen}\r\n                openPopUpUpdate={this.handleClickOpenUpdate}\r\n                removeRow={this.removePermission}\r\n                actionBtns={['update', 'delete']}\r\n                modelName={'Permission'}\r\n              /></div>\r\n          } />\r\n        <Footer />\r\n        <PopUp\r\n          isPopup={this.state.isPopup}\r\n          {...this.props}\r\n          handleClose={this.handleClose}\r\n          setopen={this.state.setopen} permissionName={this.state.permissionName} saveData={this.saveData} updatChange={this.updatChange} updatePermission={this.updatePermission} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Permission;\r\n\r\nclass PopUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let error = this.props.permissionName ==  undefined;\r\n    return (\r\n      <div>\r\n        <Dialog open={this.props.setopen}>\r\n          <DialogTitle>{(this.props.isPopup) ? \"Add Permission\" : \" Update Permission\"}</DialogTitle>\r\n          <DialogContent>\r\n            {/* <DialogContentText> */}\r\n              {/* <TextField autoFocus name=\"name\" label=\"Name\" type=\"text\" value={(this.props.permissionName && this.props.permissionName !== false) ? this.props.permissionName : null} onChange={(e) => { this.props.updatChange(e) }} /> */}\r\n              <TextField autoFocus \r\n               helperText={error ? \"Cannot be blank\" : \"Perfect!\"}\r\n               error={error}\r\n               name=\"name\" \r\n               label=\"Name\"\r\n              type=\"text\" value={(this.props.permissionName && this.props.permissionName !== false) ? this.props.permissionName : \"\"} onChange={(e) => { this.props.updatChange(e) }} />\r\n            {/* </DialogContentText> */}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button color=\"primary\" onClick={(e) => { this.props.saveData() }} > Save </Button>\r\n            <Button onClick={(e) => { this.props.handleClose() }} color=\"primary\"> Close </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  }\r\n}",["665","666"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\EditUpcomingEvent.js",["667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\n\r\n\r\nconst iniEvent = {\r\n    upcomingEventName: \"\",\r\n    upcomingEventdate: \"\",\r\n    description: \"\",\r\n    image: null,\r\n    event_Id: 0,\r\n}\r\n\r\n\r\nconst EditTicket = (props) => {\r\n    const classes = props;\r\n    const [eventValues, setEventsValues] = useState(iniEvent);\r\n    // const [selectedImages, setSelectedImages] = useState({ image: null });\r\n    // const [stringImages, setStringImages] = useState({ images: [] });\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEventsValues({ ...eventValues, [name]: value });\r\n\r\n\r\n        // console.log(selectedImages);\r\n    };\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n\r\n    const dsp = dateDiffInDays(new Date(), new Date(eventValues.upcomingEventdate))\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!values.upcomingEventName) {\r\n            errors.upcomingEventName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.upcomingEventName)) {\r\n            errors.upcomingEventName = \"Invalid upcomingEventName format\";\r\n        }\r\n\r\n        if (!values.upcomingEventdate) {\r\n            errors.upcomingEventdate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.upcomingEventdate)) {\r\n            errors.upcomingEventdate = \"Invalid upcomingEventdate format\"\r\n        }\r\n        else {\r\n\r\n\r\n            if (dsp < 0) {\r\n                errors.upcomingEventdate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n        if (!values.description) {\r\n            errors.description = \"Cannot be  blank\";\r\n        } else if (!regex.test(values.description)) {\r\n            errors.description = \"Invalid description format\"\r\n        }\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n   \r\n    const getEventData = async () => {\r\n        let Id = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n\r\n        let upcomingEvent = await AuthApi.singleUpcomingEvent(Id);\r\n\r\n        let event_Id = Id\r\n\r\n        let upcomingEventName = (upcomingEvent.status === true && upcomingEvent.data && upcomingEvent.data.name && (upcomingEvent.data.name !== null || upcomingEvent.data.name !== false)) ? upcomingEvent.data.name : null;\r\n        let upcomingEventdate = (upcomingEvent.status === true && upcomingEvent.data && upcomingEvent.data.date) ? upcomingEvent.data.date : null;\r\n        let description = (upcomingEvent.status === true && upcomingEvent.data && upcomingEvent.data.description) ? upcomingEvent.data.description : null;\r\n        let image = (upcomingEvent.status === true && upcomingEvent.data && upcomingEvent.data.image) ? upcomingEvent.data.image : null;\r\n\r\n\r\n\r\n        setEventsValues({\r\n            upcomingEventName: upcomingEventName,\r\n            upcomingEventdate: upcomingEventdate,\r\n            description: description,\r\n            image: image,\r\n            event_Id: event_Id,\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getEventData(),\r\n                500), []);\r\n\r\n\r\n\r\n    const uploadSingleFile = async (e) => {\r\n        const postData = new FormData();\r\n        postData.append('file', e.target.files[0]);\r\n\r\n        let updaImg = await AuthApi.uploadEventImg(postData);\r\n\r\n        if (updaImg && updaImg.status === true) {\r\n\r\n            setEventsValues({\r\n                ...eventValues,\r\n                image: updaImg.data.image_url,\r\n                // imageName: updaImg.data.image_name\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const removeImg = async (e) => {\r\n        let imageLink = eventValues.image;\r\n        imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n        console.log(imageLink)\r\n        let remImg = await AuthApi.upcomingdeleteImg(imageLink);\r\n\r\n        if (remImg && remImg.status === true) {\r\n            // setEventsValues({\r\n            //     // ...setEditValues,\r\n            //     image: null,\r\n\r\n            // })\r\n            getEventData()\r\n\r\n        } else {\r\n\r\n        }\r\n        // setEditValues({\r\n        //     photo: null,\r\n        //     uploadedImgName: null\r\n        // })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(eventValues));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await editUpComingEvent();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n\r\n\r\n    const editUpComingEvent = async (id) => {\r\n        let status = await AuthApi.updateUpcomingEvent(eventValues, eventValues.event_Id);\r\n\r\n        if (status && status.status === true) {\r\n            props.history.push('/upcoming');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Upcoming Events\"\r\n                                    primaryPageLink=\"/upcoming\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit Upcoming Event</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"upcomingEventName\"\r\n                                                        name=\"upcomingEventName\"\r\n                                                        label=\"UpcomingEvent-Name\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.upcomingEventName && true}\r\n                                                        value={(eventValues && eventValues.upcomingEventName !== null) ? eventValues.upcomingEventName : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.upcomingEventName && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.upcomingEventName && (\r\n                                                        <span className=\"error\">{formErrors.upcomingEventName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Upcoming-Event-Date\"\r\n                                                        name=\"upcomingEventdate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.upcomingEventdate && true}\r\n                                                        value={(eventValues && eventValues.upcomingEventdate !== null) ? eventValues.upcomingEventdate : null}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.upcomingEventdate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.upcomingEventdate && (\r\n                                                        <span className=\"error\">{formErrors.upcomingEventdate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={6}>\r\n                                                    <TextareaAutosize\r\n                                                        style={{ float: 'left', width: \"100%\" }}\r\n                                                        aria-label=\"empty textarea\"\r\n                                                        placeholder=\"Add Details\"\r\n                                                        name=\"description\"\r\n                                                        error={formErrors.description && true}\r\n                                                        className={formErrors.description && \"input-error\"}\r\n                                                        rowsMin={3}\r\n                                                        className={classes.textField}\r\n                                                        value={(eventValues && eventValues.description !== null) ? eventValues.description : null}\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                    {formErrors.description && (\r\n                                                        <span className=\"error\">{formErrors.description}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={6} style={{ display: 'flex' }} >\r\n\r\n                                                    {\r\n                                                        (eventValues.image === null) ?\r\n                                                            <div>\r\n                                                                <input\r\n                                                                    accept=\"image/*\"\r\n                                                                    className={classes.input}\r\n                                                                    name=\"photo\"\r\n                                                                    id=\"contained-button-file\"\r\n                                                                    type=\"file\"\r\n                                                                    onChange={(e) => uploadSingleFile(e)}\r\n                                                                    style={{ display: 'none' }}\r\n                                                                />\r\n                                                                <label htmlFor=\"contained-button-file\">\r\n                                                                    <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Event Picture </Button>\r\n                                                                </label>\r\n                                                            </div>\r\n                                                            :\r\n                                                            <div>\r\n                                                                <Card className={classes.root}>\r\n                                                                    <CardContent style={{ width: \"550px\" }}>\r\n                                                                        <Grid container className={classes.root} spacing={5}>\r\n                                                                            <Grid item xs={6}>\r\n                                                                                <img src={eventValues.image} alt=\"Event image\" width=\"100%\" height=\"100%\" />\r\n                                                                            </Grid>\r\n                                                                            <input\r\n                                                                                className={classes.input}\r\n                                                                                name=\"photo\"\r\n                                                                                id=\"photo\"\r\n                                                                                type=\"hidden\"\r\n                                                                                value={eventValues.image ? eventValues.image : \"\"}\r\n                                                                            />\r\n                                                                            <Grid item xs={6}>\r\n                                                                                <Button style={{ marginTop: \"70px\" }}\r\n                                                                                    onClick={(e) => removeImg(e)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                            </Grid>\r\n                                                                        </Grid>\r\n                                                                    </CardContent>\r\n                                                                </Card>\r\n                                                            </div>\r\n                                                    }\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Edit</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/upcoming') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid >\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid >\r\n                    </div >\r\n                } />\r\n            < Footer />\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default EditTicket;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Breadcrumb.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\ProtectedRoute.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Header.js",["693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709"],"import React, { useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport AuthApi from \"../Services/Authapi\";\r\nimport ls from \"local-storage\";\r\nimport Logo from \"../../Images/logo.png\";\r\nimport FontAwesomeIconComponent from \"./FontAwesomeIconComponent\";\r\nimport Nav from \"./Nav\";\r\nimport { revokeAccess } from \"../../ScreenShot\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport { Collapse } from \"@material-ui/core\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport StarBorder from \"@material-ui/icons/StarBorder\";\r\nimport { useState } from \"react\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport MailIcon from \"@mui/icons-material/Mail\";\r\nimport NotificationsNoneIcon from \"@mui/icons-material/NotificationsNone\";\r\nimport Notification from \"./Notification\";\r\n// import Timer from \"../Pages/TImer/timer\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nfunction notificationsLabel(count) {\r\n  if (count === 0) {\r\n    return \"no notifications\";\r\n  }\r\n  if (count > 99) {\r\n    return \"more than 99 notifications\";\r\n  }\r\n  return `${count} notifications`;\r\n}\r\n\r\nexport default function MiniDrawer(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const opens = Boolean(anchorEl);\r\n  const [ds, setDs] = React.useState(false);\r\n  const [docu, setDocu] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setDs(!ds);\r\n  };\r\n\r\n  const DocumentClick = () => {\r\n    setDocu(!docu);\r\n  };\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const logOut = async (e) => {\r\n    outTimer();\r\n\r\n    setTimeout(async () => {\r\n      let logOut = await AuthApi.logout();\r\n      if (logOut.status === true) {\r\n        ls.set(\"authToken\", false);\r\n        ls.set(\"isActive\", false);\r\n\r\n        props.setAutUser({ authToken: false, authUser: false });\r\n        // revokeAccess();\r\n      }\r\n      ls.clear();\r\n      window.location.reload();\r\n    }, 1000);\r\n  };\r\n\r\n  const outTimer = async (e) => {\r\n    await AuthApi.outTime();\r\n    // props.stopTimer();\r\n  };\r\n\r\n  // useEffect(\r\n  //   () =>\r\n  //   setTimeout(() => {\r\n  //     console.log(props.roles)\r\n  //   }, 10000));\r\n\r\n  // console.log(props.roles)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            aria-label=\"account of current user\"\r\n            aria-controls=\"menu-appbar\"\r\n            aria-haspopup=\"true\"\r\n            onClick={handleMenu}\r\n            className={classes.ds}\r\n            color=\"inherit\"\r\n          >\r\n            <AccountCircle />\r\n          </IconButton>\r\n\r\n          <Notification />\r\n\r\n          {/* <IconButton\r\n            aria-label={notificationsLabel(100)}\r\n            style={{\r\n              position: \"absolute\",\r\n              right: \"53px\",\r\n              top: \"8px\",\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsNoneIcon  />\r\n            </Badge>\r\n          </IconButton> */}\r\n\r\n          <Menu\r\n            id=\"menu-appbar\"\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={opens}\r\n            onClose={handleClose}\r\n          >\r\n            <MenuItem\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                props.history.push(\"/profile\");\r\n              }}\r\n              primary=\"Profile\"\r\n              title=\"Profile\"\r\n              placement=\"right\"\r\n            >\r\n              Profile\r\n            </MenuItem>\r\n            <MenuItem\r\n              onClick={(e) => {\r\n                logOut(e);\r\n              }}\r\n            >\r\n              Logout\r\n            </MenuItem>\r\n          </Menu>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <img\r\n            style={{ height: \"35px\", paddingRight: \"30px\" }}\r\n            src={Logo}\r\n            alt=\"ds\"\r\n          />\r\n          <h1 style={{ fontSize: \"20px\", paddingRight: \"20px\" }}>CPSI EMS</h1>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === \"rtl\" ? (\r\n              <ChevronRightIcon />\r\n            ) : (\r\n              <ChevronLeftIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {/* <Tooltip title=\"Dashabord\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/dashboard') }}  >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-home\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Dashabord\" />\r\n            </ListItem>\r\n          </Tooltip> */}\r\n          <Nav\r\n            key={Math.random()}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              props.history.push(\"/dashboard\");\r\n            }}\r\n            classes=\"fa fa-home\"\r\n            primary=\"Dashabord\"\r\n            title=\"Dashabord\"\r\n            placement=\"right\"\r\n          />\r\n\r\n          {/* <Tooltip title=\"Manage Permission\" placement=\"right\" style={{ display: (props.authUser && props.authUser.userAccess && props.authUser.userAccess.length > 0 && props.authUser.userAccess.indexOf('manage-permission') > -1) ? \"flex\" : \"none\" }} > */}\r\n          {/* <Tooltip title=\"Manage Permission\" placement=\"right\" >\r\n            <ListItem button onClick={(e) => { props.history.push('/permission') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-lock\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Manage Permission\" />\r\n            </ListItem>\r\n          </Tooltip>\r\n          <Tooltip title=\"Manage Role\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { props.history.push('/role') }}>\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-user\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Manage Role\" />\r\n            </ListItem>\r\n          </Tooltip>\r\n          <Tooltip title=\"Manage Users\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/users') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fa fa-users\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Manage Users\" />\r\n            </ListItem>\r\n          </Tooltip>\r\n          <Tooltip title=\"Leaves & Holidays\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/leaves') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fas fa-sign-out-alt\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary= \"Leaves & Holidays\" />\r\n            </ListItem>\r\n          </Tooltip> */}\r\n          {ls(\"roles\") === \"Super Admin\" || ls(\"roles\") === \"Admin\"\r\n            ? [\r\n                <Nav\r\n                  key={Math.random()}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/permission\");\r\n                  }}\r\n                  classes=\"fa fa-lock\"\r\n                  primary=\"Manage Permission\"\r\n                  title=\"Manage Permission\"\r\n                  placement=\"right\"\r\n                />,\r\n                <Nav\r\n                  key={Math.random()}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/role\");\r\n                  }}\r\n                  classes=\"fa fa-user\"\r\n                  primary=\"Manage Role\"\r\n                  title=\"Manage Role\"\r\n                  placement=\"right\"\r\n                />,\r\n                <Nav\r\n                  key={Math.random()}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/users\");\r\n                  }}\r\n                  classes=\"fa fa-users\"\r\n                  primary=\"Manage Users\"\r\n                  title=\"Manage Users\"\r\n                  placement=\"right\"\r\n                />,\r\n                <Nav\r\n                  key={Math.random()}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/leaves\");\r\n                  }}\r\n                  classes=\"fas fa-sign-out-alt\"\r\n                  primary=\"Leaves & Holidays\"\r\n                  title=\"Leaves & Holidays\"\r\n                  placement=\"right\"\r\n                />,\r\n                <Nav\r\n                  key={Math.random()}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/upcoming\");\r\n                  }}\r\n                  classes=\"fa fa-arrow-right\"\r\n                  primary=\"Upcoming Event\"\r\n                  title=\"Upcoming Event\"\r\n                  placement=\"right\"\r\n                />,\r\n                <Nav\r\n                  key={Math.random()}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/message\");\r\n                  }}\r\n                  classes=\"fa fa-comment\"\r\n                  primary=\"Send Message\"\r\n                  title=\"Send Message\"\r\n                  placement=\"right\"\r\n                />,\r\n                // <Nav\r\n                //   key={Math.random()}\r\n                //   onClick={(e) => {\r\n                //     e.preventDefault();\r\n                //     props.history.push(\"/testing\");\r\n                //   }}\r\n                //   classes=\"\"\r\n                //   primary=\"Testing\"\r\n                //   title=\"Testing\"\r\n                //   placement=\"right\"\r\n                // />,\r\n\r\n                // <Nav\r\n                //   key={Math.random()}\r\n                //   onClick={(e) => {\r\n                //     e.preventDefault();\r\n                //     props.history.push(\"/timer\");\r\n                //   }}\r\n                //   classes=\"fa fa-comment\"\r\n                //   primary=\"Timer\"\r\n                //   title=\"Timer\"\r\n                //   placement=\"right\"\r\n                // />,\r\n              ]\r\n            : null}\r\n          {/* <Tooltip title=\"Leave Tickets\" placement=\"right\">\r\n            <ListItem button onClick={(e) => { e.preventDefault(); props.history.push('/tickets') }} >\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent classes=\"fas fa-ticket-alt\" colorName=\"primary\" fontSize={\"small\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary= \"Leaves Tickets\" />\r\n            </ListItem>\r\n          </Tooltip> */}\r\n          <Nav\r\n            key={Math.random()}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              props.history.push(\"/tickets\");\r\n            }}\r\n            classes=\"fas fa-ticket-alt\"\r\n            primary=\"Leaves Tickets\"\r\n            title=\"Leave Tickets\"\r\n            placement=\"right\"\r\n          />\r\n          <Nav\r\n            key={Math.random()}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              props.history.push(\"/event\");\r\n            }}\r\n            classes=\"fa fa-calendar\"\r\n            primary=\"Event\"\r\n            title=\"Event\"\r\n            placement=\"right\"\r\n          />\r\n          {/* <Nav key={Math.random()} onClick={(e) => { e.preventDefault(); props.history.push('/job') }} classes=\"fas fa-briefcase\" primary=\"Job-Portal\" title=\"JobPortal\" placement=\"right\" /> */}\r\n\r\n          <ListItem button onClick={handleClick}>\r\n            <ListItemIcon>\r\n              <FontAwesomeIconComponent\r\n                classes=\"fas fa-briefcase\"\r\n                colorName=\"primary\"\r\n                fontSize={\"small\"}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Job-Portal\" />\r\n            {ds || open ? <ExpandMore /> : <ExpandLess />}\r\n          </ListItem>\r\n          <Collapse in={ds && open} timeout=\"auto\" unmountOnExit>\r\n            <List disablePadding>\r\n              <ListItem\r\n                button\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  props.history.push(\"/job\");\r\n                }}\r\n                className={classes.nested}\r\n              >\r\n                <ListItemText primary=\"job\" />\r\n              </ListItem>\r\n              <ListItem\r\n                button\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  props.history.push(\"/qulification\");\r\n                }}\r\n                className={classes.nested}\r\n              >\r\n                <ListItemText primary=\"Qualification\" />\r\n              </ListItem>\r\n              <ListItem\r\n                button\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  props.history.push(\"/experience\");\r\n                }}\r\n                className={classes.nested}\r\n              >\r\n                <ListItemText primary=\"Experience\" />\r\n              </ListItem>\r\n            </List>\r\n          </Collapse>\r\n\r\n          <Nav\r\n            key={Math.random()}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              props.history.push(\"/time\");\r\n            }}\r\n            classes=\"far fa-times-circle\"\r\n            primary=\"Time Entry\"\r\n            title=\"Time Entry\"\r\n            placement=\"right\"\r\n          />\r\n\r\n          {ls(\"roles\") === \"Super Admin\" || ls(\"roles\") === \"Admin\" ? (\r\n            <Nav\r\n              key={Math.random()}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                props.history.push(\"/check\");\r\n              }}\r\n              classes=\"fas fa-clipboard-check\"\r\n              primary=\"User Check\"\r\n              title=\"User Check\"\r\n              placement=\"right\"\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          {/* <Nav key={Math.random()} onClick={(e) => { e.preventDefault(); props.history.push('/later') }} classes=\"far fa-file-alt\" primary=\"Documents\" title=\"Documents\" placement=\"right\" /> */}\r\n\r\n          {ls(\"roles\") === \"Super Admin\" || ls(\"roles\") === \"Admin\" ? (\r\n            <ListItem button onClick={DocumentClick}>\r\n              <ListItemIcon>\r\n                <FontAwesomeIconComponent\r\n                  classes=\"far fa-file-alt\"\r\n                  colorName=\"primary\"\r\n                  fontSize={\"small\"}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Documents\" />\r\n              {docu || open ? <ExpandMore /> : <ExpandLess />}\r\n            </ListItem>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          {ls(\"roles\") === \"Super Admin\" || ls(\"roles\") === \"Admin\" ? (\r\n            <Collapse in={docu && open} timeout=\"auto\" unmountOnExit>\r\n              <List disablePadding>\r\n                <ListItem\r\n                  button\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/offer\");\r\n                  }}\r\n                  className={classes.nested}\r\n                >\r\n                  <ListItemText primary=\"User Documents\" />\r\n                </ListItem>\r\n                <ListItem\r\n                  button\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.history.push(\"/latter\");\r\n                  }}\r\n                  className={classes.nested}\r\n                >\r\n                  <ListItemText primary=\"User OfferLatter\" />\r\n                </ListItem>\r\n              </List>\r\n            </Collapse>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          {/* <Nav\r\n            key={Math.random()}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              props.history.push(\"/message\");\r\n            }}\r\n            classes=\"fa fa-comment\"\r\n            primary=\"Send Message\"\r\n            title=\"Send Message\"\r\n            placement=\"right\"\r\n          />\r\n\r\n          <Nav\r\n            key={Math.random()}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              props.history.push(\"/timer\");\r\n            }}\r\n            classes=\"fa fa-comment\"\r\n            primary=\"Timer\"\r\n            title=\"Timer\"\r\n            placement=\"right\"\r\n          /> */}\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {props.component}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: \"hidden\",\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  ds: {\r\n    position: \"absolute\",\r\n    right: 0,\r\n  },\r\n  back: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\JobPortal\\AddJob.js",["710","711","712","713","714","715","716"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\n\r\n\r\n\r\n\r\nconst iniJob = {\r\n    jobtitle: \"\",\r\n    jobdescription: \"\",\r\n    roleresponsibilities: \"\",\r\n    exprequire: \"\",\r\n    minqualification: \"\",\r\n    jobactive: \"\",\r\n    numofvacanciese: '',\r\n    Companyprofile: \"\",\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst AddJob = (props) => {\r\n    const classes = props;\r\n    const [jobportal, setJobPortal] = useState(iniJob);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setJobPortal({ ...jobportal, [name]: value });\r\n        // console.log(ticketValues);\r\n    };\r\n\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const ds = /^[0-9\\b]+$/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n        if (!values.jobtitle) {\r\n            errors.jobtitle = \"Cannot be blank\";\r\n        }\r\n\r\n\r\n        if (!values.jobdescription) {\r\n            errors.jobdescription = \"Cannot be blank\";\r\n        } else if (!regex.test(values.jobdescription)) {\r\n            errors.jobdescription = \"Invalid jobdescription format\";\r\n        }\r\n\r\n        if (!values.roleresponsibilities) {\r\n            errors.roleresponsibilities = \"Cannot be blank\";\r\n        } else if (!regex.test(values.roleresponsibilities)) {\r\n            errors.roleresponsibilities = \"Invalid roleresponsibilities format\";\r\n        }\r\n\r\n        if (!ds.test(values.exprequire)) {\r\n            errors.exprequire = \"Cannot be blank\";\r\n        }\r\n\r\n        if (!values.minqualification) {\r\n            errors.minqualification = \"Cannot be blank\";\r\n        }\r\n\r\n        if (!values.jobactive) {\r\n            errors.jobactive = \"Cannot be blank\";\r\n        }\r\n\r\n        if (!ds.test(values.numofvacanciese)) {\r\n            errors.numofvacanciese = \"only numeric\";\r\n        }\r\n\r\n        if (!values.Companyprofile) {\r\n            errors.Companyprofile = \"Cannot be blank\";\r\n        } else if (!regex.test(values.Companyprofile)) {\r\n            errors.Companyprofile = \"Invalid Companyprofile format\";\r\n        }\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(jobportal));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await job();\r\n        }\r\n    }, [formErrors])\r\n\r\n\r\n    const job = async () => {\r\n\r\n        let create = await AuthApi.createjob(jobportal);\r\n        if (create && create.status === true) {\r\n            props.history.push('/job');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Job-Portal\"\r\n                                    primaryPageLink=\"/job\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add Job-Portal\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Job-Portal</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"Job Title\"\r\n                                                        name=\"jobtitle\"\r\n                                                        label=\"Job-Title\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.jobtitle && true}\r\n                                                        value={jobportal.jobtitle}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.jobtitle && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.jobtitle && (\r\n                                                        <span className=\"error\">{formErrors.jobtitle}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"Number of vacanciese\"\r\n                                                        name=\"numofvacanciese\"\r\n                                                        label=\"Number of vacancies\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.numofvacanciese && true}\r\n                                                        value={jobportal.numofvacanciese}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.numofvacanciese && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.numofvacanciese && (\r\n                                                        <span className=\"error\">{formErrors.numofvacanciese}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={4}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Exp. required</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            name=\"exprequire\"\r\n                                                            error={formErrors.exprequire && true}\r\n                                                            value={jobportal.exprequire}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.exprequire && \"input-error\"}\r\n                                                            label=\"Exp. required\"\r\n                                                        >\r\n                                                            <MenuItem value=\"\">\r\n                                                                <em>None</em>\r\n                                                            </MenuItem>\r\n                                                            <MenuItem value={1}>0</MenuItem>\r\n                                                            <MenuItem value={2}>1</MenuItem>\r\n                                                            <MenuItem value={3}>2</MenuItem>\r\n                                                            <MenuItem value={4}>3</MenuItem>\r\n                                                            <MenuItem value={5}>4</MenuItem>\r\n                                                            <MenuItem value={6}>5</MenuItem>\r\n                                                            <MenuItem value={7}>6</MenuItem>\r\n                                                            <MenuItem value={8}>7</MenuItem>\r\n                                                            <MenuItem value={9}>8</MenuItem>\r\n                                                            <MenuItem value={10}>9</MenuItem>\r\n                                                            <MenuItem value={11}>10</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.exprequire && (\r\n                                                        <span className=\"error\">{formErrors.exprequire}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Min. Qualification </InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            name=\"minqualification\"\r\n                                                            label=\"Min. Qualification\"\r\n                                                            error={formErrors.minqualification && true}\r\n                                                            value={jobportal.minqualification}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.minqualification && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"\">\r\n                                                                <em>None</em>\r\n                                                            </MenuItem>\r\n                                                            <MenuItem value=\"btech\">btech</MenuItem>\r\n                                                            <MenuItem value=\"be\">Btech,BE</MenuItem>\r\n                                                            <MenuItem value=\"graduation\">graduation</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.minqualification && (\r\n                                                        <span className=\"error\">{formErrors.minqualification}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                        <InputLabel id=\"demo-simple-select-outlined-label\">Job active </InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-outlined-label\"\r\n                                                            id=\"demo-simple-select-outlined\"\r\n                                                            name=\"jobactive\"\r\n                                                            label=\"Job active\"\r\n                                                            error={formErrors.jobactive && true}\r\n                                                            value={jobportal.jobactive}\r\n                                                            onChange={handleChange}\r\n                                                            className={formErrors.jobactive && \"input-error\"}\r\n                                                        >\r\n                                                            <MenuItem value=\"\">\r\n                                                                <em>None</em>\r\n                                                            </MenuItem>\r\n                                                            <MenuItem value=\"yes\">Yes</MenuItem>\r\n                                                            <MenuItem value=\"no\">No</MenuItem>\r\n                                                            {/* <MenuItem value={3}>3</MenuItem> */}\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    {formErrors.jobactive && (\r\n                                                        <span className=\"error\">{formErrors.jobactive}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5} >\r\n                                                <Grid item xs={4} >\r\n                                                    <TextareaAutosize\r\n                                                        // fullWidth\r\n                                                        // multiline\r\n                                                        rows={3}\r\n                                                        id=\"Job Description\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Job-Description\"\r\n                                                        name=\"jobdescription\"\r\n                                                        placeholder=\"job description\"\r\n                                                        style={{ width: '450px', height: \"100px\" }}\r\n                                                        error={formErrors.jobdescription}\r\n                                                        value={jobportal.jobdescription}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.jobdescription && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                    // InputLabelProps={{\r\n                                                    //     shrink: true,\r\n                                                    // }}\r\n                                                    />\r\n                                                    {formErrors.jobdescription && (\r\n                                                        <span className=\"error\">{formErrors.jobdescription}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextareaAutosize\r\n                                                        // fullWidth\r\n                                                        // multiline\r\n                                                        rows={3}\r\n                                                        id=\"Company profile\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Company profile\"\r\n                                                        name=\"Companyprofile\"\r\n                                                        placeholder=\"Company profile\"\r\n                                                        style={{ width: '450px', height: \"100px\" }}\r\n                                                        error={formErrors.Companyprofile}\r\n                                                        value={jobportal.Companyprofile}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.Companyprofile && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                    // InputLabelProps={{\r\n                                                    //     shrink: true,\r\n                                                    // }}\r\n                                                    />\r\n                                                    {formErrors.Companyprofile && (\r\n                                                        <span className=\"error\">{formErrors.Companyprofile}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <TextareaAutosize\r\n                                                        // fullWidth\r\n                                                        // multiline\r\n                                                        rows={3}\r\n                                                        id=\"Role&responsibilities\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Role&responsibilities\"\r\n                                                        name=\"roleresponsibilities\"\r\n                                                        placeholder=\"role & responsibilities\"\r\n                                                        style={{ width: '430px', height: \"100px\" }}\r\n                                                        error={formErrors.roleresponsibilities}\r\n                                                        value={jobportal.roleresponsibilities}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.roleresponsibilities && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                    // InputLabelProps={{\r\n                                                    //     shrink: true,\r\n                                                    // }}\r\n                                                    />\r\n                                                    {formErrors.roleresponsibilities && (\r\n                                                        <span className=\"error\">{formErrors.roleresponsibilities}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/job') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddJob;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Experience\\AddExperience.js",["717","718","719","720","721","722","723","724","725","726"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\n\r\nconst inivalue = {\r\n    minExpYear: \"\",\r\n    maxExpYear: \"\",\r\n}\r\n\r\nconst AddExperience = (props) => {\r\n    const classes = props;\r\n    const [exp, setExp] = useState(inivalue);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setExp({ ...exp, [name]: value });\r\n\r\n    };\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const ds = /^[0-9\\b]+$/;\r\n        // const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n        if (!ds.test(values.minExpYear)) {\r\n            errors.minExpYear = \"only numeric\";\r\n        }\r\n\r\n        if (!ds.test(values.maxExpYear)) {\r\n            errors.maxExpYear = \"only numeric\";\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(exp));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await experience();\r\n        }\r\n    }, [formErrors])\r\n\r\n\r\n    const experience = async () => {\r\n\r\n        let create = await AuthApi.createExperience(exp);\r\n        if (create && create.status === true) {\r\n            props.history.push('/experience');\r\n        } else {\r\n            swal({\r\n                title: \"OOPS!\",\r\n                icon: \"fail\",\r\n                message: \"Something went wrong, Please try later!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Experience\"\r\n                                    primaryPageLink=\"/experience\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"Add Experience\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Add Experience</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"minExpYear\"\r\n                                                        name=\"minExpYear\"\r\n                                                        label=\"MinExpYear\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.minExpYear && true}\r\n                                                        value={exp.minExpYear}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.minExpYear && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.minExpYear && (\r\n                                                        <span className=\"error\">{formErrors.minExpYear}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={6}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"maxExpYear\"\r\n                                                        name=\"maxExpYear\"\r\n                                                        label=\"MaxExpYear\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.maxExpYear && true}\r\n                                                        value={exp.maxExpYear}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.maxExpYear && \"input-error\"}\r\n\r\n                                                    />\r\n                                                    {formErrors.maxExpYear && (\r\n                                                        <span className=\"error\">{formErrors.maxExpYear}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} variant=\"contained\" color=\"primary\">Save</Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/experience') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddExperience;\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\CountdownTimer.js",["727","728","729","730","731","732","733","734"],"import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment, { min } from \"moment\";\r\nimport AuthApi from \"./../Services/Authapi\";\r\nimport LoadderButton from \"../Layouts/LoadderButton\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ls from \"local-storage\";\r\n\r\nexport default class CountdownTimer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: parseInt(props.count, 10),\r\n      min: 0,\r\n      sec: 0,\r\n      startTime: this.props.startTime,\r\n      stopTime: this.props.stopTime,\r\n    };\r\n\r\n    if (this.props.timerOn === false) {\r\n      this.scnd();\r\n    }\r\n  }\r\n\r\n  scnd = async () => {\r\n    let timeCount = await AuthApi.durTime();\r\n    // console.log(timeCount);\r\n\r\n    this.props.updateCounterOnload(parseInt(timeCount.totalDurationInSec));\r\n  };\r\n\r\n  format = (time) => {\r\n    const {\r\n      border,\r\n      showTitle,\r\n      direction,\r\n      noPoints,\r\n      color,\r\n      backgroundColor,\r\n      responsive,\r\n      size,\r\n      hideDay,\r\n      hideHours,\r\n      dayTitle,\r\n      hourTitle,\r\n      minuteTitle,\r\n      secondTitle,\r\n      labelSize,\r\n    } = this.props;\r\n\r\n    let seconds = time % 60;\r\n    let minutes = Math.floor(time / 60) % 60;\r\n    let hours = Math.floor(time / 3600) % 24;\r\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\r\n    seconds = seconds < 10 ? `0${seconds}` : seconds;\r\n    hours = hours < 10 ? `0${hours}` : hours;\r\n\r\n    if (showTitle) {\r\n      const borderClass = border ? \"border\" : \"\";\r\n      const responsiveClass = responsive ? \"responsive\" : \"\";\r\n      const classBox = `countBox ${direction}`;\r\n      return (\r\n        <div\r\n          style={{ fontSize: \"20px\" }}\r\n          className={`${classBox} ${borderClass} ${responsiveClass}`}\r\n        >\r\n          <div className=\"countBoxItem\">\r\n            <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>\r\n              {secondTitle}\r\n            </div>\r\n            <div className={\"count\"} style={{ color, backgroundColor }}>\r\n              {seconds}\r\n            </div>\r\n          </div>\r\n          {!noPoints && <span className={\"split\"}>:</span>}\r\n          <div className={\"countBoxItem\"}>\r\n            <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>\r\n              {minuteTitle}\r\n            </div>\r\n            <div className={\"count\"} style={{ color, backgroundColor }}>\r\n              {minutes}\r\n            </div>\r\n          </div>\r\n          {!hideHours && !noPoints && <span className={\"split\"}>:</span>}\r\n          {!hideHours && (\r\n            <div className={\"countBoxItem\"}>\r\n              <div style={{ fontSize: `${labelSize}px` }} className={\"label\"}>\r\n                {hourTitle}\r\n              </div>\r\n              <div className={\"count\"} style={{ color, backgroundColor }}>\r\n                {hours}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const borderClass = border ? \"border\" : \"\";\r\n    const responsiveClass = responsive ? \"responsive\" : \"\";\r\n    const classBox = `inline ${direction}`;\r\n    return (\r\n      <div\r\n        style={{ fontSize: \"100px\" }}\r\n        className={`${classBox} ${borderClass} ${responsiveClass}`}\r\n      >\r\n        {!hideHours && (\r\n          <span className={\"count\"} style={{ color, backgroundColor }}>\r\n            {hours}\r\n          </span>\r\n        )}\r\n        {!hideHours && !noPoints && <span className={\"split\"}>:</span>}\r\n        <span className={\"count\"} style={{ color, backgroundColor }}>\r\n          {minutes}\r\n        </span>\r\n        {!noPoints && <span className={\"split\"}>:</span>}\r\n        <span className={\"count\"} style={{ color, backgroundColor }}>\r\n          {seconds}\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { count } = this.props;\r\n\r\n    const { className, id } = this.props;\r\n\r\n    return (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <div className=\"displayedTime\">{this.format(count)}</div>\r\n        </Grid>\r\n        <Grid item xs={5}></Grid>\r\n        <Grid item xs={2}>\r\n          {this.props.timerOn === false && (\r\n            <LoadderButton onClickFn={this.props.startTimer} btnText=\"In\" />\r\n          )}\r\n          {this.props.timerOn !== false && (\r\n            <LoadderButton onClickFn={this.props.stopTimer} btnText=\"Out\" />\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={5}></Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nCountdownTimer.propTypes = {\r\n  className: PropTypes.string,\r\n  id: PropTypes.string,\r\n  count: PropTypes.number,\r\n  border: PropTypes.bool,\r\n  showTitle: PropTypes.bool,\r\n  direction: PropTypes.oneOf([\"right\", \"left\"]),\r\n  noPoints: PropTypes.bool,\r\n  responsive: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  size: PropTypes.number,\r\n  labelSize: PropTypes.number,\r\n  hideDay: PropTypes.bool,\r\n  hideHours: PropTypes.bool,\r\n  dayTitle: PropTypes.string,\r\n  hourTitle: PropTypes.string,\r\n  minuteTitle: PropTypes.string,\r\n  secondTitle: PropTypes.string,\r\n  onEnd: PropTypes.func,\r\n};\r\n\r\nCountdownTimer.defaultProps = {\r\n  count: 0,\r\n  border: false,\r\n  showTitle: false,\r\n  direction: \"left\",\r\n  noPoints: false,\r\n  color: \"#000\",\r\n  backgroundColor: \"#fff\",\r\n  responsive: false,\r\n  size: 18,\r\n  labelSize: 12,\r\n  hideDay: false,\r\n  hideHours: false,\r\n  dayTitle: \"Day\",\r\n  hourTitle: \"Hour\",\r\n  minuteTitle: \"Min\",\r\n  secondTitle: \"Sec\",\r\n  className: \"\",\r\n  id: \"\",\r\n  onEnd: () => {},\r\n};\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Forms\\AuthForms\\LoginForm.js",["735"],"import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AuthApi from \"../../../Services/Authapi\";\r\nimport swal from \"sweetalert\";\r\nimport ls from \"local-storage\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { getAccess } from \"../../../../ScreenShot\";\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string(\"Enter your email\")\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  password: yup.string(\"Enter your password\").required(\"Password is required\"),\r\n});\r\n\r\nconst LoginForm = (props) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values) => {\r\n      let checkLogin = await AuthApi.login(values);\r\n\r\n      if (checkLogin && checkLogin !== false) {\r\n        ls.set(\"authToken\", checkLogin.access_token);\r\n        ls.set(\"roles\", checkLogin.user.roles[0].name);\r\n        ls.set(\"user\", checkLogin.user);\r\n        ls.set(\"isActive\", false);\r\n        props.setAutUser({\r\n          authUser: checkLogin.data,\r\n          authToken: checkLogin.access_token,\r\n          roles: checkLogin.user.roles[0].name,\r\n          user: checkLogin.user,\r\n        });\r\n        // getAccess();\r\n      } else {\r\n        swal({\r\n          title: \"OOPS!\",\r\n          text: \"Invalid Credentials\",\r\n          icon: \"error\",\r\n        });\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"email\"\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              value={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.email && Boolean(formik.errors.email)}\r\n              helperText={formik.touched.email && formik.errors.email}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"password\"\r\n              name=\"password\"\r\n              variant=\"outlined\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              value={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.password && Boolean(formik.errors.password)}\r\n              helperText={formik.touched.password && formik.errors.password}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\r\n              {\" \"}\r\n              Login{\" \"}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default LoginForm;\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Users\\HandleUser.js",["736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752"],"import React, { Component } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport AddForm from '../../Layouts/Forms/UserForms/AddForm';\r\n\r\n\r\nclass HandleUser extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         users: {\r\n    //             firstName: null,\r\n    //             lastName: null,\r\n    //             email: null,\r\n    //             gender: null,\r\n    //             dob: null,\r\n    //             photo: null,\r\n    //             qualification: null,\r\n    //             last_organization: null,\r\n    //             password: null,\r\n    //             roleName: null,\r\n    //         },\r\n    //         role: false,\r\n    //     }\r\n    // //     this.handleSubmit = this.handleSubmit.bind(this);\r\n    // //     this.updateChange = this.updateChange.bind(this);\r\n    // //     this.imgUpload = this.imgUpload.bind(this);\r\n    // //     this.removeImg = this.removeImg.bind(this);\r\n    // //     this.createUser = this.createUser.bind(this);\r\n    // //    this.roleData_class = this.roleData_class.bind(this);\r\n    // //     this.addRole = this.addRole.bind(this);\r\n    // //    this.roleData_class();\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (this.props && this.props.authToken === false) {\r\n          this.props.history.push('/login');\r\n        }\r\n       \r\n      }\r\n    \r\n      componentWillReceiveProps(props) {\r\n        if (props && props.authToken === false) {\r\n          props.history.push('/login');\r\n        }\r\n      }\r\n\r\n\r\n    // async handleSubmit(e) {\r\n    //     await this.createUser();\r\n\r\n    // }\r\n\r\n    // addRole(e) {\r\n    //     let roleName = [];\r\n    //     roleName.push(e.target.value)\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, roleName: e.target.value }\r\n    //     })\r\n    // }\r\n\r\n    // updateChange(e) {\r\n    //     this.setState({\r\n    //         users: { ...this.state.users, [e.target.name]: e.target.value }\r\n    //     })\r\n\r\n    // }\r\n\r\n\r\n    // roleData_class = async () => {\r\n    //     let role = await AuthApi.getRole();\r\n    //     this.setState({\r\n    //         role: role.data\r\n    //     })\r\n    //     console.log(this.state.role)\r\n    // }\r\n\r\n    // async imgUpload(e) {\r\n    //     const postData = new FormData();\r\n    //     postData.append('file', e.target.files[0]);\r\n    //     let updateImg = await AuthApi.updateImg(postData);\r\n    //     if (updateImg && updateImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: updateImg.data.image_url }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: updateImg.data.image_name })\r\n    //     }\r\n    // }\r\n\r\n    // async removeImg(e) {\r\n    //     let imageLink = this.state.users.photo;\r\n    //     imageLink = imageLink.substr(imageLink.indexOf('/', 7) + 1)\r\n    //     let remImg = await AuthApi.deleteImg(imageLink);\r\n    //     if (remImg && remImg.status === true) {\r\n    //         this.setState({\r\n    //             users: { ...this.state.users, photo: null }\r\n    //         })\r\n    //         this.setState({ uploadedImgName: null })\r\n    //     } else {\r\n\r\n    //     }\r\n\r\n    // }\r\n\r\n    // async createUser() {\r\n    //     let create = await Authapi.createUser(this.state.users)\r\n    //     if (create && create.status === true) {\r\n    //         this.props.history.push('/users');\r\n    //     } else {\r\n    //         swal({\r\n    //             title: \"OOPS!\",\r\n    //             icon: \"fail\",\r\n    //             message: \"Something went wrong, Please try later!\"\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const classes = this.props;\r\n        // let roleOptions = [];\r\n        // if (Object.keys(this.state.role).length > 0) {\r\n        //     Object.keys(this.state.role).forEach((key) => {\r\n        //         roleOptions.push(<MenuItem value={this.state.role[key].name}>{this.state.role[key].name}</MenuItem>)\r\n        //     })\r\n        // }\r\n        // else {\r\n        //     roleOptions.push(<MenuItem value=\"\"><em>Select Role</em></MenuItem>);\r\n        // }\r\n        return (\r\n            <div>\r\n                <Header\r\n                    {...this.props}\r\n                    authUser={this.props.authUser}\r\n                    component={\r\n                        <div>\r\n                            <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                                <CardContent>\r\n                                    <Breadcrumb\r\n                                        {...this.props}\r\n                                        primaryPageName=\"Users\"\r\n                                        primaryPageLink=\"/users\"\r\n                                        isSecondaryPage={true}\r\n                                        secondaryPageName=\"Add\" />\r\n                                </CardContent>\r\n                            </Card>\r\n                            <Grid container className={classes.root} spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Card className={classes.root}>\r\n                                        <CardContent>\r\n                                            <Typography variant=\"h2\">Add User</Typography>\r\n                                            <AddForm  {...this.props} />\r\n                                            {/* <form className={classes.root} noValidate autoComplete=\"off\">\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"firstName\" label=\"First name\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"lastName\" label=\"Last name\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"email\" label=\"Email-address\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5} >\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <FormControl component=\"fieldset\">\r\n                                                            <Grid container className={classes.root} spacing={4} >\r\n                                                                <Grid item xs={12} style={{ display: 'flex' }}>\r\n                                                                    <FormLabel component=\"legend\">Gender</FormLabel>\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                            <RadioGroup aria-label=\"gender\" name=\"gender\" onChange={(e) => { this.updateChange(e) }} fullWidth>\r\n                                                                <Grid container className={classes.root} spacing={2}>\r\n                                                                    <Grid textAlign=\"left\" item xs={6}><FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" /></Grid>\r\n                                                                    <Grid item xs={6}><FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" /></Grid>\r\n                                                                </Grid>\r\n                                                            </RadioGroup>\r\n                                                        </FormControl></Grid>\r\n                                                    <Grid item xs={4}>\r\n                                                        <TextField\r\n                                                            fullWidth\r\n                                                            id=\"date\"\r\n                                                            label=\"Birthday\"\r\n                                                            name=\"dob\"\r\n                                                            type=\"date\"\r\n                                                            onChange={(e) => { this.updateChange(e) }}\r\n                                                            defaultValue=\"2017-05-24\"\r\n                                                            className={classes.textField}\r\n                                                            InputLabelProps={{\r\n                                                                shrink: true,\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        {\r\n                                                            (this.state.users.photo === null) ?\r\n                                                                <div>\r\n                                                                    <input\r\n                                                                        accept=\"image/*\"\r\n                                                                        className={classes.input}\r\n                                                                        id=\"contained-button-file\"\r\n                                                                        type=\"file\"\r\n                                                                        onChange={(e) => this.imgUpload(e)}\r\n                                                                        style={{ display: 'none' }}\r\n                                                                    />\r\n                                                                    <label htmlFor=\"contained-button-file\">\r\n                                                                        <Button variant=\"contained\" color=\"primary\" component=\"span\" > Upload Profile Picture </Button>\r\n                                                                    </label>\r\n                                                                </div>\r\n                                                                :\r\n                                                                <div>\r\n                                                                    <Card className={classes.root}>\r\n                                                                        <CardContent>\r\n                                                                            <Grid container className={classes.root} spacing={5}>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <img src={this.state.users.photo} alt=\"User profile image\" width=\"35\" height=\"35\" />\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                                                                                        {this.state.uploadedImgName}\r\n                                                                                    </Typography>\r\n                                                                                </Grid>\r\n                                                                                <Grid item xs={4}>\r\n                                                                                    <Button onClick={(e) => { this.removeImg(e) }}>\r\n                                                                                        <FontAwesomeIconComponent classes=\"fa fa-trash\" colorName=\"primary\" fontSize={\"small\"} /></Button>\r\n                                                                                </Grid>\r\n                                                                            </Grid>\r\n                                                                        </CardContent>\r\n                                                                    </Card>\r\n                                                                </div>\r\n                                                        }\r\n\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"qualification\" label=\"Qualification\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"last_organization\" label=\"Last Organization\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                    <Grid item xs={4}><TextField fullWidth id=\"outlined-basic\" name=\"password\" type=\"password\" label=\"Password\" variant=\"outlined\" onChange={(e) => { this.updateChange(e) }} /></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={5}>\r\n                                                    <Grid item xs={4}>\r\n                                                        <FormControl variant=\"outlined\" style={{ width: '100%' }}>\r\n                                                            <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\r\n                                                            <Select\r\n                                                                labelId=\"demo-simple-select-outlined-label\"\r\n                                                                id=\"demo-simple-select-outlined\"\r\n                                                                label=\"Role\"\r\n                                                                onChange={(e) => { this.addRole(e) }}\r\n                                                            >{roleOptions}\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} true></Grid>\r\n                                                    <Grid item xs={4} true></Grid>\r\n                                                </Grid>\r\n                                                <Grid container className={classes.root} spacing={3}>\r\n                                                    <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                        <LoadderButton btnType=\"button\" btnText=\"Save User\" onClickFn={this.handleSubmit} />\r\n                                                        <Button type=\"button\" onClick={(e) => { e.preventDefault(); this.props.history.push('/users') }}>Cancel</Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                    <Grid item xs={4}></Grid>\r\n                                                </Grid>\r\n                                            </form> */}\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item xs={6}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    } />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HandleUser;\r\n\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Dashboard.js",["753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780"],"import React, { Component } from \"react\";\r\nimport Header from \"../Layouts/Header\";\r\nimport Footer from \"../Layouts/Footer\";\r\nimport { withStyles, makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Breadcrumb from \"../Layouts/Breadcrumb\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CountdownTimer from \"../Layouts/CountdownTimer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport AuthApi from \"../Services/Authapi\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { FaArrowAltCircleRight, FaArrowAltCircleLeft } from \"react-icons/fa\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport ScreenShot from \"../../ScreenShot\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ls from \"local-storage\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { autoPlay } from \"react-swipeable-views-utils\";\r\nimport Timer from \"./TImer/timer\";\r\nimport { Birthdatecard } from \"./BirthdateCard\";\r\nimport Tableforfilter from \"./Filter/Tableforfilter\";\r\nimport \"./Dashboard.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet length;\r\n\r\nlet bdayID = false;\r\n\r\nlet value;\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classes: useStyles,\r\n      theme: useTheme,\r\n      alertIsOpnen: false,\r\n      page: 0,\r\n      rowsPerPage: 5,\r\n      rows: [],\r\n      totalDurationTime: \"\",\r\n      selectedDate: \"\",\r\n      getData: [],\r\n      current: 0,\r\n      people: [],\r\n      userID: false,\r\n      show: true,\r\n      activeStep: 0,\r\n    };\r\n    this.getAttr = this.getAttr.bind(this);\r\n    this.handleMonthChange = this.handleMonthChange.bind(this);\r\n    this.getEventData = this.getEventData.bind(this);\r\n    // this.handleClick = this.handleClick.bind(this);\r\n    // this.handleClose = this.handleClose.bind(this);\r\n    // this.SlideTransition = this.SlideTransition.bind(this);\r\n    this.notificationForBday = this.notificationForBday.bind(this);\r\n    this.handleClickOpen = this.handleClickOpen.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleStepChange = this.handleStepChange.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props && this.props.authToken === false) {\r\n      this.props.history.push(\"/login\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (props && props.authToken === false) {\r\n      props.history.push(\"/login\");\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAttr();\r\n    this.getEventData();\r\n    // this.handleClick(this.SlideTransition)\r\n    this.handleClickOpen();\r\n    this.notificationForBday();\r\n  }\r\n\r\n  async getEventData() {\r\n    const EventData = await AuthApi.getAllEvents();\r\n\r\n    // for sorting date:-\r\n    // let ds12 = EventData.data\r\n    // let event = ds12.sort((a, b) => new Date(...a.date.split('/').reverse()) - new Date(...b.date.split('/').reverse()));\r\n\r\n    // length = EventData.data.length\r\n    if (EventData && EventData.status === true) {\r\n      this.setState({\r\n        getData: EventData.data,\r\n      });\r\n      // console.log(this.state.getData)\r\n    }\r\n  }\r\n\r\n  async getAttr() {\r\n    let today = new Date();\r\n    let month = today.getMonth() + 1;\r\n    let year = today.getFullYear();\r\n    const attr = await AuthApi.getAttandance(month, year);\r\n    if (attr && attr.status === true) {\r\n      this.setState({\r\n        totalDurationTime: attr.data,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleMonthChange = async (e) => {\r\n    let select = e.target.value;\r\n    let ds = new Date(select);\r\n    console.log(ds);\r\n    let month = ds.getMonth() + 1;\r\n    let year = ds.getFullYear();\r\n    const attr = await AuthApi.getAttandance(month, year);\r\n    console.log(attr + \"ds\");\r\n    if (attr && attr.status === true) {\r\n      this.setState({\r\n        totalDurationTime: attr.data,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({\r\n      page: newPage,\r\n    });\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({\r\n      rowsPerPage: +event.target.value,\r\n    });\r\n  };\r\n\r\n  createData(date, hours, attendance, dayType) {\r\n    return { date, hours, attendance, dayType };\r\n  }\r\n\r\n  nextSlide = () => {\r\n    this.setState({\r\n      current: this.state.current === length - 1 ? 0 : this.state.current + 1,\r\n    });\r\n  };\r\n\r\n  prevSlid = () => {\r\n    this.setState({\r\n      current: this.state.current === 0 ? length - 1 : this.state.current - 1,\r\n    });\r\n  };\r\n\r\n  handleNext = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep + 1,\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      activeStep: this.state.activeStep - 1,\r\n    });\r\n  };\r\n\r\n  handleStepChange = (step) => {\r\n    this.setState({\r\n      activeStep: step,\r\n    });\r\n  };\r\n\r\n  notificationForBday = async () => {\r\n    const bday = await AuthApi.bdayNotification();\r\n    if (bday && bday.status === true) {\r\n      this.setState({\r\n        people: bday.data,\r\n      });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  // SlideTransition = (props) => {\r\n  //   return <Slide {...props} direction=\"up\" />;\r\n  // }\r\n\r\n  // handleClick = (Transition) => () => {\r\n  //   this.setState({\r\n  //     show: true,\r\n  //     Transition,\r\n  //   });\r\n  // };\r\n\r\n  // handleClose = () => {\r\n  //   this.setState({\r\n\r\n  //     show: false,\r\n  //   });\r\n  // };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      show: true,\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      show: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const classes = this.props;\r\n    const theme = this.props;\r\n    const len = length;\r\n    const columns = [\r\n      { id: \"date\", label: \"Date\", minWidth: 170 },\r\n      { id: \"hours\", label: \"Hours / Min\", minWidth: 100 },\r\n      { id: \"attendance\", label: \"Attendance\", minWidth: 100 },\r\n      { id: \"dayType\", label: \"Day-Type\", minWidth: 170, align: \"right\" },\r\n    ];\r\n\r\n    const fs = ls(\"user\").id;\r\n\r\n    const { people } = this.state;\r\n\r\n    if (people.length) {\r\n      bdayID = people.some((data) => data.id === fs);\r\n    }\r\n\r\n    // people.map((elements) => {\r\n    //   // console.log(elements)\r\n    //   temp = {\r\n    //     'id': elements.id\r\n    //   }\r\n    //   // console.log(temp)\r\n    // })\r\n\r\n    // var weekday = new Array(7);\r\n    // weekday[0] = \"Sunday\";\r\n    // weekday[1] = \"Monday\";\r\n    // weekday[2] = \"Tuesday\";\r\n    // weekday[3] = \"Wednesday\";\r\n    // weekday[4] = \"Thursday\";\r\n    // weekday[5] = \"Friday\";\r\n    // weekday[6] = \"Saturday\";\r\n\r\n    var month = new Array();\r\n    month[0] = \"01\";\r\n    month[1] = \"02\";\r\n    month[2] = \"03\";\r\n    month[3] = \"04\";\r\n    month[4] = \"05\";\r\n    month[5] = \"06\";\r\n    month[6] = \"07\";\r\n    month[7] = \"08\";\r\n    month[8] = \"09\";\r\n    month[9] = \"10\";\r\n    month[10] = \"11\";\r\n    month[11] = \"12\";\r\n\r\n    // var d = new Date();\r\n    // var n = month[d.getMonth()];\r\n    var d = new Date();\r\n    var dateString = d.getFullYear() + \"-\" + month[d.getMonth()];\r\n\r\n    // var date = String(d.getDate()).padStart(2, '0');\r\n    // var month1 = String(d.getMonth()).padStart(2, '0');\r\n    // var year = d.getFullYear();\r\n    // var days = [];\r\n    // var i;\r\n    // for (i = 1; i < date; i++) {\r\n    //   var today1 = new Date(year, month1, i);\r\n    //   var day = {\r\n    //     // 'date': today1.getDate() + '-' + (today1.getMonth() + 1) + '-' + today1.getFullYear(),\r\n    //     // 'date': today1.getFullYear() + '-' + (today1.getMonth() + 1) + '-' + today1.getDate(),\r\n    //     'date': today1.getFullYear() + '-' + String(d.getMonth() + 1).padStart(2, '0') + '-' + String(today1.getDate()).padStart(2, '0'),\r\n    //     'hours': \"3 hours 57 minites \",\r\n    //     'attendance': 'present',\r\n    //     'dayType': 'Full day'\r\n    //   };\r\n    //   days.push(day);\r\n    // }\r\n\r\n    var ds = [this.state.totalDurationTime];\r\n    // console.log(ds)\r\n\r\n    let rows = [];\r\n\r\n    if (ds[0].length !== 0) {\r\n      ds[0].forEach((element1) => {\r\n        rows.push(\r\n          this.createData(\r\n            element1.date,\r\n            element1.hours,\r\n            element1.attendance,\r\n            element1.dayType\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      rows.push(this.createData(\"Data Not Found\"));\r\n    }\r\n\r\n    // days.forEach((element) => {\r\n\r\n    //   rows.push(this.createData(element.date, element.hour, element.attendance, element.dayType));\r\n\r\n    // })\r\n\r\n    if (!Array.isArray(len) || len.length <= 0) {\r\n    }\r\n\r\n    const active = this.state.getData;\r\n\r\n    const maxStep = active.length;\r\n\r\n    const val = this.state.activeStep;\r\n\r\n    const AutoPlaySwipeableViews = autoPlay(SwipeableViews);\r\n    return (\r\n      <div>\r\n        <Header\r\n          {...this.props}\r\n          authUser={this.props.authUser}\r\n          setAutUser={this.props.setAutUser}\r\n          component={\r\n            <div>\r\n              {/* <Button onClick={this.handleClick(this.SlideTransition)}>Slide Transition</Button> */}\r\n              {bdayID && (\r\n                <Dialog\r\n                  open={this.state.show}\r\n                  onClose={this.handleClose}\r\n                  aria-labelledby=\"alert-dialog-title\"\r\n                  aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                  {/* <DialogTitle id=\"alert-dialog-title\">\r\n                    {\" From Cherrypic Software Solutions\"}\r\n                  </DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                      Happy Birthday To You,\r\n                    </DialogContentText>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                      Have A Great Day\r\n                    </DialogContentText>\r\n                  </DialogContent> */}\r\n\r\n                  <div className=\"Birthdatecard\" style={{ overflow: \"hidden\" }}>\r\n                    <Birthdatecard handleClose={this.handleClose} />\r\n                  </div>\r\n                </Dialog>\r\n              )}\r\n              <Card className={classes.root} style={{ marginBottom: \"3%\" }}>\r\n                <CardContent>\r\n                  <Breadcrumb\r\n                    {...this.props}\r\n                    primaryPageName=\"Dashboard\"\r\n                    primaryPageLink=\"/dashboard\"\r\n                    isSecondaryPage={false}\r\n                    secondaryPageName=\"\"\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n              <Grid container className={this.state.classes.root} spacing={2}>\r\n                {/* <Grid item xs={6}>\r\n                  <Card\r\n                    className={classes.root}\r\n                    style={{ marginBottom: \"3%\", height: \"100%\" }}\r\n                  >\r\n                    <CardContent> */}\r\n                {/* <Timer /> */}\r\n                {/* <CountdownTimer\r\n                        count={this.props.count}\r\n                        timerOn={this.props.timerOn}\r\n                        updateCounter={this.props.updateCounter}\r\n                        startTimer={this.props.startTimer}\r\n                        stopTimer={this.props.stopTimer}\r\n                        startTime={this.props.startTime}\r\n                        {...this.props}\r\n                      /> */}\r\n                {/* </CardContent>\r\n                  </Card>\r\n                </Grid> */}\r\n                <Grid item xs={12}>\r\n                  <Card\r\n                    className={classes.root}\r\n                    style={{ marginBottom: \"3%\", height: \"100%\" }}\r\n                  >\r\n                    <CardContent>\r\n                      {/* <Grid\r\n                        container\r\n                        justify=\"space-around\"\r\n                        style={{ top: \"20px\", paddingBottom: \"10px\" }}\r\n                      >\r\n                        <TextField\r\n                          id=\"datetime-local\"\r\n                          label=\"Select Month/Year\"\r\n                          views={[\"year\", \"month\"]}\r\n                          variant=\"outlined\"\r\n                          // format=\"yyyy/mm\"\r\n                          defaultValue={dateString}\r\n                          type=\"Month\"\r\n                          // openTo=\"month\"\r\n                          // value={this.state.selectedDate}\r\n                          onChange={this.handleMonthChange}\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                          inputProps={{ min: \"2020-01\", max: dateString }}\r\n                        />\r\n                      </Grid> */}\r\n                      <Tableforfilter />\r\n                      {/* <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                          <TableHead>\r\n                            <TableRow>\r\n                              {columns.map((column) => (\r\n                                <StyledTableCell\r\n                                  key={column.id}\r\n                                  align={column.align}\r\n                                  style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                  {column.label}\r\n                                </StyledTableCell>\r\n                              ))}\r\n                            </TableRow>\r\n                          </TableHead>\r\n                          <TableBody>\r\n                            {rows\r\n                              .slice(\r\n                                this.state.page * this.state.rowsPerPage,\r\n                                this.state.page * this.state.rowsPerPage +\r\n                                  this.state.rowsPerPage\r\n                              )\r\n                              .map((row) => {\r\n                                return (\r\n                                  <StyledTableRow\r\n                                    hover\r\n                                    role=\"checkbox\"\r\n                                    tabIndex={-1}\r\n                                    key={Math.random()}\r\n                                  >\r\n                                    {columns.map((column) => {\r\n                                      const value = row[column.id];\r\n                                      return (\r\n                                        <StyledTableCell\r\n                                          key={column.id}\r\n                                          align={column.align}\r\n                                        >\r\n                                          {column.format &&\r\n                                          typeof value === \"number\"\r\n                                            ? column.format(value)\r\n                                            : value}\r\n                                        </StyledTableCell>\r\n                                      );\r\n                                    })}\r\n                                  </StyledTableRow>\r\n                                );\r\n                              })}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                      <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25, 100]}\r\n                        component=\"div\"\r\n                        count={rows.length}\r\n                        rowsPerPage={this.state.rowsPerPage}\r\n                        page={this.state.page}\r\n                        onChangePage={this.handleChangePage}\r\n                        onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                      /> */}\r\n                      {/* </Paper> */}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container className={this.state.classes.root} spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Card\r\n                    className={classes.root}\r\n                    style={{ marginBottom: \"3%\", height: \"95%\" }}\r\n                  >\r\n                    <CardContent>\r\n                      <h2>UPCOMING EVENT</h2>\r\n                      <Grid item xs={6}>\r\n                        <div className=\"slider\" style={{ width: \"200%\" }}>\r\n                          {active.map((item, index) => {\r\n                            return (\r\n                              <div\r\n                                className={\r\n                                  index === this.state.activeStep\r\n                                    ? \"slide active\"\r\n                                    : \"slide\"\r\n                                }\r\n                                key={index}\r\n                              >\r\n                                {index === this.state.activeStep && (\r\n                                  <div>\r\n                                    <Paper\r\n                                      square\r\n                                      elevation={0}\r\n                                      className=\"top-left\"\r\n                                    >\r\n                                      <h2>\r\n                                        <span> {item.name}</span>\r\n                                      </h2>\r\n                                      <h2>\r\n                                        <span>{item.date}</span>\r\n                                      </h2>\r\n                                      <h2>\r\n                                        <span>{item.description}</span>\r\n                                      </h2>\r\n                                    </Paper>\r\n                                    <AutoPlaySwipeableViews\r\n                                      axis={\r\n                                        theme.direction === \"rtl\"\r\n                                          ? \"x-reverse\"\r\n                                          : \"x\"\r\n                                      }\r\n                                      index={this.state.activeStep}\r\n                                      onChangeIndex={this.handleStepChange}\r\n                                      enableMouseEvents\r\n                                    >\r\n                                      {active.map((step, index) => (\r\n                                        <div key={step.name}>\r\n                                          {Math.abs(\r\n                                            this.state.activeStep - index\r\n                                          ) <= 2 ? (\r\n                                            <img\r\n                                              src={step.image}\r\n                                              width=\"100%\"\r\n                                            />\r\n                                          ) : null}\r\n                                        </div>\r\n                                      ))}\r\n                                    </AutoPlaySwipeableViews>\r\n                                    <MobileStepper\r\n                                      steps={maxStep}\r\n                                      position=\"static\"\r\n                                      variant=\"text\"\r\n                                      activeStep={this.state.activeStep}\r\n                                      nextButton={\r\n                                        <Button\r\n                                          size=\"small\"\r\n                                          onClick={this.handleNext}\r\n                                          disabled={\r\n                                            this.state.activeStep ===\r\n                                            maxStep - 1\r\n                                          }\r\n                                        >\r\n                                          Next\r\n                                          {theme.direction === \"rtl\" ? (\r\n                                            <KeyboardArrowLeft />\r\n                                          ) : (\r\n                                            <KeyboardArrowRight />\r\n                                          )}\r\n                                        </Button>\r\n                                      }\r\n                                      backButton={\r\n                                        <Button\r\n                                          size=\"small\"\r\n                                          onClick={this.handleBack}\r\n                                          disabled={this.state.activeStep === 0}\r\n                                        >\r\n                                          {theme.direction === \"rtl\" ? (\r\n                                            <KeyboardArrowRight />\r\n                                          ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                          )}\r\n                                          Back\r\n                                        </Button>\r\n                                      }\r\n                                    />\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n\r\n                        {/* <Typography variant=\"caption\" style={{ float: 'left' }} display=\"block\">\r\n\r\n\r\n                          <section className=\"slider\">\r\n                            <SkipPreviousIcon className=\"left-arrow\" onClick={this.prevSlid} />\r\n                            <SkipNextIcon className=\"right-arrow\" onClick={this.nextSlide} />\r\n\r\n                            {this.state.getData.map((item, index) => {\r\n\r\n                              return (\r\n                                <div className={index === this.state.current ? 'slide active' : 'slide'} key={index}>\r\n                                  {index === this.state.current && (\r\n                                    <div className=\"slide-image\">\r\n                                      <div className=\"top-left\">\r\n                                        <Typography style={{ fontSize: \"2em\", marginTop: 155 }}>Event Name :   {item.name} </Typography>\r\n                                        <Typography style={{ fontSize: \"2em\" }}>Event Date :   {item.date}  </Typography>\r\n                                        <Typography style={{ fontSize: \"2em\" }}>Description :  {item.description}  </Typography>\r\n                                      </div>\r\n                                      <div className=\"imagediv\">\r\n                                        <img src={item.image} className=\"image\" />\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n\r\n                                </div>\r\n\r\n                              )\r\n\r\n                            })}\r\n                          </section>\r\n                        </Typography> */}\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                  <Card\r\n                    className={\"root\"}\r\n                    style={{ marginBottom: \"3%\", height: \"95%\" }}\r\n                  >\r\n                    <CardContent>\r\n                      <h2 style={{ color: \"black\", textAlign: \"center\" }}>\r\n                        {people.length} - Birthdays Today\r\n                      </h2>\r\n                      <Grid item xs={6}>\r\n                        {people.map((person) => {\r\n                          const { id, firstName, photo } = person;\r\n\r\n                          return (\r\n                            <div className=\"container\" key={id}>\r\n                              <div className=\"avtar\">\r\n                                <div>\r\n                                  <img\r\n                                    className=\"bday\"\r\n                                    src={photo}\r\n                                    alt={firstName}\r\n                                  />\r\n                                </div>\r\n\r\n                                <div>\r\n                                  <h3>{firstName}</h3>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          }\r\n        />\r\n        <Footer {...this.props} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#1B6E95\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  paper1: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default Dashboard;\r\n",["781","782"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Services\\Authapi.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\LoadderButton.js",["783"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Component } from \"react\";\r\n\r\nclass LoadderButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  handleButtonClick = async () => {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    if (this.props && typeof this.props.onClickFn === \"function\") {\r\n      await this.props.onClickFn();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const classes = {\r\n      root: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n      },\r\n      wrapper: {\r\n        margin: \"10% auto\",\r\n        position: \"relative\",\r\n      },\r\n      buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        \"&:hover\": {\r\n          backgroundColor: green[700],\r\n        },\r\n      },\r\n      fabProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: -6,\r\n        left: -6,\r\n        zIndex: 1,\r\n      },\r\n      buttonProgress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n      },\r\n    };\r\n    return (\r\n      <div className={classes.root}>\r\n        <div className={classes.wrapper}>\r\n          <Button\r\n            type={\r\n              this.props && this.props.btnType ? this.props.btnType : \"button\"\r\n            }\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={this.state.loading}\r\n            onClick={this.handleButtonClick}\r\n            className={this.props.actionClass}\r\n          >\r\n            {this.props.btnText}\r\n          </Button>\r\n          {this.state.loading && <CircularProgress size={20} color=\"black\" />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadderButton;\r\n\r\n// export default function LoadderButton(props) {\r\n//   const classes = useStyles();\r\n//   const [loading, setLoading] = React.useState(false);\r\n\r\n//   const handleButtonClick = async () => {\r\n//     setLoading(true);\r\n//     if (props && typeof props.onClickFn === 'function') {\r\n//       await props.onClickFn();\r\n//     }\r\n//     setLoading(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classes.root}>\r\n//       <div className={classes.wrapper}>\r\n//         <Button\r\n//           type={(props && props.btnType) ? props.btnType : 'button'}\r\n//           variant=\"contained\"\r\n//           color=\"primary\"\r\n//           disabled={loading}\r\n//           onClick={handleButtonClick}\r\n//         >\r\n//           {props.btnText}\r\n//         </Button>\r\n//         {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Leaves\\EditLeaves.js",["784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\n\r\n\r\nconst inileaves = {\r\n    leaveName: \"\",\r\n    dateRange: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    leave_id: 0,\r\n}\r\n\r\n\r\n\r\nconst AddLeaves = (props) => {\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(inileaves);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (props && props.authToken === false) {\r\n            props.history.push('/login');\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // console.log(value);\r\n        setEditValues({ ...editValues, [name]: value });\r\n        // console.log(editValues);\r\n    }\r\n\r\n\r\n    function dateDiffInDays(startDate, endDate) {\r\n        // round to the nearest whole number\r\n        return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));\r\n    }\r\n    const daysDiff = dateDiffInDays(new Date(editValues.startDate), new Date(editValues.endDate));\r\n    const dsp = dateDiffInDays(new Date(), new Date(editValues.startDate));\r\n\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        const regex = /^[a-zA-Z]/;\r\n        const dateR = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\r\n\r\n\r\n\r\n\r\n        if (!values.leaveName) {\r\n            errors.leaveName = \"Cannot be blank\";\r\n        } else if (!regex.test(values.leaveName)) {\r\n            errors.leaveName = \"Invalid firstName format\";\r\n        }\r\n\r\n        if (!values.startDate) {\r\n            errors.startDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.startDate)) {\r\n            errors.startDate = \"Invalid dob format\"\r\n        }\r\n        else {\r\n\r\n\r\n            if (dsp < 0) {\r\n                errors.startDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n        if (!values.endDate) {\r\n            errors.endDate = \"Cannot be  blank\";\r\n        } else if (!dateR.test(values.endDate)) {\r\n            errors.endDate = \"Invalid dob format\"\r\n        } else {\r\n\r\n\r\n            if (daysDiff < 0) {\r\n                errors.endDate = \"you can chooes only Current and future Date\";\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return errors;\r\n    };\r\n\r\n    const getLeaveData = async () => {\r\n        let leaveId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        let leave = await AuthApi.singleLeave(leaveId);\r\n\r\n        let leave_id = leaveId;\r\n        let leaveName = (leave.status === true && leave.data && leave.data.name && (leave.data.name !== null || leave.data.name !== false)) ? leave.data.name : null;\r\n        let dateRangeArr = (leave.status === true && leave.data && leave.data.date_range) ? leave.data.date_range : null;\r\n\r\n\r\n        setEditValues({\r\n            // ...editValuesObj,\r\n            leaveName: leaveName,\r\n            startDate: dateRangeArr[0],\r\n            endDate: dateRangeArr[1],\r\n            leave_id: leave_id,\r\n        })\r\n\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getLeaveData(),\r\n                500), []);\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(editValues));\r\n        setIsSubmitting(true);\r\n\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (Object.keys(formErrors).length === 0 && isSubmitting) {\r\n            await editUser1();\r\n        }\r\n    }, [formErrors]);\r\n\r\n\r\n    function diffday() {\r\n        const a = moment(editValues.startDate);\r\n        const b = moment(editValues.endDate);\r\n        const dateRangeArr = [];\r\n\r\n\r\n        var startDate = editValues.startDate;\r\n        dateRangeArr.push(startDate);\r\n\r\n        var endDate = editValues.endDate;\r\n        dateRangeArr.push(endDate);\r\n\r\n\r\n        editValues.dateRange = dateRangeArr;\r\n        editValues.noOfDays = b.diff(a, 'days')\r\n\r\n    }\r\n\r\n    const editUser1 = async (id) => {\r\n        let status = await AuthApi.updateLeave(editValues, editValues.leave_id);\r\n        console.log(status);\r\n        if (status && status.status === true) {\r\n            props.history.push('/leaves');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Leaves\"\r\n                                    primaryPageLink=\"/leaves\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"edit\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h2\">Edit leave</Typography>\r\n                                        <form className={classes.form} onSubmit={handleSubmit} >\r\n                                            <Grid container className={classes.root} spacing={5}>\r\n                                                <Grid item xs={3}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"leaveName\"\r\n                                                        name=\"leaveName\"\r\n                                                        label=\"LeaveName\"\r\n                                                        variant=\"outlined\"\r\n                                                        error={formErrors.leaveName && true}\r\n                                                        value={(editValues && editValues.leaveName !== null) ? editValues.leaveName : null}\r\n                                                        focused={(editValues && editValues.leaveName !== null) ? true : false}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.leaveName && \"input-error\"}\r\n                                                    />\r\n                                                    {formErrors.leaveName && (\r\n                                                        <span className=\"error\">{formErrors.leaveName}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Start-date\"\r\n                                                        name=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        formate=\"yyyy-mm-dd\"\r\n                                                        error={formErrors.startDate && true}\r\n                                                        value={(editValues && editValues.startDate !== null) ? editValues.startDate : null}\r\n                                                        focused={(editValues && editValues.startDate !== null) ? true : false}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.startDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.startDate && (\r\n                                                        <span className=\"error\">{formErrors.startDate}</span>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <h3 style={{ marginTop: \"30px\" }}>To</h3>\r\n                                                <Grid item xs={4}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"date\"\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"End-date\"\r\n                                                        name=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        error={formErrors.endDate && true}\r\n                                                        value={(editValues && editValues.endDate !== null) ? editValues.endDate : null}\r\n                                                        focused={(editValues && editValues.endDate !== null) ? true : false}\r\n                                                        onChange={handleChange}\r\n                                                        className={formErrors.endDate && \"input-error\"}\r\n                                                        className={classes.textField}\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                        }}\r\n                                                    />\r\n                                                    {formErrors.endDate && (\r\n                                                        <span className=\"error\">{formErrors.endDate}</span>\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                            <Grid container className={classes.root} spacing={3}>\r\n                                                <Grid item xs={4} style={{ display: 'flex' }}>\r\n                                                    <Button type=\"submit\" style={{ marginTop: \"10px\" }} onClick={(e) => { diffday() }} variant=\"contained\" color=\"primary\" >Edit Leaves </Button>\r\n                                                    <Button type=\"button\" style={{ marginTop: \"10px\" }} onClick={(e) => { e.preventDefault(); props.history.push('/leaves') }}>Cancel</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                                <Grid item xs={4}></Grid>\r\n                                            </Grid>\r\n                                        </form>\r\n\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xs={6}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLeaves;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\BirthdateCard.js",["808","809"],"import React from \"react\";\r\nimport \"./Birthday.css\";\r\nimport ls from \"local-storage\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nexport const Birthdatecard = (props) => {\r\n  const Name = ls(\"user\").firstName;\r\n\r\n  return (\r\n    <div className=\"birthday-card\">\r\n      <div className=\"card\">\r\n        <div className=\"cake\">\r\n          <div className=\"cake-bottom\"></div>\r\n          <div className=\"cake-middle\"></div>\r\n          <div className=\"cake-top\"></div>\r\n          <div className=\"candle\"></div>\r\n          <div className=\"flame\"></div>\r\n          <div className=\"shadow\"></div>\r\n        </div>\r\n        <div className=\"confetti\">\r\n          <div className=\"squareOne\"></div>\r\n          <div className=\"squareTwo\"></div>\r\n          <div className=\"squareThree\"></div>\r\n          <div className=\"squareFour\"></div>\r\n          <div className=\"squareFive\"></div>\r\n          <div className=\"squareSix\"></div>\r\n          <div className=\"squareSeven\"></div>\r\n          <div className=\"squareEight\"></div>\r\n          <div className=\"squareNine\"></div>\r\n          <div className=\"squareTen\"></div>\r\n        </div>\r\n        <div>\r\n          <IconButton className=\"button\" onClick={props.handleClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"text\">\r\n          <span className=\"line\">Happy Birthday!&nbsp;{Name}</span>\r\n        </div>\r\n\r\n        <div className=\"text-container\">\r\n          <p>\r\n            I hope your special day will bring you lots of happiness, love, and\r\n            fun. You deserve them a lot. Enjoy!\r\n          </p>\r\n          <p>Hope your day goes great!</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\ShowEvent\\Show.js",["810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../Layouts/Header';\r\nimport Footer from '../../Layouts/Footer';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumb from '../../Layouts/Breadcrumb';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Input from '@material-ui/core/Input'\r\nimport { TextField } from '@material-ui/core';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport LoadderButton from '../../Layouts/LoadderButton';\r\nimport AuthApi from '../../Services/Authapi';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FontAwesomeIconComponent from '../../Layouts/FontAwesomeIconComponent';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport Authapi from '../../Services/Authapi';\r\nimport swal from 'sweetalert';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { now } from 'moment';\r\nimport moment from 'moment';\r\nimport ls from \"local-storage\";\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        width: 500,\r\n        height: 450,\r\n    },\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    content: {\r\n        flex: '1 0 auto',\r\n    },\r\n    cover: {\r\n        width: 151,\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        alignItems: 'left',\r\n        paddingLeft: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n    },\r\n    playIcon: {\r\n        height: 38,\r\n        width: 38,\r\n    },\r\n    hr: {\r\n        borderTop: \"3px solid #1B6E95\",\r\n    }\r\n\r\n}));\r\n\r\nconst iniEvent = {\r\n    eventName: \"\",\r\n    eventdate: \"\",\r\n    event_Id: 0,\r\n}\r\n\r\n\r\n\r\n\r\nconst Show = (props) => {\r\n    const classes1 = useStyles();\r\n    const classes = props;\r\n    const [editValues, setEditValues] = useState(iniEvent);\r\n    const [apiImages, setApiImages] = useState({ images: [] })\r\n    // const [stringImages, setStringImages] = useState({ images: [] });\r\n\r\n\r\n\r\n    const getEventData = async () => {\r\n        let eventId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1];\r\n        console.log(eventId)\r\n        let event = await AuthApi.singleEvent(eventId);\r\n        console.log(event)\r\n        let event_Id = eventId\r\n\r\n        let eventName = (event.status === true && event.data && event.data.name && (event.data.name !== null || event.data.name !== false)) ? event.data.name : null;\r\n        let eventdate = (event.status === true && event.data && event.data.date) ? event.data.date : null;\r\n        let images = (event.status === true && event.data && event.data.images) ? event.data.images : null;\r\n        console.log(images)\r\n        let ds = JSON.parse(images)\r\n        // console.log(ds);\r\n\r\n\r\n        setEditValues({\r\n            eventName: eventName,\r\n            eventdate: eventdate,\r\n            event_Id: event_Id,\r\n\r\n\r\n        });\r\n\r\n\r\n        setApiImages({\r\n            images: ds\r\n        })\r\n\r\n\r\n    }\r\n    useEffect(\r\n        () =>\r\n            setTimeout(\r\n                () => getEventData(),\r\n                500), []);\r\n\r\n\r\n    // const renderApiPhotos = (source) => {\r\n    //     return source.map((photo, index) => {\r\n    //         // stringImages.images.push(selectedImages)\r\n    //         return <div key={Math.random()} style={{ float: \"left\" }}>\r\n    //             <img src={photo} key={photo} alt=\"User profile image\" style={{ padding: \"10px\" }} width=\"150px\" height=\"150px\" />\r\n\r\n    //         </div>\r\n    //     })\r\n\r\n\r\n    // }\r\n\r\n    const renderApiPhotos = (source) => {\r\n        return <GridList cellHeight={160} className={classes.gridList} cols={3}>\r\n            {source.map((photo, index) => (\r\n                <GridListTile key={photo} cols={index.cols || 1} >\r\n                    <img src={photo} alt=\"User profile image\" width=\"250px\" height=\"250px\" />\r\n                </GridListTile>\r\n            ))}\r\n        </GridList>\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                {...props}\r\n                authUser={props.authUser}\r\n                component={\r\n                    <div>\r\n                        <Card className={classes.root} style={{ marginBottom: '3%' }}>\r\n                            <CardContent>\r\n                                <Breadcrumb\r\n                                    {...props}\r\n                                    primaryPageName=\"Event\"\r\n                                    primaryPageLink=\"/event\"\r\n                                    isSecondaryPage={true}\r\n                                    secondaryPageName=\"View Event\" />\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Grid container className={classes.root} spacing={2} >\r\n                            <Grid item xs={6} >\r\n                                <Card className={classes.root}>\r\n                                    <CardContent>\r\n                                        <Grid container className={classes1.controls} spacing={3}  >\r\n                                            <Grid container item xs={12} spacing={3}>\r\n                                                <Typography style={{ color: \"#1B6E95\" }} variant=\"h4\"> View Event</Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid container className={classes.root} spacing={5}>\r\n                                            <Grid item xs={4}></Grid>\r\n                                            <Grid item xs={4}></Grid>\r\n                                            <Grid item xs={4}></Grid>\r\n                                        </Grid>\r\n                                        <Grid container className={classes1.controls} spacing={3}>\r\n                                            <Grid item xs={4}>\r\n\r\n                                                <Typography style={{ float: 'left' }} variant=\"h6\">Event-Name  :</Typography>\r\n\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n\r\n                                                <Typography style={{ float: 'left' }} display=\"block\">\r\n                                                    {editValues.eventName}\r\n                                                </Typography>\r\n\r\n                                            </Grid>\r\n\r\n                                        </Grid>\r\n                                        <Grid container className={classes1.controls} spacing={3}>\r\n                                            <Grid item xs={4}>\r\n                                                <Typography style={{ float: 'left' }} variant=\"h6\">Event-Date  :</Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n\r\n                                                <Typography style={{ float: 'left' }} display=\"block\">{editValues.eventdate}</Typography>\r\n\r\n                                            </Grid>\r\n\r\n                                        </Grid>\r\n\r\n                                        <Grid container className={classes1.controls} spacing={5} >\r\n                                            <Grid item xs={4}>\r\n                                                <Typography style={{ float: 'left' }} variant=\"h6\">Event Iamges  :</Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                {/* <div style={{ float: \"left\" }}> */}\r\n                                                {/* <Card> */}\r\n                                                {/* <GridList cellHeight={135} className={classes.gridList} cols={3}> */}\r\n                                                {renderApiPhotos(apiImages.images)}\r\n                                                {/* </GridList> */}\r\n\r\n                                                {/* </Card> */}\r\n                                                {/* </div> */}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </div>\r\n                } />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Show;","C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\UpcomingEvent\\Upcoming.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Pages\\Qulification\\QulificationList.js",[],"C:\\xampp\\htdocs\\cpsi-ems\\src\\index.js",[],["833","834"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\Pagenotfound.js",["835","836"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport './PageNotfound.css';\r\n\r\nconst Pagenotfound = (props) => {\r\n    return (\r\n        <div class=\"flex\" id=\"pagenotfound\">\r\n            <h1>404 Error Page #!</h1>\r\n            <p class=\"zoom-area\"><b>make a cool 404 page.</b>  </p>\r\n            <section class=\"error-container\">\r\n                <span>4</span>\r\n                <span><span class=\"screen-reader-text\">0</span></span>\r\n                <span>4</span>\r\n            </section>\r\n\r\n            <a button class=\"more-link\" onClick={(e) => { e.preventDefault(); props.history.push('/dashboard') }}>Go back</a>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Pagenotfound;",["837","838"],"C:\\xampp\\htdocs\\cpsi-ems\\src\\components\\Layouts\\Notification.js",["839"],{"ruleId":"840","severity":1,"message":"841","line":9,"column":3,"nodeType":"842","messageId":"843","endLine":9,"endColumn":11},{"ruleId":"840","severity":1,"message":"844","line":56,"column":8,"nodeType":"842","messageId":"843","endLine":56,"endColumn":12},{"ruleId":"845","replacedBy":"846"},{"ruleId":"847","replacedBy":"848"},{"ruleId":"845","replacedBy":"849"},{"ruleId":"847","replacedBy":"850"},{"ruleId":"840","severity":1,"message":"851","line":4,"column":8,"nodeType":"842","messageId":"843","endLine":4,"endColumn":17},{"ruleId":"840","severity":1,"message":"852","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":25},{"ruleId":"840","severity":1,"message":"853","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"854","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":24},{"ruleId":"840","severity":1,"message":"855","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":16},{"ruleId":"840","severity":1,"message":"856","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":17},{"ruleId":"840","severity":1,"message":"857","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":18},{"ruleId":"858","severity":1,"message":"859","line":277,"column":3,"nodeType":"860","messageId":"861","endLine":284,"endColumn":4},{"ruleId":"862","severity":1,"message":"863","line":287,"column":37,"nodeType":"864","messageId":"861","endLine":287,"endColumn":39},{"ruleId":"845","replacedBy":"865"},{"ruleId":"847","replacedBy":"866"},{"ruleId":"845","replacedBy":"867"},{"ruleId":"847","replacedBy":"868"},{"ruleId":"840","severity":1,"message":"844","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":12},{"ruleId":"845","replacedBy":"869"},{"ruleId":"847","replacedBy":"870"},{"ruleId":"840","severity":1,"message":"871","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":18},{"ruleId":"840","severity":1,"message":"872","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":32},{"ruleId":"873","severity":1,"message":"874","line":114,"column":21,"nodeType":"875","messageId":"876","endLine":114,"endColumn":32},{"ruleId":"845","replacedBy":"877"},{"ruleId":"847","replacedBy":"878"},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":32},{"ruleId":"840","severity":1,"message":"883","line":20,"column":10,"nodeType":"842","messageId":"843","endLine":20,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"844","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":12},{"ruleId":"840","severity":1,"message":"885","line":26,"column":10,"nodeType":"842","messageId":"843","endLine":26,"endColumn":13},{"ruleId":"840","severity":1,"message":"886","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":14},{"ruleId":"887","severity":1,"message":"888","line":158,"column":23,"nodeType":"889","endLine":158,"endColumn":25,"suggestions":"890"},{"ruleId":"887","severity":1,"message":"891","line":170,"column":15,"nodeType":"892","endLine":174,"endColumn":6},{"ruleId":"887","severity":1,"message":"893","line":174,"column":8,"nodeType":"889","endLine":174,"endColumn":20,"suggestions":"894"},{"ruleId":"895","severity":1,"message":"896","line":269,"column":57,"nodeType":"897","endLine":269,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":295,"column":57,"nodeType":"897","endLine":295,"endColumn":86},{"ruleId":"840","severity":1,"message":"898","line":1,"column":38,"nodeType":"842","messageId":"843","endLine":1,"endColumn":44},{"ruleId":"840","severity":1,"message":"899","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"900","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":21},{"ruleId":"840","severity":1,"message":"883","line":22,"column":10,"nodeType":"842","messageId":"843","endLine":22,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":15},{"ruleId":"840","severity":1,"message":"844","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":12},{"ruleId":"840","severity":1,"message":"901","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":26,"column":8,"nodeType":"842","messageId":"843","endLine":26,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":14},{"ruleId":"840","severity":1,"message":"904","line":28,"column":10,"nodeType":"842","messageId":"843","endLine":28,"endColumn":16},{"ruleId":"840","severity":1,"message":"885","line":28,"column":18,"nodeType":"842","messageId":"843","endLine":28,"endColumn":21},{"ruleId":"840","severity":1,"message":"886","line":29,"column":8,"nodeType":"842","messageId":"843","endLine":29,"endColumn":14},{"ruleId":"840","severity":1,"message":"905","line":45,"column":10,"nodeType":"842","messageId":"843","endLine":45,"endColumn":22},{"ruleId":"840","severity":1,"message":"906","line":46,"column":8,"nodeType":"842","messageId":"843","endLine":46,"endColumn":13},{"ruleId":"840","severity":1,"message":"907","line":49,"column":8,"nodeType":"842","messageId":"843","endLine":49,"endColumn":21},{"ruleId":"840","severity":1,"message":"908","line":52,"column":5,"nodeType":"842","messageId":"843","endLine":52,"endColumn":11},{"ruleId":"840","severity":1,"message":"909","line":129,"column":5,"nodeType":"842","messageId":"843","endLine":129,"endColumn":11},{"ruleId":"840","severity":1,"message":"910","line":173,"column":10,"nodeType":"842","messageId":"843","endLine":173,"endColumn":13},{"ruleId":"840","severity":1,"message":"911","line":173,"column":15,"nodeType":"842","messageId":"843","endLine":173,"endColumn":21},{"ruleId":"840","severity":1,"message":"912","line":175,"column":10,"nodeType":"842","messageId":"843","endLine":175,"endColumn":15},{"ruleId":"840","severity":1,"message":"913","line":175,"column":17,"nodeType":"842","messageId":"843","endLine":175,"endColumn":25},{"ruleId":"873","severity":1,"message":"874","line":382,"column":15,"nodeType":"875","messageId":"876","endLine":382,"endColumn":26},{"ruleId":"873","severity":1,"message":"874","line":440,"column":24,"nodeType":"875","messageId":"876","endLine":440,"endColumn":35},{"ruleId":"914","severity":1,"message":"915","line":561,"column":45,"nodeType":"864","messageId":"916","endLine":561,"endColumn":46},{"ruleId":"845","replacedBy":"917"},{"ruleId":"847","replacedBy":"918"},{"ruleId":"840","severity":1,"message":"919","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":20},{"ruleId":"840","severity":1,"message":"920","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":24},{"ruleId":"840","severity":1,"message":"901","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":16},{"ruleId":"840","severity":1,"message":"921","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":22},{"ruleId":"840","severity":1,"message":"900","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":19},{"ruleId":"840","severity":1,"message":"903","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":14},{"ruleId":"840","severity":1,"message":"844","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":12},{"ruleId":"840","severity":1,"message":"922","line":46,"column":11,"nodeType":"842","messageId":"843","endLine":46,"endColumn":16},{"ruleId":"840","severity":1,"message":"923","line":47,"column":11,"nodeType":"842","messageId":"843","endLine":47,"endColumn":13},{"ruleId":"887","severity":1,"message":"924","line":78,"column":61,"nodeType":"889","endLine":78,"endColumn":63,"suggestions":"925"},{"ruleId":"887","severity":1,"message":"891","line":86,"column":13,"nodeType":"892","endLine":90,"endColumn":4},{"ruleId":"887","severity":1,"message":"926","line":90,"column":6,"nodeType":"889","endLine":90,"endColumn":18,"suggestions":"927"},{"ruleId":"845","replacedBy":"928"},{"ruleId":"847","replacedBy":"929"},{"ruleId":"840","severity":1,"message":"919","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":20},{"ruleId":"840","severity":1,"message":"920","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":24},{"ruleId":"840","severity":1,"message":"901","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":16},{"ruleId":"840","severity":1,"message":"921","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":22},{"ruleId":"840","severity":1,"message":"900","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":19},{"ruleId":"840","severity":1,"message":"903","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":14},{"ruleId":"840","severity":1,"message":"844","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":12},{"ruleId":"840","severity":1,"message":"922","line":48,"column":15,"nodeType":"842","messageId":"843","endLine":48,"endColumn":20},{"ruleId":"887","severity":1,"message":"930","line":97,"column":23,"nodeType":"889","endLine":97,"endColumn":25,"suggestions":"931"},{"ruleId":"887","severity":1,"message":"891","line":105,"column":15,"nodeType":"892","endLine":109,"endColumn":6},{"ruleId":"887","severity":1,"message":"932","line":109,"column":8,"nodeType":"889","endLine":109,"endColumn":20,"suggestions":"933"},{"ruleId":"840","severity":1,"message":"934","line":1,"column":38,"nodeType":"842","messageId":"843","endLine":1,"endColumn":48},{"ruleId":"840","severity":1,"message":"935","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":15},{"ruleId":"840","severity":1,"message":"936","line":13,"column":10,"nodeType":"842","messageId":"843","endLine":13,"endColumn":16},{"ruleId":"840","severity":1,"message":"937","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":15},{"ruleId":"840","severity":1,"message":"938","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":16},{"ruleId":"840","severity":1,"message":"939","line":36,"column":12,"nodeType":"842","messageId":"843","endLine":36,"endColumn":24},{"ruleId":"840","severity":1,"message":"940","line":37,"column":9,"nodeType":"842","messageId":"843","endLine":37,"endColumn":21},{"ruleId":"887","severity":1,"message":"891","line":69,"column":13,"nodeType":"892","endLine":73,"endColumn":4},{"ruleId":"887","severity":1,"message":"941","line":73,"column":6,"nodeType":"889","endLine":73,"endColumn":18,"suggestions":"942"},{"ruleId":"943","severity":1,"message":"944","line":118,"column":11,"nodeType":"945","endLine":125,"endColumn":13},{"ruleId":"946","severity":1,"message":"947","line":4,"column":3,"nodeType":"860","messageId":"948","endLine":6,"endColumn":4},{"ruleId":"845","replacedBy":"949"},{"ruleId":"847","replacedBy":"950"},{"ruleId":"840","severity":1,"message":"951","line":15,"column":9,"nodeType":"842","messageId":"843","endLine":15,"endColumn":16},{"ruleId":"840","severity":1,"message":"952","line":6,"column":3,"nodeType":"842","messageId":"843","endLine":6,"endColumn":10},{"ruleId":"840","severity":1,"message":"953","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":18},{"ruleId":"840","severity":1,"message":"954","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":15},{"ruleId":"914","severity":1,"message":"915","line":113,"column":46,"nodeType":"864","messageId":"916","endLine":113,"endColumn":47},{"ruleId":"862","severity":1,"message":"863","line":244,"column":11,"nodeType":"864","messageId":"861","endLine":244,"endColumn":13},{"ruleId":"862","severity":1,"message":"863","line":250,"column":18,"nodeType":"864","messageId":"861","endLine":250,"endColumn":20},{"ruleId":"840","severity":1,"message":"951","line":15,"column":9,"nodeType":"842","messageId":"843","endLine":15,"endColumn":16},{"ruleId":"845","replacedBy":"955"},{"ruleId":"847","replacedBy":"956"},{"ruleId":"957","severity":1,"message":"958","line":83,"column":15,"nodeType":"959","messageId":"960","endLine":83,"endColumn":16,"suggestions":"961"},{"ruleId":"957","severity":1,"message":"962","line":83,"column":17,"nodeType":"959","messageId":"960","endLine":83,"endColumn":18,"suggestions":"963"},{"ruleId":"957","severity":1,"message":"958","line":83,"column":37,"nodeType":"959","messageId":"960","endLine":83,"endColumn":38,"suggestions":"964"},{"ruleId":"957","severity":1,"message":"962","line":83,"column":39,"nodeType":"959","messageId":"960","endLine":83,"endColumn":40,"suggestions":"965"},{"ruleId":"895","severity":1,"message":"896","line":508,"column":15,"nodeType":"897","endLine":508,"endColumn":44},{"ruleId":"895","severity":1,"message":"896","line":749,"column":25,"nodeType":"897","endLine":749,"endColumn":54},{"ruleId":"840","severity":1,"message":"966","line":2,"column":8,"nodeType":"842","messageId":"843","endLine":2,"endColumn":14},{"ruleId":"840","severity":1,"message":"967","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":19},{"ruleId":"840","severity":1,"message":"900","line":4,"column":8,"nodeType":"842","messageId":"843","endLine":4,"endColumn":19},{"ruleId":"840","severity":1,"message":"899","line":5,"column":8,"nodeType":"842","messageId":"843","endLine":5,"endColumn":13},{"ruleId":"840","severity":1,"message":"968","line":6,"column":10,"nodeType":"842","messageId":"843","endLine":6,"endColumn":19},{"ruleId":"840","severity":1,"message":"901","line":7,"column":8,"nodeType":"842","messageId":"843","endLine":7,"endColumn":18},{"ruleId":"840","severity":1,"message":"969","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":12},{"ruleId":"840","severity":1,"message":"970","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":24},{"ruleId":"840","severity":1,"message":"971","line":15,"column":14,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"972","line":15,"column":19,"nodeType":"842","messageId":"843","endLine":15,"endColumn":22},{"ruleId":"840","severity":1,"message":"973","line":16,"column":10,"nodeType":"842","messageId":"843","endLine":16,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":21},{"ruleId":"840","severity":1,"message":"974","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":12},{"ruleId":"840","severity":1,"message":"975","line":21,"column":10,"nodeType":"842","messageId":"843","endLine":21,"endColumn":16},{"ruleId":"840","severity":1,"message":"951","line":70,"column":13,"nodeType":"842","messageId":"843","endLine":70,"endColumn":20},{"ruleId":"845","replacedBy":"976"},{"ruleId":"847","replacedBy":"977"},{"ruleId":"840","severity":1,"message":"968","line":9,"column":10,"nodeType":"842","messageId":"843","endLine":9,"endColumn":19},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"966","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":14},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"978","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":15},{"ruleId":"840","severity":1,"message":"872","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":32},{"ruleId":"840","severity":1,"message":"901","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":14},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":32},{"ruleId":"840","severity":1,"message":"883","line":20,"column":10,"nodeType":"842","messageId":"843","endLine":20,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"901","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":14},{"ruleId":"840","severity":1,"message":"885","line":26,"column":10,"nodeType":"842","messageId":"843","endLine":26,"endColumn":13},{"ruleId":"957","severity":1,"message":"958","line":82,"column":15,"nodeType":"959","messageId":"960","endLine":82,"endColumn":16,"suggestions":"979"},{"ruleId":"957","severity":1,"message":"962","line":82,"column":17,"nodeType":"959","messageId":"960","endLine":82,"endColumn":18,"suggestions":"980"},{"ruleId":"957","severity":1,"message":"958","line":82,"column":37,"nodeType":"959","messageId":"960","endLine":82,"endColumn":38,"suggestions":"981"},{"ruleId":"957","severity":1,"message":"962","line":82,"column":39,"nodeType":"959","messageId":"960","endLine":82,"endColumn":40,"suggestions":"982"},{"ruleId":"887","severity":1,"message":"891","line":119,"column":13,"nodeType":"892","endLine":123,"endColumn":4},{"ruleId":"887","severity":1,"message":"983","line":123,"column":6,"nodeType":"889","endLine":123,"endColumn":18,"suggestions":"984"},{"ruleId":"895","severity":1,"message":"896","line":223,"column":29,"nodeType":"897","endLine":223,"endColumn":58},{"ruleId":"895","severity":1,"message":"896","line":247,"column":29,"nodeType":"897","endLine":247,"endColumn":58},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":32},{"ruleId":"840","severity":1,"message":"883","line":20,"column":10,"nodeType":"842","messageId":"843","endLine":20,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"844","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":12},{"ruleId":"840","severity":1,"message":"901","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":14},{"ruleId":"840","severity":1,"message":"885","line":26,"column":10,"nodeType":"842","messageId":"843","endLine":26,"endColumn":13},{"ruleId":"840","severity":1,"message":"886","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":14},{"ruleId":"840","severity":1,"message":"985","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":10},{"ruleId":"957","severity":1,"message":"958","line":70,"column":31,"nodeType":"959","messageId":"960","endLine":70,"endColumn":32,"suggestions":"986"},{"ruleId":"957","severity":1,"message":"962","line":70,"column":33,"nodeType":"959","messageId":"960","endLine":70,"endColumn":34,"suggestions":"987"},{"ruleId":"957","severity":1,"message":"958","line":70,"column":53,"nodeType":"959","messageId":"960","endLine":70,"endColumn":54,"suggestions":"988"},{"ruleId":"957","severity":1,"message":"962","line":70,"column":55,"nodeType":"959","messageId":"960","endLine":70,"endColumn":56,"suggestions":"989"},{"ruleId":"887","severity":1,"message":"990","line":126,"column":23,"nodeType":"889","endLine":126,"endColumn":25,"suggestions":"991"},{"ruleId":"943","severity":1,"message":"944","line":159,"column":17,"nodeType":"945","endLine":159,"endColumn":130},{"ruleId":"887","severity":1,"message":"891","line":212,"column":15,"nodeType":"892","endLine":216,"endColumn":6},{"ruleId":"887","severity":1,"message":"992","line":216,"column":8,"nodeType":"889","endLine":216,"endColumn":20,"suggestions":"993"},{"ruleId":"895","severity":1,"message":"896","line":286,"column":57,"nodeType":"897","endLine":286,"endColumn":86},{"ruleId":"840","severity":1,"message":"994","line":9,"column":10,"nodeType":"842","messageId":"843","endLine":9,"endColumn":16},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":13},{"ruleId":"840","severity":1,"message":"883","line":21,"column":10,"nodeType":"842","messageId":"843","endLine":21,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":15},{"ruleId":"840","severity":1,"message":"901","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":26,"column":8,"nodeType":"842","messageId":"843","endLine":26,"endColumn":14},{"ruleId":"840","severity":1,"message":"885","line":27,"column":10,"nodeType":"842","messageId":"843","endLine":27,"endColumn":13},{"ruleId":"840","severity":1,"message":"886","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":14},{"ruleId":"840","severity":1,"message":"995","line":29,"column":8,"nodeType":"842","messageId":"843","endLine":29,"endColumn":16},{"ruleId":"840","severity":1,"message":"919","line":30,"column":10,"nodeType":"842","messageId":"843","endLine":30,"endColumn":20},{"ruleId":"840","severity":1,"message":"996","line":31,"column":8,"nodeType":"842","messageId":"843","endLine":31,"endColumn":17},{"ruleId":"840","severity":1,"message":"871","line":32,"column":8,"nodeType":"842","messageId":"843","endLine":32,"endColumn":18},{"ruleId":"957","severity":1,"message":"958","line":132,"column":31,"nodeType":"959","messageId":"960","endLine":132,"endColumn":32,"suggestions":"997"},{"ruleId":"957","severity":1,"message":"962","line":132,"column":33,"nodeType":"959","messageId":"960","endLine":132,"endColumn":34,"suggestions":"998"},{"ruleId":"957","severity":1,"message":"958","line":132,"column":53,"nodeType":"959","messageId":"960","endLine":132,"endColumn":54,"suggestions":"999"},{"ruleId":"957","severity":1,"message":"962","line":132,"column":55,"nodeType":"959","messageId":"960","endLine":132,"endColumn":56,"suggestions":"1000"},{"ruleId":"887","severity":1,"message":"891","line":175,"column":15,"nodeType":"892","endLine":179,"endColumn":6},{"ruleId":"887","severity":1,"message":"1001","line":179,"column":8,"nodeType":"889","endLine":179,"endColumn":20,"suggestions":"1002"},{"ruleId":"895","severity":1,"message":"896","line":256,"column":57,"nodeType":"897","endLine":256,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":285,"column":57,"nodeType":"897","endLine":285,"endColumn":86},{"ruleId":"943","severity":1,"message":"944","line":317,"column":81,"nodeType":"945","endLine":317,"endColumn":157},{"ruleId":"840","severity":1,"message":"919","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":20},{"ruleId":"840","severity":1,"message":"920","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":24},{"ruleId":"840","severity":1,"message":"901","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":16},{"ruleId":"840","severity":1,"message":"921","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":22},{"ruleId":"840","severity":1,"message":"900","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":19},{"ruleId":"840","severity":1,"message":"903","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":14},{"ruleId":"840","severity":1,"message":"922","line":46,"column":15,"nodeType":"842","messageId":"843","endLine":46,"endColumn":20},{"ruleId":"840","severity":1,"message":"923","line":47,"column":15,"nodeType":"842","messageId":"843","endLine":47,"endColumn":17},{"ruleId":"887","severity":1,"message":"891","line":69,"column":15,"nodeType":"892","endLine":73,"endColumn":6},{"ruleId":"887","severity":1,"message":"1003","line":73,"column":8,"nodeType":"889","endLine":73,"endColumn":20,"suggestions":"1004"},{"ruleId":"840","severity":1,"message":"1005","line":17,"column":5,"nodeType":"842","messageId":"843","endLine":17,"endColumn":13},{"ruleId":"840","severity":1,"message":"1006","line":37,"column":12,"nodeType":"842","messageId":"843","endLine":37,"endColumn":21},{"ruleId":"840","severity":1,"message":"1007","line":37,"column":23,"nodeType":"842","messageId":"843","endLine":37,"endColumn":35},{"ruleId":"957","severity":1,"message":"958","line":56,"column":33,"nodeType":"959","messageId":"960","endLine":56,"endColumn":34,"suggestions":"1008"},{"ruleId":"957","severity":1,"message":"962","line":56,"column":35,"nodeType":"959","messageId":"960","endLine":56,"endColumn":36,"suggestions":"1009"},{"ruleId":"957","severity":1,"message":"958","line":56,"column":55,"nodeType":"959","messageId":"960","endLine":56,"endColumn":56,"suggestions":"1010"},{"ruleId":"957","severity":1,"message":"962","line":56,"column":57,"nodeType":"959","messageId":"960","endLine":56,"endColumn":58,"suggestions":"1011"},{"ruleId":"895","severity":1,"message":"896","line":783,"column":57,"nodeType":"897","endLine":783,"endColumn":86},{"ruleId":"840","severity":1,"message":"1012","line":5,"column":36,"nodeType":"842","messageId":"843","endLine":5,"endColumn":45},{"ruleId":"840","severity":1,"message":"1013","line":5,"column":61,"nodeType":"842","messageId":"843","endLine":5,"endColumn":66},{"ruleId":"840","severity":1,"message":"1014","line":2,"column":8,"nodeType":"842","messageId":"843","endLine":2,"endColumn":17},{"ruleId":"840","severity":1,"message":"871","line":4,"column":8,"nodeType":"842","messageId":"843","endLine":4,"endColumn":18},{"ruleId":"840","severity":1,"message":"996","line":8,"column":8,"nodeType":"842","messageId":"843","endLine":8,"endColumn":17},{"ruleId":"840","severity":1,"message":"1015","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":30},{"ruleId":"840","severity":1,"message":"1016","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":18},{"ruleId":"840","severity":1,"message":"1017","line":29,"column":7,"nodeType":"842","messageId":"843","endLine":29,"endColumn":10},{"ruleId":"873","severity":1,"message":"874","line":55,"column":15,"nodeType":"875","messageId":"876","endLine":55,"endColumn":26},{"ruleId":"840","severity":1,"message":"1018","line":69,"column":9,"nodeType":"842","messageId":"843","endLine":69,"endColumn":19},{"ruleId":"957","severity":1,"message":"958","line":86,"column":15,"nodeType":"959","messageId":"960","endLine":86,"endColumn":16,"suggestions":"1019"},{"ruleId":"957","severity":1,"message":"962","line":86,"column":17,"nodeType":"959","messageId":"960","endLine":86,"endColumn":18,"suggestions":"1020"},{"ruleId":"957","severity":1,"message":"958","line":86,"column":37,"nodeType":"959","messageId":"960","endLine":86,"endColumn":38,"suggestions":"1021"},{"ruleId":"957","severity":1,"message":"962","line":86,"column":39,"nodeType":"959","messageId":"960","endLine":86,"endColumn":40,"suggestions":"1022"},{"ruleId":"887","severity":1,"message":"1023","line":215,"column":37,"nodeType":"889","endLine":215,"endColumn":39,"suggestions":"1024"},{"ruleId":"887","severity":1,"message":"891","line":251,"column":13,"nodeType":"892","endLine":255,"endColumn":4},{"ruleId":"887","severity":1,"message":"1025","line":255,"column":6,"nodeType":"889","endLine":255,"endColumn":18,"suggestions":"1026"},{"ruleId":"895","severity":1,"message":"896","line":375,"column":15,"nodeType":"897","endLine":375,"endColumn":44},{"ruleId":"943","severity":1,"message":"944","line":407,"column":25,"nodeType":"945","endLine":412,"endColumn":27},{"ruleId":"895","severity":1,"message":"896","line":596,"column":25,"nodeType":"897","endLine":596,"endColumn":54},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":32},{"ruleId":"840","severity":1,"message":"883","line":20,"column":10,"nodeType":"842","messageId":"843","endLine":20,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"885","line":26,"column":10,"nodeType":"842","messageId":"843","endLine":26,"endColumn":13},{"ruleId":"840","severity":1,"message":"985","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":10},{"ruleId":"957","severity":1,"message":"958","line":78,"column":31,"nodeType":"959","messageId":"960","endLine":78,"endColumn":32,"suggestions":"1027"},{"ruleId":"957","severity":1,"message":"962","line":78,"column":33,"nodeType":"959","messageId":"960","endLine":78,"endColumn":34,"suggestions":"1028"},{"ruleId":"957","severity":1,"message":"958","line":78,"column":53,"nodeType":"959","messageId":"960","endLine":78,"endColumn":54,"suggestions":"1029"},{"ruleId":"957","severity":1,"message":"962","line":78,"column":55,"nodeType":"959","messageId":"960","endLine":78,"endColumn":56,"suggestions":"1030"},{"ruleId":"887","severity":1,"message":"891","line":120,"column":15,"nodeType":"892","endLine":124,"endColumn":6},{"ruleId":"887","severity":1,"message":"1031","line":124,"column":8,"nodeType":"889","endLine":124,"endColumn":20,"suggestions":"1032"},{"ruleId":"895","severity":1,"message":"896","line":227,"column":57,"nodeType":"897","endLine":227,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":250,"column":57,"nodeType":"897","endLine":250,"endColumn":86},{"ruleId":"840","severity":1,"message":"994","line":9,"column":10,"nodeType":"842","messageId":"843","endLine":9,"endColumn":16},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":32},{"ruleId":"840","severity":1,"message":"1033","line":20,"column":10,"nodeType":"842","messageId":"843","endLine":20,"endColumn":26},{"ruleId":"840","severity":1,"message":"883","line":20,"column":28,"nodeType":"842","messageId":"843","endLine":20,"endColumn":46},{"ruleId":"840","severity":1,"message":"884","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"901","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":14},{"ruleId":"840","severity":1,"message":"885","line":26,"column":10,"nodeType":"842","messageId":"843","endLine":26,"endColumn":13},{"ruleId":"840","severity":1,"message":"886","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":14},{"ruleId":"840","severity":1,"message":"995","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":16},{"ruleId":"840","severity":1,"message":"919","line":29,"column":10,"nodeType":"842","messageId":"843","endLine":29,"endColumn":20},{"ruleId":"840","severity":1,"message":"996","line":30,"column":8,"nodeType":"842","messageId":"843","endLine":30,"endColumn":17},{"ruleId":"840","severity":1,"message":"871","line":31,"column":8,"nodeType":"842","messageId":"843","endLine":31,"endColumn":18},{"ruleId":"943","severity":1,"message":"944","line":99,"column":17,"nodeType":"945","endLine":99,"endColumn":130},{"ruleId":"957","severity":1,"message":"958","line":124,"column":31,"nodeType":"959","messageId":"960","endLine":124,"endColumn":32,"suggestions":"1034"},{"ruleId":"957","severity":1,"message":"962","line":124,"column":33,"nodeType":"959","messageId":"960","endLine":124,"endColumn":34,"suggestions":"1035"},{"ruleId":"957","severity":1,"message":"958","line":124,"column":53,"nodeType":"959","messageId":"960","endLine":124,"endColumn":54,"suggestions":"1036"},{"ruleId":"957","severity":1,"message":"962","line":124,"column":55,"nodeType":"959","messageId":"960","endLine":124,"endColumn":56,"suggestions":"1037"},{"ruleId":"887","severity":1,"message":"891","line":151,"column":15,"nodeType":"892","endLine":155,"endColumn":6},{"ruleId":"887","severity":1,"message":"1038","line":155,"column":8,"nodeType":"889","endLine":155,"endColumn":20,"suggestions":"1039"},{"ruleId":"895","severity":1,"message":"896","line":231,"column":57,"nodeType":"897","endLine":231,"endColumn":86},{"ruleId":"840","severity":1,"message":"919","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":20},{"ruleId":"840","severity":1,"message":"921","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":22},{"ruleId":"840","severity":1,"message":"844","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":12},{"ruleId":"887","severity":1,"message":"1040","line":145,"column":23,"nodeType":"889","endLine":145,"endColumn":25,"suggestions":"1041"},{"ruleId":"887","severity":1,"message":"891","line":155,"column":15,"nodeType":"892","endLine":159,"endColumn":6},{"ruleId":"887","severity":1,"message":"1042","line":159,"column":8,"nodeType":"889","endLine":159,"endColumn":20,"suggestions":"1043"},{"ruleId":"895","severity":1,"message":"896","line":354,"column":57,"nodeType":"897","endLine":354,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":380,"column":57,"nodeType":"897","endLine":380,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":406,"column":57,"nodeType":"897","endLine":406,"endColumn":86},{"ruleId":"957","severity":1,"message":"958","line":46,"column":33,"nodeType":"959","messageId":"960","endLine":46,"endColumn":34,"suggestions":"1044"},{"ruleId":"957","severity":1,"message":"962","line":46,"column":35,"nodeType":"959","messageId":"960","endLine":46,"endColumn":36,"suggestions":"1045"},{"ruleId":"957","severity":1,"message":"958","line":46,"column":55,"nodeType":"959","messageId":"960","endLine":46,"endColumn":56,"suggestions":"1046"},{"ruleId":"957","severity":1,"message":"962","line":46,"column":57,"nodeType":"959","messageId":"960","endLine":46,"endColumn":58,"suggestions":"1047"},{"ruleId":"887","severity":1,"message":"891","line":80,"column":15,"nodeType":"892","endLine":84,"endColumn":6},{"ruleId":"887","severity":1,"message":"1048","line":84,"column":8,"nodeType":"889","endLine":84,"endColumn":20,"suggestions":"1049"},{"ruleId":"895","severity":1,"message":"896","line":159,"column":57,"nodeType":"897","endLine":159,"endColumn":86},{"ruleId":"840","severity":1,"message":"978","line":1,"column":8,"nodeType":"842","messageId":"843","endLine":1,"endColumn":15},{"ruleId":"840","severity":1,"message":"1050","line":1,"column":17,"nodeType":"842","messageId":"843","endLine":1,"endColumn":25},{"ruleId":"840","severity":1,"message":"1051","line":1,"column":27,"nodeType":"842","messageId":"843","endLine":1,"endColumn":36},{"ruleId":"840","severity":1,"message":"985","line":4,"column":8,"nodeType":"842","messageId":"843","endLine":4,"endColumn":10},{"ruleId":"840","severity":1,"message":"978","line":5,"column":8,"nodeType":"842","messageId":"843","endLine":5,"endColumn":15},{"ruleId":"1052","severity":1,"message":"1053","line":24,"column":1,"nodeType":"1054","messageId":"1055","endLine":26,"endColumn":18},{"ruleId":"840","severity":1,"message":"852","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":25},{"ruleId":"840","severity":1,"message":"975","line":17,"column":10,"nodeType":"842","messageId":"843","endLine":17,"endColumn":16},{"ruleId":"840","severity":1,"message":"1056","line":17,"column":18,"nodeType":"842","messageId":"843","endLine":17,"endColumn":23},{"ruleId":"840","severity":1,"message":"1057","line":17,"column":25,"nodeType":"842","messageId":"843","endLine":17,"endColumn":29},{"ruleId":"840","severity":1,"message":"1058","line":17,"column":31,"nodeType":"842","messageId":"843","endLine":17,"endColumn":43},{"ruleId":"840","severity":1,"message":"1059","line":18,"column":13,"nodeType":"842","messageId":"843","endLine":18,"endColumn":16},{"ruleId":"946","severity":1,"message":"947","line":190,"column":3,"nodeType":"860","messageId":"948","endLine":192,"endColumn":4},{"ruleId":"862","severity":1,"message":"863","line":195,"column":43,"nodeType":"864","messageId":"861","endLine":195,"endColumn":45},{"ruleId":"845","replacedBy":"1060"},{"ruleId":"847","replacedBy":"1061"},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":13},{"ruleId":"840","severity":1,"message":"883","line":21,"column":10,"nodeType":"842","messageId":"843","endLine":21,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":15},{"ruleId":"840","severity":1,"message":"844","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":12},{"ruleId":"840","severity":1,"message":"901","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":26,"column":8,"nodeType":"842","messageId":"843","endLine":26,"endColumn":14},{"ruleId":"840","severity":1,"message":"885","line":27,"column":10,"nodeType":"842","messageId":"843","endLine":27,"endColumn":13},{"ruleId":"840","severity":1,"message":"886","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":14},{"ruleId":"840","severity":1,"message":"985","line":29,"column":8,"nodeType":"842","messageId":"843","endLine":29,"endColumn":10},{"ruleId":"957","severity":1,"message":"958","line":76,"column":31,"nodeType":"959","messageId":"960","endLine":76,"endColumn":32,"suggestions":"1062"},{"ruleId":"957","severity":1,"message":"962","line":76,"column":33,"nodeType":"959","messageId":"960","endLine":76,"endColumn":34,"suggestions":"1063"},{"ruleId":"957","severity":1,"message":"958","line":76,"column":53,"nodeType":"959","messageId":"960","endLine":76,"endColumn":54,"suggestions":"1064"},{"ruleId":"957","severity":1,"message":"962","line":76,"column":55,"nodeType":"959","messageId":"960","endLine":76,"endColumn":56,"suggestions":"1065"},{"ruleId":"887","severity":1,"message":"990","line":144,"column":23,"nodeType":"889","endLine":144,"endColumn":25,"suggestions":"1066"},{"ruleId":"887","severity":1,"message":"891","line":202,"column":15,"nodeType":"892","endLine":206,"endColumn":6},{"ruleId":"887","severity":1,"message":"1067","line":206,"column":8,"nodeType":"889","endLine":206,"endColumn":20,"suggestions":"1068"},{"ruleId":"895","severity":1,"message":"896","line":276,"column":57,"nodeType":"897","endLine":276,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":308,"column":57,"nodeType":"897","endLine":308,"endColumn":86},{"ruleId":"943","severity":1,"message":"944","line":340,"column":81,"nodeType":"945","endLine":340,"endColumn":157},{"ruleId":"840","severity":1,"message":"1051","line":1,"column":17,"nodeType":"842","messageId":"843","endLine":1,"endColumn":26},{"ruleId":"840","severity":1,"message":"1069","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":18},{"ruleId":"840","severity":1,"message":"954","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"1070","line":27,"column":10,"nodeType":"842","messageId":"843","endLine":27,"endColumn":22},{"ruleId":"840","severity":1,"message":"966","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":14},{"ruleId":"840","severity":1,"message":"1071","line":29,"column":8,"nodeType":"842","messageId":"843","endLine":29,"endColumn":12},{"ruleId":"840","severity":1,"message":"1072","line":30,"column":8,"nodeType":"842","messageId":"843","endLine":30,"endColumn":12},{"ruleId":"840","severity":1,"message":"882","line":31,"column":8,"nodeType":"842","messageId":"843","endLine":31,"endColumn":13},{"ruleId":"840","severity":1,"message":"1073","line":32,"column":8,"nodeType":"842","messageId":"843","endLine":32,"endColumn":14},{"ruleId":"840","severity":1,"message":"1074","line":33,"column":8,"nodeType":"842","messageId":"843","endLine":33,"endColumn":25},{"ruleId":"840","severity":1,"message":"1075","line":34,"column":8,"nodeType":"842","messageId":"843","endLine":34,"endColumn":16},{"ruleId":"840","severity":1,"message":"1076","line":38,"column":8,"nodeType":"842","messageId":"843","endLine":38,"endColumn":18},{"ruleId":"840","severity":1,"message":"1050","line":39,"column":10,"nodeType":"842","messageId":"843","endLine":39,"endColumn":18},{"ruleId":"840","severity":1,"message":"1077","line":40,"column":8,"nodeType":"842","messageId":"843","endLine":40,"endColumn":13},{"ruleId":"840","severity":1,"message":"1078","line":41,"column":8,"nodeType":"842","messageId":"843","endLine":41,"endColumn":16},{"ruleId":"840","severity":1,"message":"1079","line":42,"column":8,"nodeType":"842","messageId":"843","endLine":42,"endColumn":29},{"ruleId":"840","severity":1,"message":"1080","line":48,"column":10,"nodeType":"842","messageId":"843","endLine":48,"endColumn":28},{"ruleId":"840","severity":1,"message":"919","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":20},{"ruleId":"840","severity":1,"message":"921","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":22},{"ruleId":"887","severity":1,"message":"891","line":125,"column":15,"nodeType":"892","endLine":129,"endColumn":6},{"ruleId":"887","severity":1,"message":"1042","line":129,"column":8,"nodeType":"889","endLine":129,"endColumn":20,"suggestions":"1081"},{"ruleId":"895","severity":1,"message":"896","line":330,"column":57,"nodeType":"897","endLine":330,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":356,"column":57,"nodeType":"897","endLine":356,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":382,"column":57,"nodeType":"897","endLine":382,"endColumn":86},{"ruleId":"840","severity":1,"message":"919","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":20},{"ruleId":"840","severity":1,"message":"920","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":24},{"ruleId":"840","severity":1,"message":"901","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":16},{"ruleId":"840","severity":1,"message":"921","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":22},{"ruleId":"840","severity":1,"message":"900","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":19},{"ruleId":"840","severity":1,"message":"903","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":14},{"ruleId":"840","severity":1,"message":"922","line":47,"column":15,"nodeType":"842","messageId":"843","endLine":47,"endColumn":20},{"ruleId":"887","severity":1,"message":"891","line":75,"column":15,"nodeType":"892","endLine":79,"endColumn":6},{"ruleId":"887","severity":1,"message":"1082","line":79,"column":8,"nodeType":"889","endLine":79,"endColumn":20,"suggestions":"1083"},{"ruleId":"840","severity":1,"message":"886","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":14},{"ruleId":"840","severity":1,"message":"1084","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":21},{"ruleId":"840","severity":1,"message":"985","line":7,"column":8,"nodeType":"842","messageId":"843","endLine":7,"endColumn":10},{"ruleId":"840","severity":1,"message":"1085","line":41,"column":7,"nodeType":"842","messageId":"843","endLine":41,"endColumn":11},{"ruleId":"840","severity":1,"message":"1086","line":42,"column":7,"nodeType":"842","messageId":"843","endLine":42,"endColumn":14},{"ruleId":"840","severity":1,"message":"1087","line":44,"column":7,"nodeType":"842","messageId":"843","endLine":44,"endColumn":15},{"ruleId":"840","severity":1,"message":"1088","line":127,"column":13,"nodeType":"842","messageId":"843","endLine":127,"endColumn":22},{"ruleId":"840","severity":1,"message":"1089","line":127,"column":24,"nodeType":"842","messageId":"843","endLine":127,"endColumn":26},{"ruleId":"840","severity":1,"message":"1090","line":10,"column":10,"nodeType":"842","messageId":"843","endLine":10,"endColumn":19},{"ruleId":"840","severity":1,"message":"968","line":9,"column":10,"nodeType":"842","messageId":"843","endLine":9,"endColumn":19},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"966","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":14},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"978","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":15},{"ruleId":"840","severity":1,"message":"882","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":32},{"ruleId":"840","severity":1,"message":"883","line":20,"column":10,"nodeType":"842","messageId":"843","endLine":20,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"844","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":12},{"ruleId":"840","severity":1,"message":"901","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":14},{"ruleId":"840","severity":1,"message":"1091","line":8,"column":8,"nodeType":"842","messageId":"843","endLine":8,"endColumn":22},{"ruleId":"840","severity":1,"message":"1092","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":13},{"ruleId":"840","severity":1,"message":"1093","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":17},{"ruleId":"840","severity":1,"message":"1094","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":22},{"ruleId":"840","severity":1,"message":"1095","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"1096","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":23},{"ruleId":"840","severity":1,"message":"968","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":17},{"ruleId":"840","severity":1,"message":"1069","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":18},{"ruleId":"840","severity":1,"message":"1097","line":21,"column":10,"nodeType":"842","messageId":"843","endLine":21,"endColumn":31},{"ruleId":"840","severity":1,"message":"1098","line":21,"column":33,"nodeType":"842","messageId":"843","endLine":21,"endColumn":53},{"ruleId":"840","severity":1,"message":"1099","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":20},{"ruleId":"840","severity":1,"message":"1100","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":24},{"ruleId":"840","severity":1,"message":"1101","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":18},{"ruleId":"840","severity":1,"message":"1102","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":16},{"ruleId":"840","severity":1,"message":"1103","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":13},{"ruleId":"840","severity":1,"message":"1104","line":30,"column":8,"nodeType":"842","messageId":"843","endLine":30,"endColumn":21},{"ruleId":"840","severity":1,"message":"852","line":31,"column":8,"nodeType":"842","messageId":"843","endLine":31,"endColumn":25},{"ruleId":"840","severity":1,"message":"1105","line":32,"column":8,"nodeType":"842","messageId":"843","endLine":32,"endColumn":19},{"ruleId":"840","severity":1,"message":"1106","line":38,"column":8,"nodeType":"842","messageId":"843","endLine":38,"endColumn":13},{"ruleId":"840","severity":1,"message":"841","line":42,"column":10,"nodeType":"842","messageId":"843","endLine":42,"endColumn":18},{"ruleId":"840","severity":1,"message":"1107","line":48,"column":5,"nodeType":"842","messageId":"843","endLine":48,"endColumn":10},{"ruleId":"840","severity":1,"message":"1108","line":234,"column":11,"nodeType":"842","messageId":"843","endLine":234,"endColumn":18},{"ruleId":"873","severity":1,"message":"874","line":266,"column":17,"nodeType":"875","messageId":"876","endLine":266,"endColumn":28},{"ruleId":"840","severity":1,"message":"1109","line":283,"column":9,"nodeType":"842","messageId":"843","endLine":283,"endColumn":19},{"ruleId":"840","severity":1,"message":"1110","line":336,"column":11,"nodeType":"842","messageId":"843","endLine":336,"endColumn":14},{"ruleId":"1111","severity":1,"message":"1112","line":550,"column":45,"nodeType":"945","endLine":553,"endColumn":47},{"ruleId":"840","severity":1,"message":"1113","line":683,"column":7,"nodeType":"842","messageId":"843","endLine":683,"endColumn":22},{"ruleId":"840","severity":1,"message":"1114","line":693,"column":7,"nodeType":"842","messageId":"843","endLine":693,"endColumn":21},{"ruleId":"845","replacedBy":"1115"},{"ruleId":"847","replacedBy":"1116"},{"ruleId":"840","severity":1,"message":"919","line":2,"column":10,"nodeType":"842","messageId":"843","endLine":2,"endColumn":20},{"ruleId":"840","severity":1,"message":"879","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":17},{"ruleId":"840","severity":1,"message":"881","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":32},{"ruleId":"840","severity":1,"message":"883","line":20,"column":10,"nodeType":"842","messageId":"843","endLine":20,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"844","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":12},{"ruleId":"840","severity":1,"message":"901","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":14},{"ruleId":"840","severity":1,"message":"885","line":26,"column":10,"nodeType":"842","messageId":"843","endLine":26,"endColumn":13},{"ruleId":"957","severity":1,"message":"958","line":74,"column":31,"nodeType":"959","messageId":"960","endLine":74,"endColumn":32,"suggestions":"1117"},{"ruleId":"957","severity":1,"message":"962","line":74,"column":33,"nodeType":"959","messageId":"960","endLine":74,"endColumn":34,"suggestions":"1118"},{"ruleId":"957","severity":1,"message":"958","line":74,"column":53,"nodeType":"959","messageId":"960","endLine":74,"endColumn":54,"suggestions":"1119"},{"ruleId":"957","severity":1,"message":"962","line":74,"column":55,"nodeType":"959","messageId":"960","endLine":74,"endColumn":56,"suggestions":"1120"},{"ruleId":"887","severity":1,"message":"1121","line":141,"column":23,"nodeType":"889","endLine":141,"endColumn":25,"suggestions":"1122"},{"ruleId":"887","severity":1,"message":"891","line":153,"column":15,"nodeType":"892","endLine":157,"endColumn":6},{"ruleId":"887","severity":1,"message":"1123","line":157,"column":8,"nodeType":"889","endLine":157,"endColumn":20,"suggestions":"1124"},{"ruleId":"895","severity":1,"message":"896","line":242,"column":57,"nodeType":"897","endLine":242,"endColumn":86},{"ruleId":"895","severity":1,"message":"896","line":265,"column":57,"nodeType":"897","endLine":265,"endColumn":86},{"ruleId":"840","severity":1,"message":"966","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":16},{"ruleId":"840","severity":1,"message":"953","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":18},{"ruleId":"840","severity":1,"message":"899","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":13},{"ruleId":"840","severity":1,"message":"968","line":13,"column":10,"nodeType":"842","messageId":"843","endLine":13,"endColumn":19},{"ruleId":"840","severity":1,"message":"879","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":13},{"ruleId":"840","severity":1,"message":"880","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":18},{"ruleId":"840","severity":1,"message":"854","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":24},{"ruleId":"840","severity":1,"message":"900","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":19},{"ruleId":"840","severity":1,"message":"856","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":17},{"ruleId":"840","severity":1,"message":"966","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":14},{"ruleId":"840","severity":1,"message":"881","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":21},{"ruleId":"840","severity":1,"message":"882","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":13},{"ruleId":"840","severity":1,"message":"872","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":32},{"ruleId":"840","severity":1,"message":"883","line":24,"column":10,"nodeType":"842","messageId":"843","endLine":24,"endColumn":28},{"ruleId":"840","severity":1,"message":"884","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":15},{"ruleId":"840","severity":1,"message":"844","line":26,"column":8,"nodeType":"842","messageId":"843","endLine":26,"endColumn":12},{"ruleId":"840","severity":1,"message":"901","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":18},{"ruleId":"840","severity":1,"message":"902","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":16},{"ruleId":"840","severity":1,"message":"903","line":29,"column":8,"nodeType":"842","messageId":"843","endLine":29,"endColumn":14},{"ruleId":"840","severity":1,"message":"885","line":30,"column":10,"nodeType":"842","messageId":"843","endLine":30,"endColumn":13},{"ruleId":"840","severity":1,"message":"886","line":31,"column":8,"nodeType":"842","messageId":"843","endLine":31,"endColumn":14},{"ruleId":"840","severity":1,"message":"985","line":32,"column":8,"nodeType":"842","messageId":"843","endLine":32,"endColumn":10},{"ruleId":"840","severity":1,"message":"935","line":33,"column":8,"nodeType":"842","messageId":"843","endLine":33,"endColumn":15},{"ruleId":"887","severity":1,"message":"990","line":127,"column":23,"nodeType":"889","endLine":127,"endColumn":25,"suggestions":"1125"},{"ruleId":"943","severity":1,"message":"944","line":146,"column":21,"nodeType":"945","endLine":146,"endColumn":94},{"ruleId":"845","replacedBy":"1126"},{"ruleId":"847","replacedBy":"1127"},{"ruleId":"840","severity":1,"message":"966","line":2,"column":8,"nodeType":"842","messageId":"843","endLine":2,"endColumn":14},{"ruleId":"1128","severity":1,"message":"1129","line":16,"column":13,"nodeType":"945","endLine":16,"endColumn":115},{"ruleId":"845","replacedBy":"1130"},{"ruleId":"847","replacedBy":"1131"},{"ruleId":"840","severity":1,"message":"1079","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":29},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'swal' is defined but never used.","no-native-reassign",["1132"],"no-negated-in-lhs",["1133"],["1132"],["1133"],"'Container' is defined but never used.","'DialogContentText' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'FormLabel' is defined but never used.","'PageLoader' is defined but never used.","no-dupe-class-members","Duplicate name 'componentWillReceiveProps'.","MethodDefinition","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["1132"],["1133"],["1132"],["1133"],["1132"],["1133"],"'IconButton' is defined but never used.","'FontAwesomeIconComponent' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral",["1132"],["1133"],"'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'LoadderButton' is defined but never used.","'Paper' is defined but never used.","'SignalCellularNull' is defined but never used.","'Authapi' is defined but never used.","'now' is defined but never used.","'moment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTicketData'. Either include it or remove the dependency array.","ArrayExpression",["1134"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'editTickets' and 'isSubmitting'. Either include them or remove the dependency array.",["1135"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useRef' is defined but never used.","'Input' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'months' is defined but never used.","'isEmptyArray' is defined but never used.","'jsPDF' is defined but never used.","'htmlToPdfmake' is defined but never used.","'length' is defined but never used.","'inipdf' is assigned a value but never used.","'sal' is assigned a value but never used.","'setSal' is assigned a value but never used.","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["1132"],["1133"],"'makeStyles' is defined but never used.","'TextareaAutosize' is defined but never used.","'FormHelperText' is defined but never used.","'regex' is assigned a value but never used.","'ds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getQulification'. Either include it or remove the dependency array.",["1136"],"React Hook useEffect has missing dependencies: 'Qulification' and 'isSubmitting'. Either include them or remove the dependency array.",["1137"],["1132"],["1133"],"React Hook useEffect has a missing dependency: 'getExp'. Either include it or remove the dependency array.",["1138"],"React Hook useEffect has missing dependencies: 'experience1' and 'isSubmitting'. Either include them or remove the dependency array.",["1139"],"'useContext' is defined but never used.","'Divider' is defined but never used.","'Editor' is defined but never used.","'pdfMake' is defined but never used.","'pdfFonts' is defined but never used.","'isSubmitting' is assigned a value but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isSubmitting'. Either include it or remove the dependency array.",["1140"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-useless-constructor","Useless constructor.","noUselessConstructor",["1132"],["1133"],"'classes' is assigned a value but never used.","'lighten' is defined but never used.","'DeleteIcon' is defined but never used.","'Tooltip' is defined but never used.",["1132"],["1133"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["1141","1142"],"Unnecessary escape character: \\-.",["1143","1144"],["1145","1146"],["1147","1148"],"'Button' is defined but never used.","'CssBaseline' is defined but never used.","'TextField' is defined but never used.","'clsx' is defined but never used.","'CircularProgress' is defined but never used.","'get' is defined but never used.","'set' is defined but never used.","'Textbox' is defined but never used.","'Grid' is defined but never used.","'Formik' is defined but never used.",["1132"],["1133"],"'AuthApi' is defined but never used.",["1149","1150"],["1151","1152"],["1153","1154"],["1155","1156"],"React Hook useEffect has missing dependencies: 'createLeaves' and 'isSubmitting'. Either include them or remove the dependency array.",["1157"],"'ls' is defined but never used.",["1158","1159"],["1160","1161"],["1162","1163"],["1164","1165"],"React Hook useEffect has a missing dependency: 'getEventData'. Either include it or remove the dependency array.",["1166"],"React Hook useEffect has missing dependencies: 'editEvent' and 'isSubmitting'. Either include them or remove the dependency array.",["1167"],"'colors' is defined but never used.","'GridList' is defined but never used.","'ClearIcon' is defined but never used.",["1168","1169"],["1170","1171"],["1172","1173"],["1174","1175"],"React Hook useEffect has missing dependencies: 'isSubmitting' and 'upcomingEvent'. Either include them or remove the dependency array.",["1176"],"React Hook useEffect has missing dependencies: 'isSubmitting' and 'qulification'. Either include them or remove the dependency array.",["1177"],"'userData' is defined but never used.","'formvalue' is assigned a value but never used.","'setFormvalue' is assigned a value but never used.",["1178","1179"],["1180","1181"],["1182","1183"],["1184","1185"],"'isRunning' is assigned a value but never used.","'reset' is assigned a value but never used.","'PropTypes' is defined but never used.","'CancelPresentationIcon' is defined but never used.","'SearchIcon' is defined but never used.","'row' is assigned a value but never used.","'submitForm' is assigned a value but never used.",["1186","1187"],["1188","1189"],["1190","1191"],["1192","1193"],"React Hook React.useEffect has a missing dependency: 'RoleData'. Either include it or remove the dependency array.",["1194"],"React Hook useEffect has missing dependencies: 'createUser' and 'isSubmitting'. Either include them or remove the dependency array.",["1195"],["1196","1197"],["1198","1199"],["1200","1201"],["1202","1203"],"React Hook useEffect has missing dependencies: 'Tickets' and 'isSubmitting'. Either include them or remove the dependency array.",["1204"],"'ContactsOutlined' is defined but never used.",["1205","1206"],["1207","1208"],["1209","1210"],["1211","1212"],"React Hook useEffect has missing dependencies: 'event' and 'isSubmitting'. Either include them or remove the dependency array.",["1213"],"React Hook useEffect has a missing dependency: 'getJob'. Either include it or remove the dependency array.",["1214"],"React Hook useEffect has missing dependencies: 'isSubmitting' and 'job'. Either include them or remove the dependency array.",["1215"],["1216","1217"],["1218","1219"],["1220","1221"],["1222","1223"],"React Hook useEffect has missing dependencies: 'addTimeData' and 'isSubmitting'. Either include them or remove the dependency array.",["1224"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Field' is defined but never used.","'Form' is defined but never used.","'ErrorMessage' is defined but never used.","'Yup' is defined but never used.",["1132"],["1133"],["1225","1226"],["1227","1228"],["1229","1230"],["1231","1232"],["1233"],"React Hook useEffect has missing dependencies: 'editUpComingEvent' and 'isSubmitting'. Either include them or remove the dependency array.",["1234"],"'Typography' is defined but never used.","'revokeAccess' is defined but never used.","'Fade' is defined but never used.","'Grow' is defined but never used.","'Popper' is defined but never used.","'ClickAwayListener' is defined but never used.","'MenuList' is defined but never used.","'StarBorder' is defined but never used.","'Badge' is defined but never used.","'MailIcon' is defined but never used.","'NotificationsNoneIcon' is defined but never used.","'notificationsLabel' is defined but never used.",["1235"],"React Hook useEffect has missing dependencies: 'experience' and 'isSubmitting'. Either include them or remove the dependency array.",["1236"],"'min' is defined but never used.","'size' is assigned a value but never used.","'hideDay' is assigned a value but never used.","'dayTitle' is assigned a value but never used.","'className' is assigned a value but never used.","'id' is assigned a value but never used.","'getAccess' is defined but never used.","'CountdownTimer' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TablePagination' is defined but never used.","'FaArrowAltCircleRight' is defined but never used.","'FaArrowAltCircleLeft' is defined but never used.","'SkipNextIcon' is defined but never used.","'SkipPreviousIcon' is defined but never used.","'ScreenShot' is defined but never used.","'Snackbar' is defined but never used.","'Slide' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'Timer' is defined but never used.","'value' is defined but never used.","'columns' is assigned a value but never used.","'dateString' is assigned a value but never used.","'val' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'StyledTableCell' is assigned a value but never used.","'StyledTableRow' is assigned a value but never used.",["1132"],["1133"],["1237","1238"],["1239","1240"],["1241","1242"],["1243","1244"],"React Hook useEffect has a missing dependency: 'getLeaveData'. Either include it or remove the dependency array.",["1245"],"React Hook useEffect has missing dependencies: 'editUser1' and 'isSubmitting'. Either include them or remove the dependency array.",["1246"],["1247"],["1132"],["1133"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["1132"],["1133"],"no-global-assign","no-unsafe-negation",{"desc":"1248","fix":"1249"},{"desc":"1250","fix":"1251"},{"desc":"1252","fix":"1253"},{"desc":"1254","fix":"1255"},{"desc":"1256","fix":"1257"},{"desc":"1258","fix":"1259"},{"desc":"1260","fix":"1261"},{"messageId":"1262","fix":"1263","desc":"1264"},{"messageId":"1265","fix":"1266","desc":"1267"},{"messageId":"1262","fix":"1268","desc":"1264"},{"messageId":"1265","fix":"1269","desc":"1267"},{"messageId":"1262","fix":"1270","desc":"1264"},{"messageId":"1265","fix":"1271","desc":"1267"},{"messageId":"1262","fix":"1272","desc":"1264"},{"messageId":"1265","fix":"1273","desc":"1267"},{"messageId":"1262","fix":"1274","desc":"1264"},{"messageId":"1265","fix":"1275","desc":"1267"},{"messageId":"1262","fix":"1276","desc":"1264"},{"messageId":"1265","fix":"1277","desc":"1267"},{"messageId":"1262","fix":"1278","desc":"1264"},{"messageId":"1265","fix":"1279","desc":"1267"},{"messageId":"1262","fix":"1280","desc":"1264"},{"messageId":"1265","fix":"1281","desc":"1267"},{"desc":"1282","fix":"1283"},{"messageId":"1262","fix":"1284","desc":"1264"},{"messageId":"1265","fix":"1285","desc":"1267"},{"messageId":"1262","fix":"1286","desc":"1264"},{"messageId":"1265","fix":"1287","desc":"1267"},{"messageId":"1262","fix":"1288","desc":"1264"},{"messageId":"1265","fix":"1289","desc":"1267"},{"messageId":"1262","fix":"1290","desc":"1264"},{"messageId":"1265","fix":"1291","desc":"1267"},{"desc":"1292","fix":"1293"},{"desc":"1294","fix":"1295"},{"messageId":"1262","fix":"1296","desc":"1264"},{"messageId":"1265","fix":"1297","desc":"1267"},{"messageId":"1262","fix":"1298","desc":"1264"},{"messageId":"1265","fix":"1299","desc":"1267"},{"messageId":"1262","fix":"1300","desc":"1264"},{"messageId":"1265","fix":"1301","desc":"1267"},{"messageId":"1262","fix":"1302","desc":"1264"},{"messageId":"1265","fix":"1303","desc":"1267"},{"desc":"1304","fix":"1305"},{"desc":"1306","fix":"1307"},{"messageId":"1262","fix":"1308","desc":"1264"},{"messageId":"1265","fix":"1309","desc":"1267"},{"messageId":"1262","fix":"1310","desc":"1264"},{"messageId":"1265","fix":"1311","desc":"1267"},{"messageId":"1262","fix":"1312","desc":"1264"},{"messageId":"1265","fix":"1313","desc":"1267"},{"messageId":"1262","fix":"1314","desc":"1264"},{"messageId":"1265","fix":"1315","desc":"1267"},{"messageId":"1262","fix":"1316","desc":"1264"},{"messageId":"1265","fix":"1317","desc":"1267"},{"messageId":"1262","fix":"1318","desc":"1264"},{"messageId":"1265","fix":"1319","desc":"1267"},{"messageId":"1262","fix":"1320","desc":"1264"},{"messageId":"1265","fix":"1321","desc":"1267"},{"messageId":"1262","fix":"1322","desc":"1264"},{"messageId":"1265","fix":"1323","desc":"1267"},{"desc":"1324","fix":"1325"},{"desc":"1326","fix":"1327"},{"messageId":"1262","fix":"1328","desc":"1264"},{"messageId":"1265","fix":"1329","desc":"1267"},{"messageId":"1262","fix":"1330","desc":"1264"},{"messageId":"1265","fix":"1331","desc":"1267"},{"messageId":"1262","fix":"1332","desc":"1264"},{"messageId":"1265","fix":"1333","desc":"1267"},{"messageId":"1262","fix":"1334","desc":"1264"},{"messageId":"1265","fix":"1335","desc":"1267"},{"desc":"1336","fix":"1337"},{"messageId":"1262","fix":"1338","desc":"1264"},{"messageId":"1265","fix":"1339","desc":"1267"},{"messageId":"1262","fix":"1340","desc":"1264"},{"messageId":"1265","fix":"1341","desc":"1267"},{"messageId":"1262","fix":"1342","desc":"1264"},{"messageId":"1265","fix":"1343","desc":"1267"},{"messageId":"1262","fix":"1344","desc":"1264"},{"messageId":"1265","fix":"1345","desc":"1267"},{"desc":"1346","fix":"1347"},{"desc":"1348","fix":"1349"},{"desc":"1350","fix":"1351"},{"messageId":"1262","fix":"1352","desc":"1264"},{"messageId":"1265","fix":"1353","desc":"1267"},{"messageId":"1262","fix":"1354","desc":"1264"},{"messageId":"1265","fix":"1355","desc":"1267"},{"messageId":"1262","fix":"1356","desc":"1264"},{"messageId":"1265","fix":"1357","desc":"1267"},{"messageId":"1262","fix":"1358","desc":"1264"},{"messageId":"1265","fix":"1359","desc":"1267"},{"desc":"1360","fix":"1361"},{"messageId":"1262","fix":"1362","desc":"1264"},{"messageId":"1265","fix":"1363","desc":"1267"},{"messageId":"1262","fix":"1364","desc":"1264"},{"messageId":"1265","fix":"1365","desc":"1267"},{"messageId":"1262","fix":"1366","desc":"1264"},{"messageId":"1265","fix":"1367","desc":"1267"},{"messageId":"1262","fix":"1368","desc":"1264"},{"messageId":"1265","fix":"1369","desc":"1267"},{"desc":"1292","fix":"1370"},{"desc":"1371","fix":"1372"},{"desc":"1350","fix":"1373"},{"desc":"1374","fix":"1375"},{"messageId":"1262","fix":"1376","desc":"1264"},{"messageId":"1265","fix":"1377","desc":"1267"},{"messageId":"1262","fix":"1378","desc":"1264"},{"messageId":"1265","fix":"1379","desc":"1267"},{"messageId":"1262","fix":"1380","desc":"1264"},{"messageId":"1265","fix":"1381","desc":"1267"},{"messageId":"1262","fix":"1382","desc":"1264"},{"messageId":"1265","fix":"1383","desc":"1267"},{"desc":"1384","fix":"1385"},{"desc":"1386","fix":"1387"},{"desc":"1292","fix":"1388"},"Update the dependencies array to be: [getTicketData]",{"range":"1389","text":"1390"},"Update the dependencies array to be: [editTickets, formErrors, isSubmitting]",{"range":"1391","text":"1392"},"Update the dependencies array to be: [getQulification]",{"range":"1393","text":"1394"},"Update the dependencies array to be: [Qulification, formErrors, isSubmitting]",{"range":"1395","text":"1396"},"Update the dependencies array to be: [getExp]",{"range":"1397","text":"1398"},"Update the dependencies array to be: [experience1, formErrors, isSubmitting]",{"range":"1399","text":"1400"},"Update the dependencies array to be: [formErrors, isSubmitting]",{"range":"1401","text":"1402"},"removeEscape",{"range":"1403","text":"1404"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1405","text":"1406"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1407","text":"1404"},{"range":"1408","text":"1406"},{"range":"1409","text":"1404"},{"range":"1410","text":"1406"},{"range":"1411","text":"1404"},{"range":"1412","text":"1406"},{"range":"1413","text":"1404"},{"range":"1414","text":"1406"},{"range":"1415","text":"1404"},{"range":"1416","text":"1406"},{"range":"1417","text":"1404"},{"range":"1418","text":"1406"},{"range":"1419","text":"1404"},{"range":"1420","text":"1406"},"Update the dependencies array to be: [createLeaves, formErrors, isSubmitting]",{"range":"1421","text":"1422"},{"range":"1423","text":"1404"},{"range":"1424","text":"1406"},{"range":"1425","text":"1404"},{"range":"1426","text":"1406"},{"range":"1427","text":"1404"},{"range":"1428","text":"1406"},{"range":"1429","text":"1404"},{"range":"1430","text":"1406"},"Update the dependencies array to be: [getEventData]",{"range":"1431","text":"1432"},"Update the dependencies array to be: [editEvent, formErrors, isSubmitting]",{"range":"1433","text":"1434"},{"range":"1435","text":"1404"},{"range":"1436","text":"1406"},{"range":"1437","text":"1404"},{"range":"1438","text":"1406"},{"range":"1439","text":"1404"},{"range":"1440","text":"1406"},{"range":"1441","text":"1404"},{"range":"1442","text":"1406"},"Update the dependencies array to be: [formErrors, isSubmitting, upcomingEvent]",{"range":"1443","text":"1444"},"Update the dependencies array to be: [formErrors, isSubmitting, qulification]",{"range":"1445","text":"1446"},{"range":"1447","text":"1404"},{"range":"1448","text":"1406"},{"range":"1449","text":"1404"},{"range":"1450","text":"1406"},{"range":"1451","text":"1404"},{"range":"1452","text":"1406"},{"range":"1453","text":"1404"},{"range":"1454","text":"1406"},{"range":"1455","text":"1404"},{"range":"1456","text":"1406"},{"range":"1457","text":"1404"},{"range":"1458","text":"1406"},{"range":"1459","text":"1404"},{"range":"1460","text":"1406"},{"range":"1461","text":"1404"},{"range":"1462","text":"1406"},"Update the dependencies array to be: [RoleData]",{"range":"1463","text":"1464"},"Update the dependencies array to be: [createUser, formErrors, isSubmitting]",{"range":"1465","text":"1466"},{"range":"1467","text":"1404"},{"range":"1468","text":"1406"},{"range":"1469","text":"1404"},{"range":"1470","text":"1406"},{"range":"1471","text":"1404"},{"range":"1472","text":"1406"},{"range":"1473","text":"1404"},{"range":"1474","text":"1406"},"Update the dependencies array to be: [Tickets, formErrors, isSubmitting]",{"range":"1475","text":"1476"},{"range":"1477","text":"1404"},{"range":"1478","text":"1406"},{"range":"1479","text":"1404"},{"range":"1480","text":"1406"},{"range":"1481","text":"1404"},{"range":"1482","text":"1406"},{"range":"1483","text":"1404"},{"range":"1484","text":"1406"},"Update the dependencies array to be: [event, formErrors, isSubmitting]",{"range":"1485","text":"1486"},"Update the dependencies array to be: [getJob]",{"range":"1487","text":"1488"},"Update the dependencies array to be: [formErrors, isSubmitting, job]",{"range":"1489","text":"1490"},{"range":"1491","text":"1404"},{"range":"1492","text":"1406"},{"range":"1493","text":"1404"},{"range":"1494","text":"1406"},{"range":"1495","text":"1404"},{"range":"1496","text":"1406"},{"range":"1497","text":"1404"},{"range":"1498","text":"1406"},"Update the dependencies array to be: [addTimeData, formErrors, isSubmitting]",{"range":"1499","text":"1500"},{"range":"1501","text":"1404"},{"range":"1502","text":"1406"},{"range":"1503","text":"1404"},{"range":"1504","text":"1406"},{"range":"1505","text":"1404"},{"range":"1506","text":"1406"},{"range":"1507","text":"1404"},{"range":"1508","text":"1406"},{"range":"1509","text":"1432"},"Update the dependencies array to be: [editUpComingEvent, formErrors, isSubmitting]",{"range":"1510","text":"1511"},{"range":"1512","text":"1490"},"Update the dependencies array to be: [experience, formErrors, isSubmitting]",{"range":"1513","text":"1514"},{"range":"1515","text":"1404"},{"range":"1516","text":"1406"},{"range":"1517","text":"1404"},{"range":"1518","text":"1406"},{"range":"1519","text":"1404"},{"range":"1520","text":"1406"},{"range":"1521","text":"1404"},{"range":"1522","text":"1406"},"Update the dependencies array to be: [getLeaveData]",{"range":"1523","text":"1524"},"Update the dependencies array to be: [editUser1, formErrors, isSubmitting]",{"range":"1525","text":"1526"},{"range":"1527","text":"1432"},[5514,5516],"[getTicketData]",[5836,5848],"[editTickets, formErrors, isSubmitting]",[2495,2497],"[getQulification]",[2774,2786],"[Qulification, formErrors, isSubmitting]",[2876,2878],"[getExp]",[3183,3195],"[experience1, formErrors, isSubmitting]",[1842,1854],"[formErrors, isSubmitting]",[2767,2768],"",[2767,2767],"\\",[2769,2770],[2769,2769],[2789,2790],[2789,2789],[2791,2792],[2791,2791],[2786,2787],[2786,2786],[2788,2789],[2788,2788],[2808,2809],[2808,2808],[2810,2811],[2810,2810],[3935,3947],"[createLeaves, formErrors, isSubmitting]",[2414,2415],[2414,2414],[2416,2417],[2416,2416],[2436,2437],[2436,2436],[2438,2439],[2438,2438],[4076,4078],"[getEventData]",[7051,7063],"[editEvent, formErrors, isSubmitting]",[4350,4351],[4350,4350],[4352,4353],[4352,4352],[4372,4373],[4372,4372],[4374,4375],[4374,4374],[5654,5666],"[formErrors, isSubmitting, upcomingEvent]",[2260,2272],"[formErrors, isSubmitting, qulification]",[1455,1456],[1455,1455],[1457,1458],[1457,1457],[1477,1478],[1477,1477],[1479,1480],[1479,1479],[2830,2831],[2830,2830],[2832,2833],[2832,2832],[2852,2853],[2852,2852],[2854,2855],[2854,2854],[6668,6670],"[RoleData]",[7734,7746],"[createUser, formErrors, isSubmitting]",[2861,2862],[2861,2861],[2863,2864],[2863,2863],[2883,2884],[2883,2883],[2885,2886],[2885,2885],[4282,4294],"[Tickets, formErrors, isSubmitting]",[4267,4268],[4267,4267],[4269,4270],[4269,4269],[4289,4290],[4289,4289],[4291,4292],[4291,4291],[5089,5101],"[event, formErrors, isSubmitting]",[5038,5040],"[getJob]",[5347,5359],"[formErrors, isSubmitting, job]",[1315,1316],[1315,1315],[1317,1318],[1317,1317],[1337,1338],[1337,1337],[1339,1340],[1339,1339],[2142,2154],"[addTimeData, formErrors, isSubmitting]",[2736,2737],[2736,2736],[2738,2739],[2738,2738],[2758,2759],[2758,2758],[2760,2761],[2760,2760],[5038,5040],[6453,6465],"[editUpComingEvent, formErrors, isSubmitting]",[3620,3632],[2334,2346],"[experience, formErrors, isSubmitting]",[2578,2579],[2578,2578],[2580,2581],[2580,2580],[2600,2601],[2600,2600],[2602,2603],[2602,2602],[4503,4505],"[getLeaveData]",[4823,4835],"[editUser1, formErrors, isSubmitting]",[3964,3966]]